<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Java4050: Core Collection Interfaces</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m46138</md:content-id>
  <md:title>Java4050: Core Collection Interfaces</md:title>
  <md:abstract>The Java Collections Framework defines eight core interfaces, in two distinct trees. You will learn about the inheritance structure and the purpose of those interfaces. You will also learn how the interfaces declare polymorphic methods that apply to implementations of the interfaces, and you will learn about the optional methods of the Collection and Map interfaces.</md:abstract>
  <md:uuid>5c1b7a8d-d8d9-408d-a571-ace892cdba5f</md:uuid>
</metadata>

<content>






<para id="p1000">
Revised: Wed Apr 06 08:39:26 CDT 2016

</para>




<para id="p1001">
<emphasis id="em1000" effect="italics">
This page is included in the following Books:

</emphasis>
</para>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">

	

<link id="a1000" url="http://cnx.org/contents/dzOvxPFw">


<emphasis id="em1001" effect="italics">
ITSE 2321 - Object-Oriented Programming (Java)

</emphasis>
</link>


</item>


	

<item id="li1001">

	

<link id="a1001" url="http://cnx.org/contents/-2RmHFs_">


<emphasis id="em1002" effect="italics">
Object-Oriented Programming (OOP) with Java 
	

</emphasis>
 
	

</link>

 

</item>




</list>















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1001" list-type="bulleted">

	

<item id="li1002">
<link id="a1002" target-id="Preface">

Preface

</link>

 

</item>


	

<item id="li1003">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>


</item>


	

<item id="li1004">
<link id="a1004" target-id="Listings">

Listings

</link>


</item>


	

<item id="li1005">
<link id="a1005" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1006">
<link id="a1006" target-id="Generics">

Generics

</link>


</item>


	

<item id="li1007">
<link id="a1007" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


<list id="ul1002" list-type="bulleted">

		

<item id="li1008">
<link id="a1008" target-id="Illustration_of_core_collection_interfaces_">

Illustration of core collection interfaces

</link>


<list id="ul1003" list-type="bulleted">

			

<item id="li1009">
<link id="a1009" target-id="Multiple_list_implementations_">

Multiple list implementations

</link>


			

</item>


			

<item id="li1010">
<link id="a1010" target-id="TreeSet_and_ArrayList_">

TreeSet and ArrayList 

</link>

 

</item>


			

<item id="li1011">
<link id="a1011" target-id="Behavior_is_different_but_appropriate_">

Behavior is different but appropriate

</link>

 

</item>


		

</list>


		

</item>


		

<item id="li1012">
<link id="a1012" target-id="The_fillIt_method_">

The fillIt method 

</link>

 

</item>


		

<item id="li1013">
<link id="a1013" target-id="Create_and_populate_a_TreeSet_object_">

Create and populate a TreeSet object

</link>


		

<list id="ul1004" list-type="bulleted">

			

<item id="li1014">
<link id="a1014" target-id="Display_the_collections_contents_">

Display the collection's contents 
			

</link>

 

</item>


			

<item id="li1015">
<link id="a1015" target-id="TreeSet_object_is_type_SortedSet_">

TreeSet object is type SortedSet

</link>

 

</item>


		

</list>


		

</item>


		

<item id="li1016">
<link id="a1016" target-id="Create_and_populate_an_ArrayList_object">

Create and populate an ArrayList object 
		

</link>

 
		

<list id="ul1005" list-type="bulleted">

			

<item id="li1017">
<link id="a1017" target-id="Display_the_collections_contents">

Display the collection's contents

</link>


</item>


		

</list>


		

</item>


		

<item id="li1018">
<link id="a1018" target-id="The_important_point_">

The important point 

</link>


		

<list id="ul1006" list-type="bulleted">

			

<item id="li1019">
<link id="a1019" target-id="No_duplicate_elements_in_ascending_order_">

No duplicate elements in ascending order

</link>


			

</item>


			

<item id="li1020">
<link id="a1020" target-id="Duplicates_allowed_with_no_sorting_">

Duplicates allowed with no sorting 
			

</link>


</item>


		

</list>


		

</item>


		

<item id="li1021">
<link id="a1021" target-id="Structure_of_core_the_interfaces">

Structure of the core interfaces

</link>


</item>


		

<item id="li1022">
<link id="a1022" target-id="A_Map_is_not_a_true_Collection_">

A Map is not a true Collection

</link>


</item>


		

<item id="li1023">
<link id="a1023" target-id="Some_operations_are_optional_">

Some operations are optional

</link>


		

<list id="ul1007" list-type="bulleted">

			

<item id="li1024">
<link id="a1024" target-id="Support_for_optional_operations_">

Support for optional operations 
			

</link>


</item>


			

<item id="li1025">
<link id="a1025" target-id="Optional_Collection_operations">

Optional Collection operations

</link>


</item>


			

<item id="li1026">
<link id="a1026" target-id="Optional_Map_operations">

Optional Map operations 

</link>


			

</item>


			

<item id="li1027">
<link id="a1027" target-id="Many_methods_are_not_optional_">

Many methods are not optional 
			

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1028">
<link id="a1028" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1029">
<link id="a1029" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1030">
<link id="a1030" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1031">
<link id="a1031" target-id="Miscellaneous">

Miscellaneous

</link>

 

</item>




</list>




</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>




<para id="p1002">
This module is one of a series of modules designed to teach you about 
Object-Oriented Programming (OOP) in general and the Java Collections 
framework in particular.

</para>





<para id="p1003">
The Java 

<emphasis id="em1003" effect="italics">
Collections Framework

</emphasis>
 defines eight core interfaces, in two distinct trees.  
You will learn about the inheritance structure and the purpose of those interfaces.  
You will also learn how the interfaces declare polymorphic methods that apply to implementations of the interfaces, and 
you will learn about the optional methods of the 

<emphasis id="strong1000" effect="bold">
Collection

</emphasis>
 and


<emphasis id="strong1001" effect="bold">
Map

</emphasis>
 interfaces.

</para>





<para id="p1004">
In addition to studying these modules, I strongly recommend that you study 
the 

<link id="a1032" url="http://docs.oracle.com/javase/tutorial/collections/index.html">

Collections Trail

</link>

 in


<link id="a1033" url="http://docs.oracle.com/javase/tutorial/index.html">

Oracle's Java 
Tutorials

</link>

. The modules in this collection are intended to supplement and not 
to replace those tutorials.

</para>





<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>




<para id="p1005">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the listings while you are reading about them.

</para>





<section id="h31000">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<list id="ul1008" list-type="bulleted">

	

<item id="li1032">
<link id="a1034" target-id="Listing_1">

Listing 1

</link>

. The program named Ap401. 

</item>


	

<item id="li1033">
<link id="a1035" target-id="Listing_2">

Listing 2

</link>

. The Populator class. 

</item>


	

<item id="li1034">
<link id="a1036" target-id="Listing_3">

Listing 3

</link>

. Create and populate a TreeSet object.

</item>


	

<item id="li1035">
<link id="a1037" target-id="Listing_4">

Listing 4

</link>

. Create and populate an ArrayList object.

</item>




</list>




</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>




<para id="p1006">
In earlier modules, you learned that at least three things are included in 
a collections framework: 

</para>





<list id="ul1009" list-type="bulleted">

	

<item id="li1036">
interfaces

</item>


	

<item id="li1037">
implementations

</item>


	

<item id="li1038">
algorithms

</item>




</list>




<para id="p1007">
Earlier modules provided a general discussion of the purpose of the 
interfaces, implementations, and algorithms in the 

<emphasis id="em1004" effect="italics">
Collections Framework

</emphasis>
. 
This module takes that discussion further and illustrates the use of the 

<emphasis id="em1005" effect="italics">
core 
collection interfaces.

</emphasis>
 

</para>





<para id="p1008">
The Java Collections Framework defines eight core interfaces, in two distinct 
trees. You will learn the names and the inheritance structure of those 
interfaces. You will also learn about the purpose of some of those 
interfaces. You will see 
how the interfaces declare polymorphic methods that apply to implementations of 
the interfaces, and you will learn about the optional methods of the 

<emphasis id="strong1002" effect="bold">
Collection

</emphasis>
 interface. 


</para>





</section>
<section id="h11003">
<title>
<emphasis id="Generics" effect="bold">

Generics

</emphasis>


</title>




<para id="p1009">
The code in this series of modules is written with no thought given to


<link id="a1038" url="http://docs.oracle.com/javase/tutorial/java/generics/index.html">


Generics

</link>

. As a result, if you copy and compile the code, you will probably 
get warnings about 

<emphasis id="em1006" effect="italics">
unchecked or unsafe operations

</emphasis>
.

</para>





<para id="p1010">
While you will ultimately need to understand how to use Generics, that is a 
very complex topic. An understanding of Generics is beyond the scope of this 
course. Therefore, for purposes of this course, you can simply ignore those 
warnings.

</para>





</section>
<section id="h11004">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>




<section id="h21001">
<title>
<emphasis id="Illustration_of_core_collection_interfaces_" effect="bold">

Illustration of core 
collection interfaces 

</emphasis>


</title>




<para id="p1011">
We will begin this module with a little quiz. Take a look at the program 
shown in 

<link id="a1039" target-id="Listing_1">

Listing 1

</link>

 and see if you can answer the following question. 


</para>





<para id="p1012">
What output does the program in 

<link id="a1040" target-id="Listing_1">

Listing 1

</link>

 produce? 


</para>





<list id="ul1010" list-type="bulleted">

	

<item id="li1039">
A. Compiler Error

</item>


	

<item id="li1040">
B. Runtime Error

</item>


	

<item id="li1041">
C. 44321 44321

</item>


	

<item id="li1042">
D. 12344 12344

</item>


	

<item id="li1043">
E. 1234 44321

</item>


	

<item id="li1044">
F. 1234 4321

</item>


	

<item id="li1045">
D. None of the above.

</item>




</list>








	

<table id="table1000" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. The program 
				named Ap401.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">

				

<code id="pre1000" display="block">import java.util.TreeSet;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

public class Ap401{
  public static void main(String args[]){
    new Worker().doIt();
  }//end main()
}//end class Ap401

class Worker{
  public void doIt(){
    Collection ref = new TreeSet();
    Populator.fillIt(ref);
    Iterator iter = ref.iterator();
    while(iter.hasNext()){
      System.out.print(iter.next());
    }//end while loop
    System.out.print(" ");

    ref = new ArrayList();
    Populator.fillIt(ref);
    iter = ref.iterator();
    while(iter.hasNext()){
      System.out.print(iter.next());
    }//end while loop
    System.out.println();
  }//end doIt()
}// end class Worker

class Populator{
  public static void fillIt(Collection ref){
    ref.add(new Integer(4));
    ref.add(new Integer(4));
    ref.add(new Integer(3));
    ref.add(new Integer(2));
    ref.add(new Integer(1));
  }//end fillIt()
}//end class populator
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>






<para id="p1013">
If you selected the following answer, then you are correct. 

</para>





<para id="p1014">
E. 1234 44321 

</para>





<para id="p1015">
The program in 

<link id="a1041" target-id="Listing_1">

Listing 1

</link>

 illustrates the basic purpose of the core 
collection interfaces in the Java Collections Framework. That purpose 
is to allow collections to be manipulated without regard for how the collections 
are implemented. 

</para>





<section id="h31001">
<title>
<emphasis id="Multiple_list_implementations_" effect="bold">

Multiple list implementations 

</emphasis>




</title>




<para id="p1016">
For example, there is more than one way to implement a list. Two common 
ways involve arrays and linked structures. If two lists are implemented in 
different ways, but both satisfy the requirements of the core collection 
interfaces, they can each be manipulated the same way regardless of the details 
of their implementation. 

</para>





</section>
<section id="h31002">
<title>
<emphasis id="TreeSet_and_ArrayList_" effect="bold">

TreeSet and ArrayList 

</emphasis>


</title>




<para id="p1017">
A collection of type 

<emphasis id="strong1003" effect="bold">
TreeSet

</emphasis>
 and a collection of type 

<emphasis id="strong1004" effect="bold">
ArrayList

</emphasis>
 
are instantiated in the program in 

<link id="a1042" target-id="Listing_1">

Listing 1

</link>

. Each of the collections is 
viewed as being of the interface type 

<emphasis id="strong1005" effect="bold">
Collection

</emphasis>
. A method named 

<emphasis id="strong1006" effect="bold">
add

</emphasis>
 is used to populate each collection with the same values 
in the same order. 


</para>





</section>
<section id="h31003">
<title>
<emphasis id="Behavior_is_different_but_appropriate_" effect="bold">

Behavior is different but 
appropriate 

</emphasis>


</title>




<para id="p1018">
The behavior of the 

<emphasis id="strong1007" effect="bold">
add

</emphasis>
 method is appropriate, and different in each 
of the two cases, with the final contents of each collection being determined by 
the respective behavior of the 

<emphasis id="strong1008" effect="bold">
add

</emphasis>
 method for that type of collection.


</para>





</section>
</section>
<section id="h21002">
<title>
<emphasis id="The_fillIt_method_" effect="bold">

The fillIt method 

</emphasis>


</title>




<para id="p1019">
The code in the fragment shown in 

<link id="a1043" target-id="Listing_2">

Listing 2

</link>

 defines 
a 

<emphasis id="em1007" effect="italics">
static

</emphasis>
 method named 


<emphasis id="strong1009" effect="bold">
fillIt

</emphasis>
 of the class named 

<emphasis id="strong1010" effect="bold">
Populator

</emphasis>
. This is a class of my own 
design intended solely to illustrate the primary point of this program. 

</para>





<para id="p1020">
The method named 

<emphasis id="strong1011" effect="bold">
fillIt

</emphasis>
 receives an incoming reference to a collection 
object as type 

<emphasis id="strong1012" effect="bold">
Collection

</emphasis>
. The method calls the 

<emphasis id="strong1013" effect="bold">
add

</emphasis>
 
method on the incoming reference five times in succession to add five elements 
to the collection. These elements are added without regard for the actual 
type or underlying implementation of the collection. 

<emphasis id="em1008" effect="italics">
(As written, the 

<emphasis id="strong1014" effect="bold">

fillIt

</emphasis>
 method has no way of knowing the underlying implementation.)

</emphasis>
</para>




	


	

<table id="table1001" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. The Populator 
				class.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">

				

<code id="pre1001" display="block">class Populator{
  public static void fillIt(Collection ref){
    ref.add(new Integer(4));
    ref.add(new Integer(4));
    ref.add(new Integer(3));
    ref.add(new Integer(2));
    ref.add(new Integer(1));
  }//end fillIt()
}//end class populator
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>






<para id="p1021">
The 

<emphasis id="strong1015" effect="bold">
fillIt

</emphasis>
 method will be used to populate two collections of 
different types with the same data values in the same order. 

</para>





</section>
<section id="h21003">
<title>
<emphasis id="Create_and_populate_a_TreeSet_object_" effect="bold">

Create and populate a 
TreeSet object 

</emphasis>


</title>




<para id="p1022">
Consider the code fragment shown in 

<link id="a1044" target-id="Listing_3">

Listing 3

</link>

. 

</para>



	


	

<table id="table1002" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. Create and populate a TreeSet object.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">

				

<code id="pre1002" display="block">    Collection ref = new TreeSet();
    Populator.fillIt(ref);
    Iterator iter = ref.iterator();
    while(iter.hasNext()){
      System.out.print(iter.next());
    }//end while loop
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>






<para id="p1023">
The code in 

<link id="a1045" target-id="Listing_3">

Listing 3

</link>

 instantiates an object of type 


<emphasis id="strong1016" effect="bold">
TreeSet

</emphasis>
, and 
passes that object's reference to the 

<emphasis id="strong1017" effect="bold">
fillIt

</emphasis>
 method as type 

<emphasis id="strong1018" effect="bold">
Collection

</emphasis>
. As described above, the 


<emphasis id="strong1019" effect="bold">
fillIt

</emphasis>
 method adds five 
elements to the collection, in random order with two of the elements being 
duplicates.

</para>





<quote id="blockquote1000" display="block">
<emphasis id="em1009" effect="italics">
"Note that this program does not use the syntax for Generics. 
Therefore, if you copy and compile this program, you will probably see a warning 
regarding unchecked or unsafe operations"

</emphasis>
</quote>




<section id="h31004">
<title>
<emphasis id="Display_the_collections_contents_" effect="bold">

Display the collection's 
contents 

</emphasis>


</title>




<para id="p1024">
Then the code in 

<link id="a1046" target-id="Listing_3">

Listing 3

</link>

 gets an 

<emphasis id="strong1020" effect="bold">
Iterator

</emphasis>
 object on the collection 
and uses the iterator to display the contents of the collection. 

</para>





</section>
<section id="h31005">
<title>
<emphasis id="TreeSet_object_is_type_SortedSet_" effect="bold">

TreeSet object is type SortedSet


</emphasis>


</title>




<para id="p1025">
The 

<emphasis id="strong1021" effect="bold">
TreeSet

</emphasis>
 class implements one of the core collection interfaces 
named 

<emphasis id="strong1022" effect="bold">
SortedSet

</emphasis>
.

<emphasis id="strong1023" effect="bold">
 SortedSet

</emphasis>
 extends 

<emphasis id="em1010" effect="italics">
(is a


<link id="a1047" target-id="parent_child_relationships">

child

</link>

 of)

</emphasis>
 

<emphasis id="strong1024" effect="bold">
Set

</emphasis>
<emphasis id="em1011" effect="italics">
.

</emphasis>
 
One of the characteristics of a 

<emphasis id="strong1025" effect="bold">
Set

</emphasis>
 object is that it doesn't allow 
duplicate elements. One of the characteristics of a 

<emphasis id="strong1026" effect="bold">
SortedSet

</emphasis>
 
object is that, by default, it maintains its elements in ascending natural order. Since the 

<emphasis id="strong1027" effect="bold">
TreeSet

</emphasis>
 class implements both of these interfaces, it is both a 


<emphasis id="strong1028" effect="bold">
Set

</emphasis>
 
and a 

<emphasis id="strong1029" effect="bold">
SortedSet

</emphasis>
, and exhibits the characteristics of both interfaces. 

</para>





<para id="p1026">
Because the underlying structure of the 

<emphasis id="strong1030" effect="bold">
TreeSet

</emphasis>
 class doesn't allow 
duplicates, and the underlying structure maintains its elements in ascending 
order, the code in 

<link id="a1048" target-id="Listing_3">

Listing 3

</link>

 produces the following text on the screen: 


</para>





<para id="p1027">
<emphasis id="strong1031" effect="bold">
1234

</emphasis>
 

</para>





</section>
</section>
<section id="h21004">
<title>
<emphasis id="Create_and_populate_an_ArrayList_object" effect="bold">

Create and populate an 
ArrayList object

</emphasis>

 

</title>




<para id="p1028">
Now consider the code fragment shown in 

<link id="a1049" target-id="Listing_4">

Listing 4

</link>

. 


</para>




	


	

<table id="table1003" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. Create and populate an ArrayList object.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">

				

<code id="pre1003" display="block">    ref = new ArrayList();
    Populator.fillIt(ref);
    iter = ref.iterator();
    while(iter.hasNext()){
      System.out.print(iter.next());
    }//end while loop
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>






<para id="p1029">
The code in 

<link id="a1050" target-id="Listing_4">

Listing 4

</link>

 instantiates a new collection of type 


<emphasis id="strong1032" effect="bold">
ArrayList

</emphasis>
, 
and passes that object's reference to the same 

<emphasis id="strong1033" effect="bold">
fillIt

</emphasis>
 method, once again as 
type 

<emphasis id="strong1034" effect="bold">
Collection

</emphasis>
. 

</para>





<para id="p1030">
The code in the 

<emphasis id="strong1035" effect="bold">
fillIt

</emphasis>
 method adds five elements having the same 
values as before to the collection and adds them in the same order as before. The added elements are references to


<emphasis id="strong1036" effect="bold">
Integer

</emphasis>
 objects encapsulating the same values as were earlier added to 
the 

<emphasis id="strong1037" effect="bold">
TreeSet

</emphasis>
 collection. Although they are physically different 
objects, the result is that essentially the same data is added to both 
collections. 

</para>





<section id="h31006">
<title>
<emphasis id="Display_the_collections_contents" effect="bold">

Display the collection's contents

</emphasis>




</title>




<para id="p1031">
Then, as before, the code in 

<link id="a1051" target-id="Listing_4">

Listing 4

</link>

 gets an iterator and uses it to access 
and display the contents of the 

<emphasis id="strong1038" effect="bold">
ArrayList

</emphasis>
 collection. 

</para>





<para id="p1032">
The 

<emphasis id="strong1039" effect="bold">
ArrayList

</emphasis>
 class implements the 

<emphasis id="strong1040" effect="bold">
List

</emphasis>
 interface, which does 
not prohibit duplicate elements, and does not maintain its elements in sorted 
order. Therefore, in this case, the following text was displayed: 

</para>





<para id="p1033">
<emphasis id="strong1041" effect="bold">
44321

</emphasis>
 

</para>





<para id="p1034">
All five element values are displayed, including the duplicate, in the order 
in which they were added to the list. 

</para>





</section>
</section>
<section id="h21005">
<title>
<emphasis id="The_important_point_" effect="bold">

The important point 

</emphasis>


</title>




<para id="p1035">
The important point is that although the 

<emphasis id="strong1042" effect="bold">
fillIt

</emphasis>
 method calls the same 
method name (

<emphasis id="strong1043" effect="bold">
add

</emphasis>
) on each of the collection objects, the behavior of 
that method is different in each case. In both cases, the behavior is 
appropriate for the underlying data structure. Furthermore, the underlying 
data structure isn't even known to the 

<emphasis id="strong1044" effect="bold">
fillIt

</emphasis>
 method. 

</para>





<section id="h31007">
<title>
<emphasis id="No_duplicate_elements_in_ascending_order_" effect="bold">

No duplicate elements in 
ascending order 

</emphasis>


</title>




<para id="p1036">
In the first case, where the underlying data structure was a 

<emphasis id="strong1045" effect="bold">
TreeSet

</emphasis>
 
object 

<emphasis id="em1012" effect="italics">
(type 

<emphasis id="strong1046" effect="bold">
SortedSet

</emphasis>
),

</emphasis>
 the duplicate element was eliminated, and the 
elements were stored so as to be accessible in ascending order. 

</para>





</section>
<section id="h31008">
<title>
<emphasis id="Duplicates_allowed_with_no_sorting_" effect="bold">

Duplicates allowed with no 
sorting 

</emphasis>


</title>




<para id="p1037">
In the second case, where the underlying data structure was an 

<emphasis id="strong1047" effect="bold">
ArrayList

</emphasis>
 
object 

<emphasis id="em1013" effect="italics">
(type 

<emphasis id="strong1048" effect="bold">
List

</emphasis>
),

</emphasis>
 all five elements, including the duplicate element 
were stored in the collection. Furthermore, they were stored and later 
retrieved in the same order in which they were added. 

</para>





</section>
</section>
<section id="h21006">
<title>
<emphasis id="Structure_of_core_the_interfaces" effect="bold">

Structure of the core interfaces

</emphasis>




</title>




<para id="p1038">
The 

<emphasis id="em1014" effect="italics">
core collection interfaces

</emphasis>
 in the Java Collections 
Framework do not all extend from a common root interface. 

</para>





<para id="p1039">
Rather, the inheritance structure of the core interfaces is shown below. 
Indentation is used to indicate the 

<emphasis id="parent_child_relationships" effect="bold">

parent-child relationships

</emphasis>

 
among the interfaces. 

</para>





<list id="ul1011" list-type="bulleted">

	

<item id="li1046">
Collection 	
	

<list id="ul1012" list-type="bulleted">

		

<item id="li1047">
Set
		

<list id="ul1013" list-type="bulleted">

			

<item id="li1048">
SortedSet

</item>


		

</list>


		

</item>


		

<item id="li1049">
List

</item>


		

<item id="li1050">
Queue

</item>


		

<item id="li1051">
Deque

</item>


	

</list>


	

</item>


	

<item id="li1052">
Map
	

<list id="ul1014" list-type="bulleted">

		

<item id="li1053">
SortedMap

</item>


	

</list>


	

</item>




</list>




</section>
<section id="h21007">
<title>
<emphasis id="A_Map_is_not_a_true_Collection_" effect="bold">

A Map is not a true Collection 

</emphasis>




</title>




<para id="p1040">
As you can see, that there is no common root interface. Rather, there 
are two distinct trees, one rooted by 

<emphasis id="strong1049" effect="bold">
Collection

</emphasis>
 and the other rooted by


<emphasis id="strong1050" effect="bold">
Map

</emphasis>
. According to The Java Tutorial from Oracle, 

<emphasis id="em1015" effect="italics">
"a Map is not a 
true Collection."

</emphasis>
  I will have more to say about this in a future module.


</para>





</section>
<section id="h21008">
<title>
<emphasis id="Some_operations_are_optional_" effect="bold">

Some operations are optional 

</emphasis>




</title>




<para id="p1041">
Every class that implements an interface in the tree rooted in 

<emphasis id="strong1051" effect="bold">
Collection

</emphasis>
 
is not required to support all of the methods 

<emphasis id="em1016" effect="italics">
(operations)

</emphasis>
 
declared in the 

<emphasis id="strong1052" effect="bold">
Collection

</emphasis>
 interface. 

</para>





<para id="p1042">
Rather, some of the methods in the 

<emphasis id="strong1053" effect="bold">
Collection

</emphasis>
 
interface are designated as "optional operation" in the documentation. 

<emphasis id="em1017" effect="italics">
(See the list of optional 
methods for the Collection interface below.)

</emphasis>
 

</para>





<para id="p1043">
According to the contract for the Collections Framework, if a given 
implementation doesn't support a specific method, it must throw an


<emphasis id="strong1054" effect="bold">
UnsupportedOperationException

</emphasis>
. The author of the implementation is 
responsible for providing documentation that identifies the optional operations 
that the implementation does and does not support. 

</para>





<section id="h31009">
<title>
<emphasis id="Support_for_optional_operations_" effect="bold">

Support for optional operations


</emphasis>


</title>




<para id="p1044">
This should not be an issue unless you are either defining your own 
implementation, or using an implementation defined by someone other than the 
programmers at Oracle. All of the general-purpose 
implementations from Oracle appear to support all of the optional operations. 

</para>





</section>
<section id="h31010">
<title>
<emphasis id="Optional_Collection_operations" effect="bold">

Optional Collection operations

</emphasis>




</title>




<para id="p1045">
The following list shows the optional operations in the 

<emphasis id="strong1055" effect="bold">
Collection

</emphasis>
 
interface. Each of these methods has the ability to modify 
the contents of the collection. 

</para>





<list id="ul1015" list-type="bulleted">

	

<item id="li1054">
add()

</item>


	

<item id="li1055">
addAll()

</item>


	

<item id="li1056">
clear()

</item>


	

<item id="li1057">
remove()

</item>


	

<item id="li1058">
removeAll()

</item>


	

<item id="li1059">
retainAll()

</item>




</list>




</section>
<section id="h31011">
<title>
<emphasis id="Optional_Map_operations" effect="bold">

Optional Map operations

</emphasis>

 

</title>




<para id="p1046">
The following list shows the optional operations in the 

<emphasis id="strong1056" effect="bold">
Map

</emphasis>
 
interface. Each of these methods also has the ability to modify the contents of 
the map. 

</para>





<list id="ul1016" list-type="bulleted">

	

<item id="li1060">
clear()

</item>


	

<item id="li1061">
put()

</item>


	

<item id="li1062">
putAll()

</item>


	

<item id="li1063">
remove()

</item>




</list>




</section>
<section id="h31012">
<title>
<emphasis id="Many_methods_are_not_optional_" effect="bold">

Many methods are not optional 

</emphasis>




</title>




<para id="p1047">
In both cases, the interface declares numerous other methods that are not 
optional. Generally, the non-optional methods don't have the ability to 
modify the collection. For example, the 

<emphasis id="strong1057" effect="bold">
get

</emphasis>
 method of the 

<emphasis id="strong1058" effect="bold">
Map

</emphasis>
 
interface is not optional. Although the 

<emphasis id="strong1059" effect="bold">
get

</emphasis>
 method receives an 
incoming 

<emphasis id="em1018" effect="italics">
key

</emphasis>
 and returns the 

<emphasis id="em1019" effect="italics">
value

</emphasis>
 to which the key maps, the 
method doesn't have the ability to modify the contents of the collection. 


</para>





</section>
</section>
</section>
<section id="h11005">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>




<para id="p1048">
I encourage you to copy the code from 

<link id="a1052" target-id="Listing_1">

Listing 1

</link>

 and paste it into your 
Java editor. Then 
compile and execute it.

</para>





<para id="p1049">
Run the program 
and observe the results. Experiment with the code. Make changes, run the program again, and observe the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>





</section>
<section id="h11006">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1050">
A collections framework contains at least the following items: 

</para>





<list id="ul1017" list-type="bulleted">

	

<item id="li1064">
interfaces

</item>


	

<item id="li1065">
implementations

</item>


	

<item id="li1066">
algorithms

</item>




</list>




<para id="p1051">
The 

<emphasis id="em1020" effect="italics">
Java Collections Framework

</emphasis>
 defines eight core interfaces, in two distinct 
trees. One tree is rooted in 

<emphasis id="strong1060" effect="bold">
Collection

</emphasis>
 and the other is rooted in


<emphasis id="strong1061" effect="bold">
Map

</emphasis>
. 

</para>





<para id="p1052">
The basic purpose of the core interfaces is to make it possible for 
collections to be manipulated without regard for how they are implemented, so 
long as the implementation satisfies the contracts of the interfaces. 

</para>





<para id="p1053">
When the same method name 

<emphasis id="em1021" effect="italics">
(and signature)

</emphasis>
 is called on references to collections of different 
types, the behavior of the method is likely to be different for each collection. 
However, in each case, that behavior will be appropriate for the type of 
collection object on which the method is called. This is polymorphic 
behavior. 

</para>





<para id="p1054">
Six of the methods declared in the 

<emphasis id="strong1062" effect="bold">
Collection 

</emphasis>
interface are optional 
insofar as being supported by implementing classes is concerned. The optional methods 
all have the ability to modify the contents of the collection. Those 
implementing classes that don't support an optional method must throw an 

<emphasis id="strong1063" effect="bold">
UnsupportedOperationException

</emphasis>
 if that method is called on an object of the 
class. Similarly four of the methods declared in the 

<emphasis id="strong1064" effect="bold">
Map

</emphasis>
 
interface are optional.

</para>





<para id="p1055">
Many methods declared in the 

<emphasis id="strong1065" effect="bold">
Collection

</emphasis>
 interface are not optional. 
Generally, the non-optional methods don't have the ability to modify the 
collection. 

</para>





</section>
<section id="h11007">
<title>
<emphasis id="Whats_next" effect="bold">

What's next?

</emphasis>


</title>




<para id="p1056">
In the next module, I will discuss and illustrate some of the details of the 
core interfaces and the general-purpose implementations in the Java Collections 
Framework. For example, I will discuss the difference between a 

<emphasis id="em1022" effect="italics">
set

</emphasis>
 and a 


<emphasis id="em1023" effect="italics">
list

</emphasis>
. 
I will also discuss the difference between 

<emphasis id="em1024" effect="italics">
ordered

</emphasis>
 and 

<emphasis id="em1025" effect="italics">
sorted

</emphasis>
. I 
will discuss the fact that additional stipulations are applied as you progress 
down the framework interface hierarchy. In order to help you learn and retain 
the material, I will provide a couple of short quizzes.

</para>





</section>
<section id="h11008">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>




<para id="p1057">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1066" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1018" list-type="bulleted">

					

<item id="li1067">
Module name: Java4050: Core Collection Interfaces

</item>


					

<item id="li1068">
File: Java4050.htm


</item>


					

<item id="li1069">
Published: 04/18/13

</item>


					
				

</list>


				

</note>

			


		









	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1067" effect="bold">
Disclaimers:

</emphasis>
<para id="p1058">
<emphasis id="strong1068" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>



				

<para id="p1059">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>



				

<para id="p1060">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>



				

<para id="p1061">
<emphasis id="strong1069" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>



				

</note>

			


		









<para id="p1062">
-end- 

</para>







</section>
</content>




</document>