<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Java3130 Java OOP A Pixel Color Editor</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m44926</md:content-id>
  <md:title>Java3130 Java OOP A Pixel Color Editor</md:title>
  <md:abstract>Learn how to write an editor program that you can use to modify the colors in an image on a pixel-by-pixel basis.</md:abstract>
  <md:uuid>cd3959c0-e2aa-44de-825a-f63f3635cc54</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1002">
<link id="a1002" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1003">
<link id="a1003" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1004">
<link id="a1004" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1005">
<link id="a1005" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


</item>


	

<item id="li1006">
<link id="a1006" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1007">
<link id="a1007" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1008">
<link id="a1008" target-id="Miscellaneous">

Miscellaneous

</link>


</item>


	

<item id="li1009">
<link id="a1009" target-id="Complete_program_listing">

Complete program listing

</link>


</item>




</list>


	

	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	

	

<para id="p1000">
This module is one of a series of modules designed to teach you about Object-Oriented Programming (OOP) using Java. 

</para>




<para id="p1001">
The program described in this module requires the use of the Guzdial-Ericson 
multimedia class library. You will find download, installation, and usage 
instructions for the library at 

<link id="a1010" url="http://cnx.org/content/m44148/latest/">

Java OOP: The Guzdial-Ericson Multimedia Class Library

</link>

.

</para>


	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1002">
I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.

</para>


	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1003" list-type="bulleted">

		

<item id="li1010">
<link id="a1011" target-id="Figure_1">

Figure 1

</link>

. Program output at startup. 

</item>


		

<item id="li1011">
<link id="a1012" target-id="Figure_2">

Figure 2

</link>

. Program output after zooming the image.

</item>


		

<item id="li1012">
<link id="a1013" target-id="Figure_3">

Figure 3

</link>

. Program output after changing the pixel color to yellow.

</item>


	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1004" list-type="bulleted">

		

<item id="li1013">
<link id="a1014" target-id="Listing_1">

Listing 1

</link>

. Code for methods that were added.

</item>


		

<item id="li1014">
<link id="a1015" target-id="Listing_2">

Listing 2

</link>

. Modified setDefaultCloseOperation method. 

</item>


		

<item id="li1015">
<link id="a1016" target-id="Listing_3">

Listing 3

</link>

. Beginning of ActionListener registered on update button. 

</item>


		

<item id="li1016">
<link id="a1017" target-id="Listing_4">

Listing 4

</link>

. Convert zoom factor to type String.

</item>


		

<item id="li1017">
<link id="a1018" target-id="Listing_5">

Listing 5

</link>

. Set pixel color in original image.

</item>


		

<item id="li1018">
<link id="a1019" target-id="Listing_6">

Listing 6

</link>

. Create and populate a new PictureExplorer object.

</item>


		

<item id="li1019">
<link id="a1020" target-id="Listing_7">

Listing 7

</link>

. Call the mousePressed method.

</item>


		

<item id="li1020">
<link id="a1021" target-id="Listing_8">

Listing 8

</link>

. Set the zoom state.

</item>


		

<item id="li1021">
<link id="a1022" target-id="Listing_9">

Listing 9

</link>

. Complete listing of Prob15. 

</item>


		

<item id="li1022">
<link id="a1023" target-id="Listing_10">

Listing 10

</link>

. Complete listing of modified PictureExplorer class. 

</item>


	

</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>


	

<para id="p1003">
In this module, you will learn how to write an editor program that you 
	can use to modify the colors in an image on a pixel-by-pixel basis.

</para>




<para id="p1004">
Such a program could be useful, for example, for manually correcting "red 
eye" problems in digital images.

</para>




<para id="p1005">
<emphasis id="strong1000" effect="bold">
Program output at startup

</emphasis>
</para>




<para id="p1006">
<link id="a1024" target-id="Figure_1">

Figure 1

</link>

 shows the program output at 
startup.

</para>




<para id="p1007">
The output consists of 

</para>




<list id="ul1005" list-type="bulleted">

	

<item id="li1023">
an Ericson 

<emphasis id="strong1001" effect="bold">
PictureExplorer

</emphasis>
 object displaying an image 
	of a penguin, and

</item>


	

<item id="li1024">
a color manipulation GUI similar to those discussed in earlier modules.

</item>




</list>


	

<para id="p1008">
</para>





<para id="p1009">
<emphasis id="strong1002" effect="bold">
<emphasis id="Figure_1" effect="bold">

Figure 1

</emphasis>

 - Program output at startup.

</emphasis>
</para>




<para id="p1010">
<media id="media1000" alt="Missing image." display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/prob015a.jpg" width="379" height="501"/>
</media>


</para>


	



<para id="p1011">
<emphasis id="strong1003" effect="bold">
Program output after zooming the image

</emphasis>
</para>




<para id="p1012">
<link id="a1025" target-id="Figure_2">

Figure 2

</link>

 shows the program output after placing the 


<emphasis id="strong1004" effect="bold">
PictureExplorer

</emphasis>
 cursor on the penguin's nose, and zooming the 

<emphasis id="strong1005" effect="bold">
PictureExplorer

</emphasis>
 image by 500%

</para>




<para id="p1013">
If you look carefully, you should be able to see the crosshair cursor on the 
penguin's nose.

</para>





<para id="p1014">
<emphasis id="strong1006" effect="bold">
<emphasis id="Figure_2" effect="bold">

Figure 2

</emphasis>

 - Program output after zooming the image.

</emphasis>
</para>




<para id="p1015">
<media id="media1001" alt="Missing image." display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/prob015b.jpg" width="379" height="504"/>
</media>


</para>


	



<para id="p1016">
<emphasis id="strong1007" effect="bold">
Program output after changing the pixel color to yellow

</emphasis>
</para>




<para id="p1017">
<link id="a1026" target-id="Figure_3">

Figure 3

</link>

 shows the result of selecting the color yellow with the GUI, and clicking the button labeled 


<emphasis id="strong1008" effect="bold">
Update Pixel Color

</emphasis>
</para>




<para id="p1018">
If you look carefully, you should see that the pixel next to the crosshair 
cursor on the penguin's nose has changed from black to yellow.

</para>





<para id="p1019">
<emphasis id="strong1009" effect="bold">
<emphasis id="Figure_3" effect="bold">

Figure 3

</emphasis>

 - Program output after changing the pixel color to yellow.

</emphasis>
</para>




<para id="p1020">
<media id="media1002" alt="Missing image." display="block">
<image id="img1002" mime-type="image/jpeg" src="../../media/prob015c.jpg" width="381" height="504"/>
</media>


</para>


	

	

	

</section>
<section id="h11003">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	

	

<para id="p1021">
This program requires modifications to Ericson's 

<emphasis id="strong1010" effect="bold">
PictureExplorer

</emphasis>
 
	class. I will deal with that issue first.

</para>




<para id="p1022">
A complete listing of the modified version of the 

<emphasis id="strong1011" effect="bold">
PictureExplorer

</emphasis>
 
class is shown in 

<link id="a1027" target-id="Listing_10">

Listing 10

</link>

.

</para>




<para id="p1023">
<emphasis id="strong1012" effect="bold">
Changes to Ericson's PictureExplorer class

</emphasis>
</para>




<para id="p1024">
The 

<emphasis id="strong1013" effect="bold">
PictureExplorer

</emphasis>
 class was modified to add 

<emphasis id="em1000" effect="italics">
getter

</emphasis>
 
methods to cause the following values to be accessible from outside the object:


</para>




<list id="ul1006" list-type="bulleted">

	

<item id="li1025">
int xIndex 

</item>


	

<item id="li1026">
int yIndex 

</item>


	

<item id="li1027">
double zoomFactor 

</item>


	

<item id="li1028">
JFrame pictureFrame 

</item>




</list>




<para id="p1025">
Also the call to the 

<emphasis id="strong1014" effect="bold">
setDefaultCloseOperation

</emphasis>
 method was 
disabled.

</para>




<para id="p1026">
<emphasis id="strong1015" effect="bold">
Code for methods that were added

</emphasis>
</para>




<para id="p1027">
<link id="a1028" target-id="Listing_1">

Listing 1

</link>

 shows the code for the 
methods that were added to the 

<emphasis id="strong1016" effect="bold">
PictureExplorer

</emphasis>
 class.

</para>


	

<table id="table1000" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

 - Code for methods that were added.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">

				

<code id="pre1000" display="block">  //Method to get the xIndex value.
  public int getXIndex(){
    return xIndex;
  }//end getXIndex

  //Method to get the yIndex value.
  public int getYIndex(){
    return yIndex;
  }//end getYIndex

  //Method to get the zoomFactor value.
  public double getZoomFactor(){
    return zoomFactor;
  }//end getZoomFactor

  //Method to get a reference to the frame
  public JFrame getFrame(){
    return pictureFrame;
  }//end getFrame()
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1028">
<emphasis id="strong1017" effect="bold">
Modified setDefaultCloseOperation method

</emphasis>
</para>




<para id="p1029">
<link id="a1029" target-id="Listing_2">

Listing 2

</link>

 shows the modified version of 
the 

<emphasis id="strong1018" effect="bold">
setDefaultCloseOperation

</emphasis>
 method.

</para>




<para id="p1030">
Note the parameter that is passed to the method when it is called.

</para>


	

<table id="table1001" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

 - Modified setDefaultCloseOperation method. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">

				

<code id="pre1001" display="block">explorerFrame.setDefaultCloseOperation(
               WindowConstants.DO_NOTHING_ON_CLOSE);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1031">
<emphasis id="strong1019" effect="bold">
Similar to previous code

</emphasis>
</para>




<para id="p1032">
Much of the code in this program is similar to code that I explained in 
earlier modules, and I won't repeat those explanations.

</para>




<para id="p1033">
I will skip down to the event handler registered on the button labeled


<emphasis id="strong1020" effect="bold">
Update Pixel Color

</emphasis>
 in 

<link id="a1030" target-id="Figure_1">

Figure 1

</link>

. 
That code begins in 

<link id="a1031" target-id="Listing_3">

Listing 3

</link>

.

</para>


	

<table id="table1002" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

 - Beginning of ActionListener registered on update button. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">

				

<code id="pre1002" display="block">    updateButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){

          //Get properties of PictureExplorer object.
          xIndex = explorer.getXIndex();
          yIndex = explorer.getYIndex();
          zoomFactor = explorer.getZoomFactor();
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1034">
<emphasis id="strong1021" effect="bold">
Important to preserve properties

</emphasis>
</para>




<para id="p1035">
The only thing that changes when you click the 

<emphasis id="strong1022" effect="bold">
update

</emphasis>
 button 
is the color of the pixel at the crosshair cursor.

</para>




<para id="p1036">
Therefore, the program must preserve the state of the explorer object 
including such items as the zoom factor and the location of crosshair cursor.

</para>




<para id="p1037">
<link id="a1032" target-id="Listing_3">

Listing 3

</link>

 gets and saves the property 
values that determine the state of the explorer object.

</para>




<para id="p1038">
<emphasis id="strong1023" effect="bold">
Convert zoom factor to String

</emphasis>
</para>




<para id="p1039">
The 

<emphasis id="strong1024" effect="bold">
getZoomFactor

</emphasis>
 method returns the zoom factor as type


<emphasis id="strong1025" effect="bold">
double

</emphasis>
. However, we need the zoom factor as type 

<emphasis id="strong1026" effect="bold">
String

</emphasis>
. 
The code in 

<link id="a1033" target-id="Listing_4">

Listing 4

</link>

 converts the zoom 
factor to type 

<emphasis id="strong1027" effect="bold">
String

</emphasis>
.

</para>


	

<table id="table1003" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

 - Convert zoom factor to type String.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">

				

<code id="pre1003" display="block">          //Save zoom factor as a string.
          String zoomString = "100%";
          if(zoomFactor == 0.25){
            zoomString = "25%";
          }else if(zoomFactor == 0.50){
            zoomString = "50%";
          }else if(zoomFactor == 0.75){
            zoomString = "75%";
          }else if(zoomFactor == 1.0){
            zoomString = "100%";
          }else if(zoomFactor == 1.5){
            zoomString = "150%";
          }else if(zoomFactor == 2.0){
            zoomString = "200%";
          }else if(zoomFactor == 5.0){
            zoomString = "500%";
          }else{
            zoomString = "100%";//in case no match
          }//end else
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1040">
<emphasis id="strong1028" effect="bold">
Set pixel color in original image

</emphasis>
</para>




<para id="p1041">
The code in 

<link id="a1034" target-id="Listing_5">

Listing 5

</link>

 

</para>




<list id="ul1007" list-type="bulleted">

	

<item id="li1029">
creates a new 

<emphasis id="strong1029" effect="bold">
Color

</emphasis>
 object based on the values in the 
	text fields of 

<link id="a1035" target-id="Figure_3">

Figure 3

</link>

, and

</item>


	

<item id="li1030">
changes the color of the corresponding pixel in the original image to 
	the new color.

</item>




</list>




<para id="p1042">
At this point, the color of the pixel in the original image has been 
modified.

</para>


	

<table id="table1004" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

 - Set pixel color in original image.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">

				

<code id="pre1004" display="block">          Color newColor = new Color(
                                 redInt,greenInt,blueInt);
          pix.getPixel(xIndex,yIndex).setColor(newColor);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1043">
<emphasis id="strong1030" effect="bold">
Create and populate a new PictureExplorer object

</emphasis>
</para>




<para id="p1044">
<link id="a1036" target-id="Listing_6">

Listing 6

</link>

 begins by disposing of the 
original 

<emphasis id="strong1031" effect="bold">
PictureExplorer

</emphasis>
 object. Then


<link id="a1037" target-id="Listing_6">

Listing 6

</link>

 creates a new 

<emphasis id="strong1032" effect="bold">

PictureExplorer

</emphasis>
 object containing the modified image.

</para>




<para id="p1045">
Finally 

<link id="a1038" target-id="Listing_6">

Listing 6

</link>

 calls the 

<emphasis id="strong1033" effect="bold">

setDefaultCloseOperation

</emphasis>
 on the 

<emphasis id="strong1034" effect="bold">
JFrame

</emphasis>
 that houses the


<emphasis id="strong1035" effect="bold">
PictureExplorer

</emphasis>
 object disabling the X-button in the 
upper-right corner.

</para>


	

<table id="table1005" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

 - Create and populate a new PictureExplorer object.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">

				

<code id="pre1005" display="block">          //Dispose of the existing explorer and create a
          // new one.
          explorerFrame.dispose();

          explorer = new PictureExplorer(pix);
          
          //Get reference to the new frame
          explorerFrame = explorer.getFrame();
          explorerFrame.setDefaultCloseOperation(
                     WindowConstants.DO_NOTHING_ON_CLOSE);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1046">
<emphasis id="strong1036" effect="bold">
Set the state of the PictureExplorer object

</emphasis>
</para>




<para id="p1047">
You will probably need to study the event handling code in the 

<emphasis id="strong1037" effect="bold">

PictureExplorer

</emphasis>
 class to fully understand the remaining code in this 
discussion.

</para>




<para id="p1048">
When you click the image in the 

<emphasis id="strong1038" effect="bold">
PictureExplorer

</emphasis>
 object, a 


<emphasis id="strong1039" effect="bold">
MouseListener

</emphasis>
 object registered on the 

<emphasis id="strong1040" effect="bold">
PictureExplorer

</emphasis>
 object calls the 


<emphasis id="strong1041" effect="bold">
mousePressed

</emphasis>
 method belonging to that object

</para>




<para id="p1049">
<emphasis id="strong1042" effect="bold">
Simulate a physical click

</emphasis>
</para>




<para id="p1050">
We can simulate a physical click on that image by calling the same method 
from outside the 

<emphasis id="strong1043" effect="bold">
PictureExplorer

</emphasis>
 object.

</para>




<para id="p1051">
<emphasis id="strong1044" effect="bold">
Call the mousePressed method

</emphasis>
</para>




<para id="p1052">
<link id="a1039" target-id="Listing_7">

Listing 7

</link>

 calls the 

<emphasis id="strong1045" effect="bold">

mousePressed

</emphasis>
 method on the 

<emphasis id="strong1046" effect="bold">
PictureExplorer

</emphasis>
 object 
passing the crosshair coordinates as parameters. Other parameters are also 
passed to satisfy the requirements of the 

<emphasis id="strong1047" effect="bold">
mousePressed

</emphasis>
 method.

</para>




<para id="p1053">
<emphasis id="em1001" effect="italics">
(I will leave it as an exercise for the student to investigate those 
other parameters.)

</emphasis>
</para>


	

<table id="table1006" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

 - Call the mousePressed method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">

				

<code id="pre1006" display="block">          //Now set the state of the new explorer.
          
          //Simulate a mouse pressed event in the picture
          // to set the cursor and the text in the
          // coordinate fields.
          explorer.mousePressed(new MouseEvent(
                           new JButton("dummy component"),
                           MouseEvent.MOUSE_PRESSED,
                           (long)0,
                           0,
                           xIndex,
                           yIndex,
                           0,
                           false));
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1054">
<emphasis id="strong1048" effect="bold">
PictureExplorer object handles crosshair cursor

</emphasis>
</para>




<para id="p1055">
The code in Ericson's 

<emphasis id="strong1049" effect="bold">
mousePressed

</emphasis>
 method takes care of all 
the requirements that result from setting the location of the crosshair cursor, 
such as setting the coordinate values in the 

<emphasis id="strong1050" effect="bold">
PictureExplorer

</emphasis>
 
object's text fields shown in


<link id="a1040" target-id="Figure_3">

Figure 3

</link>

.

</para>




<para id="p1056">
<emphasis id="strong1051" effect="bold">
Set the zoom state

</emphasis>
</para>




<para id="p1057">
Manually selecting a zoom level from the 

<emphasis id="strong1052" effect="bold">
Zoom

</emphasis>
 menu in the


<emphasis id="strong1053" effect="bold">
PictureExplorer

</emphasis>
 object causes the 

<emphasis id="strong1054" effect="bold">
actionPerformed

</emphasis>
 
method belonging to an 

<emphasis id="strong1055" effect="bold">
ActionListener

</emphasis>
 object registered on the


<emphasis id="strong1056" effect="bold">
PictureExplorer

</emphasis>
 object to be executed.

</para>




<para id="p1058">
As before, we can simulate the manual selection of a 

<emphasis id="strong1057" effect="bold">
Zoom

</emphasis>
 
menu value by calling that 

<emphasis id="strong1058" effect="bold">
actionPerformed

</emphasis>
 method from outside 
the object.

</para>




<para id="p1059">
<emphasis id="strong1059" effect="bold">
Set the zoom state

</emphasis>
</para>




<para id="p1060">
<link id="a1041" target-id="Listing_8">

Listing 8

</link>

 calls Ericson's 

<emphasis id="strong1060" effect="bold">

actionPerformed

</emphasis>
 method, passing the 

<emphasis id="strong1061" effect="bold">
String

</emphasis>
 
representation of the zoom factor as a parameter.

</para>




<para id="p1061">
<emphasis id="em1002" effect="italics">
(I will leave it as an exercise for the student to investigate the other 
parameters.)

</emphasis>
</para>


	

<table id="table1007" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Listing_8" effect="bold">

Listing 8

</emphasis>

 - Set the zoom state.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">

				

<code id="pre1007" display="block">          //Simulate an action event on the zoom menu to
          // set the zoom.
          explorer.actionPerformed(new ActionEvent(
                             explorer,
                             ActionEvent.ACTION_PERFORMED,
                             zoomString));


        }//end actionPerformed
      }//end newActionListener
    );//end addActionListener
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1062">
<emphasis id="strong1062" effect="bold">
Conclusion of discussion

</emphasis>
</para>




<para id="p1063">
That concludes the discussion of the 

<emphasis id="strong1063" effect="bold">
ActionListener

</emphasis>
 object 
registered on the button labeled 

<emphasis id="strong1064" effect="bold">
Update Pixel Color

</emphasis>
 in


<link id="a1042" target-id="Figure_1">

Figure 1

</link>

.

</para>




<para id="p1064">
It also concludes the discussion of the program.

</para>






</section>
<section id="h11004">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>






<para id="p1065">
I encourage you to copy the code from 

<link id="a1043" target-id="Listing_9">

Listing 9

</link>

 and 


<link id="a1044" target-id="Listing_10">

Listing 10

</link>

 and download the image file named 


<link id="a1045" url="Prob15.jpg">

Prob15.jpg

</link>

. Compile the code and execute it. Experiment with the code, making changes, and observing the results of your changes. Make certain that you can explain why your changes behave as they do.

</para>


	

</section>
<section id="h11005">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1066">
In this module, you learned how to write an editor program that you can use to modify the colors in an image on a pixel-by-pixel basis.

</para>


	

</section>
<section id="h11006">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1067">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1065" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1008" list-type="bulleted">

					

<item id="li1031">
Module name: Java OOP: A Pixel Color Editor

</item>


					

<item id="li1032">
File: Java3130.htm


</item>


					

<item id="li1033">
Published: 09/11/12

</item>




<item id="li1034">
Revised: 02/06/16

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1066" effect="bold">
Disclaimers:

</emphasis>
<para id="p1068">
<emphasis id="strong1067" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1069">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1070">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1071">
<emphasis id="strong1068" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


				

</note>

			


		



	





</section>
<section id="h11007">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1072">
Complete listings of the source code discussed in this module are shown in


<link id="a1046" target-id="Listing_9">

Listing 9

</link>

 and


<link id="a1047" target-id="Listing_10">

Listing 10

</link>

 below. 

</para>





<para id="p1073">
<emphasis id="strong1069" effect="bold">
<emphasis id="Listing_9" effect="bold">

Listing 9

</emphasis>

 - Complete listing of Prob15.

</emphasis>
</para>



				

<code id="pre1008" display="block">/*File Prob15 Copyright 2012 R.G.Baldwin

The purpose of this program is demonstrate one way to
change the color of a pixel in a Picture object that is
encapsulated in a PictureExplorer object.

The pixel to be modified is selected by placing the
cursor in the PictureExplorer object.
*********************************************************/
import java.awt.event.MouseEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.WindowConstants;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;
import javax.swing.border.LineBorder;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Dimension;
import javax.swing.JColorChooser;

public class Prob15{
  public static void main(String[] args){
    new Prob15Runner();
  }//end main method
}//end class Prob15
//======================================================//

class Prob15Runner extends JFrame{
  private Prob15Runner jFrameObj = null;
  private PictureExplorer explorer = null;
  private Picture pix;
  private JFrame explorerFrame;
  
  private JPanel controlPanel = new JPanel();
  private JPanel colorPanel = new JPanel();
  private JPanel buttonPanel = new JPanel();
  private JPanel colorIndicatorPanel = new JPanel();

  private JTextField redField = new JTextField("000000");
  private JTextField greenField = 
                                 new JTextField("000000");
  private JTextField blueField = new JTextField("000000");
  
  private int redInt = 0;
  private int greenInt = 0;
  private int blueInt = 0;
  
  //Copies of properties of the PictureExplorer object
  private int xIndex = 0;
  private int yIndex = 0;
  private double zoomFactor = 0;

  private JButton chooseButton = 
                              new JButton("Choose Color");
  private JButton updateButton = 
                        new JButton("Update Pixel Color");
  //----------------------------------------------------//

  public Prob15Runner(){//constructor

    pix = new Picture("Prob15.jpg");
    pix.addMessage("Dick Baldwin",10,20);
    explorer = new PictureExplorer(pix);
    explorerFrame = explorer.getFrame();
    explorerFrame.setDefaultCloseOperation(
               WindowConstants.DO_NOTHING_ON_CLOSE);

    //Set the location for the control GUI
    // immediately below the PictureExplorer object,
    // and set its default close operation.
    setLocation(0,pix.getHeight() + 128);

    setDefaultCloseOperation(
                           WindowConstants.EXIT_ON_CLOSE);

    controlPanel.setLayout(new GridLayout(2,1));
    controlPanel.add(colorPanel);
    controlPanel.add(buttonPanel);

    colorPanel.setBackground(Color.GREEN);
    colorPanel.add(new JLabel("Red = "));
    colorPanel.add(redField);
    colorPanel.add(new JLabel(" Green = "));
    colorPanel.add(greenField);
    colorPanel.add(new JLabel(" Blue = "));
    colorPanel.add(blueField);
    colorPanel.add(colorIndicatorPanel);
    
    redField.setEditable(false);
    greenField.setEditable(false);
    blueField.setEditable(false);

    colorIndicatorPanel.setBorder(
                           new LineBorder(Color.black,1));
    colorIndicatorPanel.setPreferredSize(
                                    new Dimension(20,20));

    buttonPanel.setBackground(Color.BLUE);
    buttonPanel.add(chooseButton);
    buttonPanel.add(updateButton);
//    buttonPanel.add(darkerButton);
    
    //Color the swatch for the first time.
    paintColorSwatch();

    //Add the controlPanel to the content pane, adjust to
    // the correct size, and set the tiele.
    getContentPane().add(controlPanel);
    pack();
    setTitle("Dick Baldwin");

    //Make the GUI visible
    setVisible(true);

    //--------------------------------------------------//
    //Register listeners on the user input components.
    //--------------------------------------------------//
    chooseButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
          Color selColor = JColorChooser.showDialog(
                    chooseButton,"Choose color",new Color(
                       redInt,greenInt,blueInt));
          if(selColor != null){
            //Don't change the color if the user cancels
            // out.
            redField.setText("" + selColor.getRed());
            greenField.setText(
                                "" + selColor.getGreen());
            blueField.setText("" + selColor.getBlue());
          }//end if

        }//end action performed
      }//end new ActionListener
    );//end addActionListener
    //--------------------------------------------------//

    updateButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){

          //Get properties of PictureExplorer object.
          xIndex = explorer.getXIndex();
          yIndex = explorer.getYIndex();
          zoomFactor = explorer.getZoomFactor();
          
          //Save zoom factor as a string.
          String zoomString = "100%";
          if(zoomFactor == 0.25){
            zoomString = "25%";
          }else if(zoomFactor == 0.50){
            zoomString = "50%";
          }else if(zoomFactor == 0.75){
            zoomString = "75%";
          }else if(zoomFactor == 1.0){
            zoomString = "100%";
          }else if(zoomFactor == 1.5){
            zoomString = "150%";
          }else if(zoomFactor == 2.0){
            zoomString = "200%";
          }else if(zoomFactor == 5.0){
            zoomString = "500%";
          }else{
            zoomString = "100%";//in case no match
          }//end else

          Color newColor = new Color(
                                 redInt,greenInt,blueInt);
          pix.getPixel(xIndex,yIndex).setColor(newColor);

          //Dispose of the existing explorer and create a
          // new one.
          explorerFrame.dispose();

          explorer = new PictureExplorer(pix);
          //Get reference to the new frame
          explorerFrame = explorer.getFrame();
          explorerFrame.setDefaultCloseOperation(
                     WindowConstants.DO_NOTHING_ON_CLOSE);

          //Now set the state of the new explorer.
          //Simulate a mouse pressed event in the picture
          // to set the cursor and the text in the
          // coordinate fields.
          explorer.mousePressed(new MouseEvent(
                           new JButton("dummy component"),
                           MouseEvent.MOUSE_PRESSED,
                           (long)0,
                           0,
                           xIndex,
                           yIndex,
                           0,
                           false));

          //Simulate an action event on the zoom menu to
          // set the zoom.
          explorer.actionPerformed(new ActionEvent(
                             explorer,
                             ActionEvent.ACTION_PERFORMED,
                             zoomString));


        }//end actionPerformed
      }//end newActionListener
    );//end addActionListener
    //--------------------------------------------------//

    //Register a document listener on the red text field.
    // This listener will respond when the contents of
    // the text field are modified either by the program
    // or by the user.
    redField.getDocument().addDocumentListener(
      new DocumentListener(){
        public void changedUpdate(DocumentEvent e){
          //Empty method - not needed
        }//end changedUpdate

        public void removeUpdate(DocumentEvent e){
          try{
            redInt = Integer.parseInt(
                                   redField.getText());
            if((redInt &gt;= 0) &amp;&amp; (redInt &lt;= 255)){
              paintColorSwatch();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end removeUpdate

        public void insertUpdate(DocumentEvent e){
          try{
            redInt = Integer.parseInt(
                                   redField.getText());
            if((redInt &gt;= 0) &amp;&amp; (redInt &lt;= 255)){
              paintColorSwatch();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end insertUpdate

      }//end new DocumentListener
    );//end addDocumentListener
    //--------------------------------------------------//

    //Register a document listener on the green text
    // field. Essentially the same as the above.
    greenField.getDocument().addDocumentListener(
      new DocumentListener(){
        public void changedUpdate(DocumentEvent e){}

        public void removeUpdate(DocumentEvent e){
          try{
            greenInt = Integer.parseInt(
                                 greenField.getText());
            if((greenInt &gt;= 0) &amp;&amp; (greenInt &lt;= 255))
            {
              paintColorSwatch();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end removeUpdate

        public void insertUpdate(DocumentEvent e){
          try{
            greenInt = Integer.parseInt(
                                 greenField.getText());
            if((greenInt &gt;= 0) &amp;&amp; (greenInt &lt;= 255))
            {
              paintColorSwatch();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end insertUpdate

      }//end new DocumentListener
    );//end addDocumentListener
    //--------------------------------------------------//
    
    //Register a document listener on the blue text
    // field. Essentially the same as the above.
    blueField.getDocument().addDocumentListener(
      new DocumentListener(){
        public void changedUpdate(DocumentEvent e){}

        public void removeUpdate(DocumentEvent e){
          try{
            blueInt = Integer.parseInt(
                                  blueField.getText());
            if((blueInt &gt;= 0) &amp;&amp; (blueInt &lt;= 255)){
              paintColorSwatch();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end removeUpdate

        public void insertUpdate(DocumentEvent e){
          try{
            blueInt = Integer.parseInt(
                                  blueField.getText());
            if((blueInt &gt;= 0) &amp;&amp; (blueInt &lt;= 255)){
              paintColorSwatch();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end insertUpdate

      }//end new DocumentListener
    );//end addDocumentListener
    //--------------------------------------------------//
  }//end constructor
  //----------------------------------------------------//

  //The purpose of this method is to color a swatch 
  // located next to the RGB color values.
  private void paintColorSwatch(){
    colorIndicatorPanel.setBackground(
                      new Color(redInt,greenInt,blueInt));
  }//end paintColorSwatch

  //----------------------------------------------------//

  //The purpose of this method is to absorb any exceptions
  // that may be thrown by the parseInt method in order
  // to avoid having the program abort. In the event that
  // an exception is thrown, this method simply returns an
  // int value of 0;
  private int goParseInt(String string){
    int result = 0;
    try{
      result = Integer.parseInt(string);
    }catch(Exception e){
      result = 0;
    }//end catch
    return result;
  }//end goParseInt

  //----------------------------------------------------//


}//end class Prob15Runner
</code>






<para id="p1074">
<emphasis id="strong1070" effect="bold">
<emphasis id="Listing_10" effect="bold">

Listing 10

</emphasis>

 - Complete listing of modified PictureExplorer class.

</emphasis>
</para>



				

<code id="pre1009" display="block">import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.awt.image.*;
import javax.swing.border.*;

/*
05/16/12 Modified by Baldwin to add getter methods to
 cause the following values to be accessible from 
 outside the object:
 
int xIndex
int yIndex
double zoomFactor
JFrame pictureFrame

Also disabled the call to setDefaultCloseOperation

*/

/**
 * Displays a picture and lets you explore the picture by displaying the x, y, red,
 * green, and blue values of the pixel at the cursor when you click a mouse button or
 * press and hold a mouse button while moving the cursor.  It also lets you zoom in or
 * out.  You can also type in a x and y value to see the color at that location.
 *
 * Originally created for the Jython Environment for Students (JES).
 * Modified to work with DrJava by Barbara Ericson
 *
 * Copyright Georgia Institute of Technology 2004
 * @author Keith McDermottt, gte047w@cc.gatech.edu
 * @author Barb Ericson ericson@cc.gatech.edu
 */
public class PictureExplorer implements MouseMotionListener, ActionListener, MouseListener
{

 // current x and y index
 private int xIndex = 0;
 private int yIndex = 0;

 //Main gui variables
 private JFrame pictureFrame;
 private JScrollPane scrollPane;

 //information bar variables
 private JLabel xLabel;
 private JButton xPrevButton;
 private JButton yPrevButton;
 private JButton xNextButton;
 private JButton yNextButton;
 private JLabel yLabel;
 private JTextField xValue;
 private JTextField yValue;
 private JLabel rValue;
 private JLabel gValue;
 private JLabel bValue;
 private JLabel colorLabel;
 private JPanel colorPanel;

 // menu components
 private JMenuBar menuBar;
 private JMenu zoomMenu;
 private JMenuItem twentyFive;
 private JMenuItem fifty;
 private JMenuItem seventyFive;
 private JMenuItem hundred;
 private JMenuItem hundredFifty;
 private JMenuItem twoHundred;
 private JMenuItem fiveHundred;

 /** The picture being explored */
 private DigitalPicture picture;

 /** The image icon used to display the picture */
 private ImageIcon scrollImageIcon;

 /** The image display */
 private ImageDisplay imageDisplay;

 /** the zoom factor (amount to zoom) */
 private double zoomFactor;

 /** the number system to use, 0 means starting at 0, 1 means starting at 1 */
 private int numberBase=0;

 /**
  * Public constructor
  * @param picture the picture to explore
  */
 public PictureExplorer(DigitalPicture picture)
 {
   // set the fields
   this.picture=picture;
   zoomFactor=1;

   // create the window and set things up
   createWindow();
 }

//===Methods added by Baldwin on 05/16/12===============//

  //Method to get the xIndex value.
  public int getXIndex(){
    return xIndex;
  }//end getXIndex

  //Method to get the yIndex value.
  public int getYIndex(){
    return yIndex;
  }//end getYIndex

  //Method to get the zoomFactor value.
  public double getZoomFactor(){
    return zoomFactor;
  }//end getZoomFactor

  //Method to get a reference to the frame
  public JFrame getFrame(){
    return pictureFrame;
  }//end getFrame()

//===End methods added by Baldwin on 05/16/12===========//






 /**
  * Changes the number system to start at one
  */
 public void changeToBaseOne()
 {
   numberBase=1;
 }

 /**
  * Set the title of the frame
  *@param title the title to use in the JFrame
  */
 public void setTitle(String title)
 {
   pictureFrame.setTitle(title);
 }

 /**
  * Method to create and initialize the picture frame
  */
 private void createAndInitPictureFrame()
 {
   pictureFrame = new JFrame(); // create the JFrame
   pictureFrame.setResizable(true);  // allow the user to resize it
   pictureFrame.getContentPane().setLayout(new BorderLayout()); // use border layout
   
   //Disabled by Baldwin on 05/16/12
   //pictureFrame.setDefaultCloseOperation(
   // JFrame.DISPOSE_ON_CLOSE);
   
   pictureFrame.setTitle(picture.getTitle());
   PictureExplorerFocusTraversalPolicy newPolicy = new PictureExplorerFocusTraversalPolicy();
   pictureFrame.setFocusTraversalPolicy(newPolicy);

 }

 /**
  * Method to create the menu bar, menus, and menu items
  */
 private void setUpMenuBar()
 {
   //create menu
   menuBar = new JMenuBar();
   zoomMenu = new JMenu("Zoom");
   twentyFive = new JMenuItem("25%");
   fifty = new JMenuItem("50%");
   seventyFive = new JMenuItem("75%");
   hundred = new JMenuItem("100%");
   hundred.setEnabled(false);
   hundredFifty = new JMenuItem("150%");
   twoHundred = new JMenuItem("200%");
   fiveHundred = new JMenuItem("500%");

   // add the action listeners
   twentyFive.addActionListener(this);
   fifty.addActionListener(this);
   seventyFive.addActionListener(this);
   hundred.addActionListener(this);
   hundredFifty.addActionListener(this);
   twoHundred.addActionListener(this);
   fiveHundred.addActionListener(this);

   // add the menu items to the menus
   zoomMenu.add(twentyFive);
   zoomMenu.add(fifty);
   zoomMenu.add(seventyFive);
   zoomMenu.add(hundred);
   zoomMenu.add(hundredFifty);
   zoomMenu.add(twoHundred);
   zoomMenu.add(fiveHundred);
   menuBar.add(zoomMenu);

   // set the menu bar to this menu
   pictureFrame.setJMenuBar(menuBar);
 }

 /**
  * Create and initialize the scrolling image
  */
 private void createAndInitScrollingImage()
 {
   scrollPane = new JScrollPane();

   BufferedImage bimg = picture.getBufferedImage();
   imageDisplay = new ImageDisplay(bimg);
   imageDisplay.addMouseMotionListener(this);
   imageDisplay.addMouseListener(this);
   imageDisplay.setToolTipText("Click a mouse button on a pixel to see the pixel information");
   scrollPane.setViewportView(imageDisplay);
   pictureFrame.getContentPane().add(scrollPane, BorderLayout.CENTER);
 }

 /**
  * Creates the JFrame and sets everything up
  */
 private void createWindow()
 {
   // create the picture frame and initialize it
   createAndInitPictureFrame();

   // set up the menu bar
   setUpMenuBar();

   //create the information panel
   createInfoPanel();

   //creates the scrollpane for the picture
   createAndInitScrollingImage();

   // show the picture in the frame at the size it needs to be
   pictureFrame.pack();
   pictureFrame.setVisible(true);
 }

 /**
  * Method to set up the next and previous buttons for the
  * pixel location information
  */
 private void setUpNextAndPreviousButtons()
 {
   // create the image icons for the buttons
   Icon prevIcon = new ImageIcon(SoundExplorer.class.getResource("leftArrow.gif"),
                                 "previous index");
   Icon nextIcon = new ImageIcon(SoundExplorer.class.getResource("rightArrow.gif"),
                                 "next index");
   // create the arrow buttons
   xPrevButton = new JButton(prevIcon);
   xNextButton = new JButton(nextIcon);
   yPrevButton = new JButton(prevIcon);
   yNextButton = new JButton(nextIcon);

   // set the tool tip text
   xNextButton.setToolTipText("Click to go to the next x value");
   xPrevButton.setToolTipText("Click to go to the previous x value");
   yNextButton.setToolTipText("Click to go to the next y value");
   yPrevButton.setToolTipText("Click to go to the previous y value");

   // set the sizes of the buttons
   int prevWidth = prevIcon.getIconWidth() + 2;
   int nextWidth = nextIcon.getIconWidth() + 2;
   int prevHeight = prevIcon.getIconHeight() + 2;
   int nextHeight = nextIcon.getIconHeight() + 2;
   Dimension prevDimension = new Dimension(prevWidth,prevHeight);
   Dimension nextDimension = new Dimension(nextWidth, nextHeight);
   xPrevButton.setPreferredSize(prevDimension);
   yPrevButton.setPreferredSize(prevDimension);
   xNextButton.setPreferredSize(nextDimension);
   yNextButton.setPreferredSize(nextDimension);

   // handle previous x button press
   xPrevButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       xIndex--;
       if (xIndex &lt; 0)
         xIndex = 0;
       displayPixelInformation(xIndex,yIndex);
     }
   });

   // handle previous y button press
   yPrevButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       yIndex--;
       if (yIndex &lt; 0)
         yIndex = 0;
       displayPixelInformation(xIndex,yIndex);
     }
   });

   // handle next x button press
   xNextButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       xIndex++;
       if (xIndex &gt;= picture.getWidth())
         xIndex = picture.getWidth() - 1;
       displayPixelInformation(xIndex,yIndex);
     }
   });

   // handle next y button press
   yNextButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       yIndex++;
       if (yIndex &gt;= picture.getHeight())
         yIndex = picture.getHeight() - 1;
       displayPixelInformation(xIndex,yIndex);
     }
   });
 }

 /**
  * Create the pixel location panel
  * @param labelFont the font for the labels
  * @return the location panel
  */
 public JPanel createLocationPanel(Font labelFont) {

   // create a location panel
   JPanel locationPanel = new JPanel();
   locationPanel.setLayout(new FlowLayout());
   Box hBox = Box.createHorizontalBox();

   // create the labels
   xLabel = new JLabel("X:");
   yLabel = new JLabel("Y:");

   // create the text fields
   xValue = new JTextField(Integer.toString(xIndex + numberBase),6);
   xValue.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent e) {
       displayPixelInformation(xValue.getText(),yValue.getText());
     }
   });
   yValue = new JTextField(Integer.toString(yIndex + numberBase),6);
   yValue.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent e) {
      displayPixelInformation(xValue.getText(),yValue.getText());
     }
   });

   // set up the next and previous buttons
   setUpNextAndPreviousButtons();

   // set up the font for the labels
   xLabel.setFont(labelFont);
   yLabel.setFont(labelFont);
   xValue.setFont(labelFont);
   yValue.setFont(labelFont);

   // add the items to the vertical box and the box to the panel
   hBox.add(Box.createHorizontalGlue());
   hBox.add(xLabel);
   hBox.add(xPrevButton);
   hBox.add(xValue);
   hBox.add(xNextButton);
   hBox.add(Box.createHorizontalStrut(10));
   hBox.add(yLabel);
   hBox.add(yPrevButton);
   hBox.add(yValue);
   hBox.add(yNextButton);
   locationPanel.add(hBox);
   hBox.add(Box.createHorizontalGlue());

   return locationPanel;
 }

 /**
  * Create the color information panel
  * @param labelFont the font to use for labels
  * @return the color information panel
  */
 private JPanel createColorInfoPanel(Font labelFont)
 {
   // create a color info panel
   JPanel colorInfoPanel = new JPanel();
   colorInfoPanel.setLayout(new FlowLayout());

   // get the pixel at the x and y
   Pixel pixel = new Pixel(picture,xIndex,yIndex);

   // create the labels
   rValue = new JLabel("R: " + pixel.getRed());
   gValue = new JLabel("G: " + pixel.getGreen());
   bValue = new JLabel("B: " + pixel.getBlue());

   // create the sample color panel and label
   colorLabel = new JLabel("Color at location: ");
   colorPanel = new JPanel();
   colorPanel.setBorder(new LineBorder(Color.black,1));

   // set the color sample to the pixel color
   colorPanel.setBackground(pixel.getColor());

   // set the font
   rValue.setFont(labelFont);
   gValue.setFont(labelFont);
   bValue.setFont(labelFont);
   colorLabel.setFont(labelFont);
   colorPanel.setPreferredSize(new Dimension(25,25));

   // add items to the color information panel
   colorInfoPanel.add(rValue);
   colorInfoPanel.add(gValue);
   colorInfoPanel.add(bValue);
   colorInfoPanel.add(colorLabel);
   colorInfoPanel.add(colorPanel);

   return colorInfoPanel;
 }

 /**
  * Creates the North JPanel with all the pixel location
  * and color information
  */
 private void createInfoPanel()
 {
   // create the info panel and set the layout
   JPanel infoPanel = new JPanel();
   infoPanel.setLayout(new BorderLayout());

   // create the font
   Font largerFont = new Font(infoPanel.getFont().getName(),
                              infoPanel.getFont().getStyle(),14);

   // create the pixel location panel
   JPanel locationPanel = createLocationPanel(largerFont);

   // create the color informaiton panel
   JPanel colorInfoPanel = createColorInfoPanel(largerFont);

   // add the panels to the info panel
   infoPanel.add(BorderLayout.NORTH,locationPanel);
   infoPanel.add(BorderLayout.SOUTH,colorInfoPanel);

   // add the info panel
   pictureFrame.getContentPane().add(BorderLayout.NORTH,infoPanel);
 }

 /**
  * Method to check that the current position is in the viewing area and if
  * not scroll to center the current position if possible
  */
 public void checkScroll()
 {
   // get the x and y position in pixels
   int xPos = (int) (xIndex * zoomFactor);
   int yPos = (int) (yIndex * zoomFactor);

   // only do this if the image is larger than normal
   if (zoomFactor &gt; 1) {

     // get the rectangle that defines the current view
     JViewport viewport = scrollPane.getViewport();
     Rectangle rect = viewport.getViewRect();
     int rectMinX = (int) rect.getX();
     int rectWidth = (int) rect.getWidth();
     int rectMaxX = rectMinX + rectWidth - 1;
     int rectMinY = (int) rect.getY();
     int rectHeight = (int) rect.getHeight();
     int rectMaxY = rectMinY + rectHeight - 1;

     // get the maximum possible x and y index
     int maxIndexX = (int) (picture.getWidth() * zoomFactor) - rectWidth - 1;
     int maxIndexY = (int) (picture.getHeight() * zoomFactor) - rectHeight - 1;

     // calculate how to position the current position in the middle of the viewing
     // area
     int viewX = xPos - (int) (rectWidth / 2);
     int viewY = yPos - (int) (rectHeight / 2);

     // reposition the viewX and viewY if outside allowed values
     if (viewX &lt; 0)
       viewX = 0;
     else if (viewX &gt; maxIndexX)
       viewX = maxIndexX;
     if (viewY &lt; 0)
       viewY = 0;
     else if (viewY &gt; maxIndexY)
       viewY = maxIndexY;

     // move the viewport upper left point
     viewport.scrollRectToVisible(new Rectangle(viewX,viewY,rectWidth,rectHeight));
   }
 }

 /**
  * Zooms in the on picture by scaling the image.
  * It is extremely memory intensive.
  * @param factor the amount to zoom by
  */
 public void zoom(double factor)
 {
   // save the current zoom factor
   zoomFactor = factor;

   // calculate the new width and height and get an image that size
   int width = (int) (picture.getWidth()*zoomFactor);
   int height = (int) (picture.getHeight()*zoomFactor);
   BufferedImage bimg = picture.getBufferedImage();

   // set the scroll image icon to the new image
   imageDisplay.setImage(bimg.getScaledInstance(width, height, Image.SCALE_DEFAULT));
   imageDisplay.setCurrentX((int) (xIndex * zoomFactor));
   imageDisplay.setCurrentY((int) (yIndex * zoomFactor));
   imageDisplay.revalidate();
   checkScroll();  // check if need to reposition scroll
 }

 /**
  * Repaints the image on the scrollpane.
  */
 public void repaint()
 {
   pictureFrame.repaint();
 }

 //****************************************//
 //               Event Listeners          //
 //****************************************//

 /**
  * Called when the mouse is dragged (button held down and moved)
  * @param e the mouse event
  */
 public void mouseDragged(MouseEvent e)
 {
   displayPixelInformation(e);
 }

 /**
  * Method to check if the given x and y are in the picture
  * @param x the horiztonal value
  * @param y the vertical value
  * @return true if the x and y are in the picture and false otherwise
  */
 private boolean isLocationInPicture(int x, int y)
 {
   boolean result = false; // the default is false
   if (x &gt;= 0 &amp;&amp; x &lt; picture.getWidth() &amp;&amp;
       y &gt;= 0 &amp;&amp; y &lt; picture.getHeight())
     result = true;

   return result;
 }

 /**
  * Method to display the pixel information from the passed x and y but
  * also converts x and y from strings
  * @param xString the x value as a string from the user
  * @param yString the y value as a string from the user
  */
 public void displayPixelInformation(String xString, String yString)
 {
   int x = -1;
   int y = -1;
   try {
     x = Integer.parseInt(xString);
     x = x - numberBase;
     y = Integer.parseInt(yString);
     y = y - numberBase;
   } catch (Exception ex) {
   }

   if (x &gt;= 0 &amp;&amp; y &gt;= 0) {
     displayPixelInformation(x,y);
   }
 }

 /**
  * Method to display pixel information for the passed x and y
  * @param pictureX the x value in the picture
  * @param pictureY the y value in the picture
  */
 private void displayPixelInformation(int pictureX, int pictureY)
 {
   // check that this x and y is in range
   if (isLocationInPicture(pictureX, pictureY))
   {
     // save the current x and y index
     xIndex = pictureX;
     yIndex = pictureY;

     // get the pixel at the x and y
     Pixel pixel = new Pixel(picture,xIndex,yIndex);

     // set the values based on the pixel
     xValue.setText(Integer.toString(xIndex  + numberBase));
     yValue.setText(Integer.toString(yIndex + numberBase));
     rValue.setText("R: " + pixel.getRed());
     gValue.setText("G: " + pixel.getGreen());
     bValue.setText("B: " + pixel.getBlue());
     colorPanel.setBackground(new Color(pixel.getRed(), pixel.getGreen(), pixel.getBlue()));

   }
   else
   {
     clearInformation();
   }

   // notify the image display of the current x and y
   imageDisplay.setCurrentX((int) (xIndex * zoomFactor));
   imageDisplay.setCurrentY((int) (yIndex * zoomFactor));
 }

 /**
  * Method to display pixel information based on a mouse event
  * @param e a mouse event
  */
 private void displayPixelInformation(MouseEvent e)
 {

   // get the cursor x and y
   int cursorX = e.getX();
   int cursorY = e.getY();

   // get the x and y in the original (not scaled image)
   int pictureX = (int) (cursorX / zoomFactor + numberBase);
   int pictureY = (int) (cursorY / zoomFactor + numberBase);

   // display the information for this x and y
   displayPixelInformation(pictureX,pictureY);

 }

 /**
  * Method to clear the labels and current color and reset the
  * current index to -1
  */
 private void clearInformation()
 {
   xValue.setText("N/A");
   yValue.setText("N/A");
   rValue.setText("R: N/A");
   gValue.setText("G: N/A");
   bValue.setText("B: N/A");
   colorPanel.setBackground(Color.black);
   xIndex = -1;
   yIndex = -1;
 }

 /**
  * Method called when the mouse is moved with no buttons down
  * @param e the mouse event
  */
 public void mouseMoved(MouseEvent e)
 {}

 /**
  * Method called when the mouse is clicked
  * @param e the mouse event
  */
 public void mouseClicked(MouseEvent e)
 {
   displayPixelInformation(e);
 }

 /**
  * Method called when the mouse button is pushed down
  * @param e the mouse event
  */
 public void mousePressed(MouseEvent e)
 {
   displayPixelInformation(e);
 }

 /**
  * Method called when the mouse button is released
  * @param e the mouse event
  */
 public void mouseReleased(MouseEvent e)
 {
 }

 /**
  * Method called when the component is entered (mouse moves over it)
  * @param e the mouse event
  */
 public void mouseEntered(MouseEvent e)
 {
 }

 /**
  * Method called when the mouse moves over the component
  * @param e the mouse event
  */
 public void mouseExited(MouseEvent e)
 {
 }

 /**
  * Method to enable all menu commands
  */
 private void enableZoomItems()
 {
   twentyFive.setEnabled(true);
   fifty.setEnabled(true);
   seventyFive.setEnabled(true);
   hundred.setEnabled(true);
   hundredFifty.setEnabled(true);
   twoHundred.setEnabled(true);
   fiveHundred.setEnabled(true);
 }

 /**
  * Controls the zoom menu bar
  *
  * @param a the ActionEvent
  */
 public void actionPerformed(ActionEvent a)
 {

   if(a.getActionCommand().equals("Update"))
   {
     this.repaint();
   }

   if(a.getActionCommand().equals("25%"))
   {
     this.zoom(.25);
     enableZoomItems();
     twentyFive.setEnabled(false);
   }

   if(a.getActionCommand().equals("50%"))
   {
     this.zoom(.50);
     enableZoomItems();
     fifty.setEnabled(false);
   }

   if(a.getActionCommand().equals("75%"))
   {
     this.zoom(.75);
     enableZoomItems();
     seventyFive.setEnabled(false);
   }

   if(a.getActionCommand().equals("100%"))
   {
     this.zoom(1.0);
     enableZoomItems();
     hundred.setEnabled(false);
   }

   if(a.getActionCommand().equals("150%"))
   {
     this.zoom(1.5);
     enableZoomItems();
     hundredFifty.setEnabled(false);
   }

   if(a.getActionCommand().equals("200%"))
   {
     this.zoom(2.0);
     enableZoomItems();
     twoHundred.setEnabled(false);
   }

   if(a.getActionCommand().equals("500%"))
   {
     this.zoom(5.0);
     enableZoomItems();
     fiveHundred.setEnabled(false);
   }
 }

 /**
  * Test Main.  It will ask you to pick a file and then show it
  */
 public static void main( String args[])
 {
   Picture p = new Picture(FileChooser.pickAFile());
   PictureExplorer test = new PictureExplorer(p);

 }

 /**
  * Class for establishing the focus for the textfields
  */
 private class PictureExplorerFocusTraversalPolicy
                 extends FocusTraversalPolicy {

        /**
         * Method to get the next component for focus
         */
        public Component getComponentAfter(Container focusCycleRoot,
                                           Component aComponent) {
            if (aComponent.equals(xValue))
              return yValue;
            else
              return xValue;
        }

        /**
         * Method to get the previous component for focus
         */
         public Component getComponentBefore(Container focusCycleRoot,
                                       Component aComponent) {
            if (aComponent.equals(xValue))
              return yValue;
            else
              return xValue;
         }

         public Component getDefaultComponent(Container focusCycleRoot) {
            return xValue;
        }

        public Component getLastComponent(Container focusCycleRoot) {
            return yValue;
        }

        public Component getFirstComponent(Container focusCycleRoot) {
            return xValue;
        }
    }
}
</code>


	

<para id="p1075">
-end- 

</para>






</section>
</content>




</document>