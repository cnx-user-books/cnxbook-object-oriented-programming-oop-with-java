<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Java4060: Duplicate Elements, Ordered Collections, Sorted Collections, and Interface Specialization</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m46141</md:content-id>
  <md:title>Java4060: Duplicate Elements, Ordered Collections, Sorted Collections, and Interface Specialization</md:title>
  <md:abstract>Baldwin shows you that all concrete implementations in the Collection hierarchy implement a sub-interface of the Collection interface.  A Set object cannot contain duplicate elements, but a List object can contain duplicate elements.  Ordered collections are not the same as sorted collections.  Specialized stipulations are placed on interfaces as you progress down the interface inheritance hierarchy of the Java Collections Framework.</md:abstract>
  <md:uuid>4c054d05-2aab-4c98-b177-f917f88ad4bf</md:uuid>
</metadata>

<content>






<para id="p1000">
Revised: Wed Apr 06 09:47:48 CDT 2016

</para>




<para id="p1001">
<emphasis id="em1000" effect="italics">
This page is included in the following Books:

</emphasis>
</para>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">

	

<link id="a1000" url="http://cnx.org/contents/dzOvxPFw">


<emphasis id="em1001" effect="italics">
ITSE 2321 - Object-Oriented Programming (Java)

</emphasis>
</link>


</item>


	

<item id="li1001">

	

<link id="a1001" url="http://cnx.org/contents/-2RmHFs_">


<emphasis id="em1002" effect="italics">
Object-Oriented Programming (OOP) with Java 
	

</emphasis>
 
	

</link>

 

</item>




</list>















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1001" list-type="bulleted">

	

<item id="li1002">
<link id="a1002" target-id="Preface">

Preface

</link>


	

</item>


	

<item id="li1003">
<link id="a1003" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1004">
<link id="a1004" target-id="Generics">

Generics

</link>


</item>


	

<item id="li1005">
<link id="a1005" target-id="Discussion_and_sample_code">

Discussion

</link>


<list id="ul1002" list-type="bulleted">

		

<item id="li1006">
<link id="a1006" target-id="We_will_start_with_a_quiz">

We will start with a quiz

</link>


</item>


		

<item id="li1007">
<link id="a1007" target-id="The_root_of_the_Collection_hierarchy">

The root of the Collection hierarchy

</link>


<list id="ul1003" list-type="bulleted">

			

<item id="li1008">
<link id="a1008" target-id="What_does_Oracle_say_about_this">

What does Oracle say about this?

</link>


</item>


		

</list>


		

</item>


		

<item id="li1009">
<link id="a1009" target-id="What_about_duplicate_elements">

What about duplicate elements?

</link>


</item>


		

<item id="li1010">
<link id="a1010" target-id="What_is_a_set">

What is a set?

</link>


</item>


		

<item id="li1011">
<link id="a1011" target-id="What_is_a_list">

What is a list?

</link>


</item>


		

<item id="li1012">
<link id="a1012" target-id="Ordered_is_not_the_same_as_sorted">

Ordered is not the same as sorted

</link>


</item>


		

<item id="li1013">
<link id="a1013" target-id="Is_ascending_sort_order_always_required">

Is ascending sort order always required?

</link>


<list id="ul1004" list-type="bulleted">

			

<item id="li1014">
<link id="a1014" target-id="Does_case_matter_in_String_objects">

Does case matter in String objects?

</link>


</item>


		

</list>


		

</item>


		

<item id="li1015">
<link id="a1015" target-id="Sub_interfaces_have_more_stipulations">

Sub-interfaces have more stipulations

</link>


<list id="ul1005" list-type="bulleted">

			

<item id="li1016">
<link id="a1016" target-id="Stipulations_on_set">

Stipulations on set

</link>


</item>


			

<item id="li1017">

			

<link id="a1017" target-id="Stipulations_on_SortedSet">

Stipulations on SortedSet

</link>


</item>


		

</list>


		

</item>


		

<item id="li1018">
<link id="a1018" target-id="We_will_end_with_a_quiz">

We will end with a quiz

</link>


<list id="ul1006" list-type="bulleted">

			

<item id="li1019">
<link id="a1019" target-id="Question_1">

Question 1

</link>


</item>


			

<item id="li1020">
<link id="a1020" target-id="Question_2">

Question 2

</link>


</item>


			

<item id="li1021">
<link id="a1021" target-id="Question_3">

Question 3

</link>


</item>


			

<item id="li1022">
<link id="a1022" target-id="Question_4">

Question 4

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1023">
<link id="a1023" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1024">
<link id="a1024" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1025">
<link id="a1025" target-id="Miscellaneous">

Miscellaneous

</link>


</item>




</list>




</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>




<para id="p1002">
This module is one of a series of modules designed to teach you about 
Object-Oriented Programming (OOP) in general and the Java Collections 
framework in particular. 

</para>





<para id="p1003">
In addition to studying these modules, I strongly recommend that you study 
the 

<link id="a1026" url="http://docs.oracle.com/javase/tutorial/collections/index.html">


Collections Trail

</link>

 in


<link id="a1027" url="http://docs.oracle.com/javase/tutorial/index.html">

Oracle's Java 
Tutorials

</link>

. The modules in this collection are intended to supplement and not 
to replace those tutorials.

</para>





</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>




<para id="p1004">
You learned in earlier modules that the Java Collections Framework defines eight 
core interfaces, in two distinct trees.
One of the trees, which consists of six interfaces, is rooted in the interface named


<emphasis id="strong1000" effect="bold">
Collection

</emphasis>
. The other 
tree, which consists of two interfaces, is 
rooted in the interface named 

<emphasis id="strong1001" effect="bold">
Map

</emphasis>
.

</para>





<para id="p1005">
You learned the names and the 
inheritance structure of those interfaces. You also learned about their 
purpose. You saw how the interfaces declare polymorphic methods that apply to 
implementations of the interfaces, and you learned about the optional methods of 
the 

<emphasis id="strong1002" effect="bold">
Collection

</emphasis>
 interface and the 

<emphasis id="strong1003" effect="bold">
Map

</emphasis>
 
interface.

</para>





<para id="p1006">
In this module you will learn that all of the implementations of the 
interfaces on the 

<emphasis id="strong1004" effect="bold">
Collection

</emphasis>
 side of the Java Collections Framework


<emphasis id="em1003" effect="italics">
(the Collection hierarchy)

</emphasis>
 implement one of the sub-interfaces 
of the 

<emphasis id="strong1005" effect="bold">
Collection

</emphasis>
 interface. 

<emphasis id="em1004" effect="italics">
(A similar discussion regarding the 


<emphasis id="strong1006" effect="bold">
Map

</emphasis>
 
side of the Java Collections framework will be deferred until a future module.)

</emphasis>
</para>





<para id="p1007">
You will learn that a 

<emphasis id="strong1007" effect="bold">
Set

</emphasis>
 object cannot contain duplicate elements, 
but a 

<emphasis id="strong1008" effect="bold">
List

</emphasis>
 object can contain duplicate elements.

</para>





<para id="p1008">
You will learn about the difference between 

<emphasis id="em1005" effect="italics">
ordered

</emphasis>
 collections and 

<emphasis id="em1006" effect="italics">

sorted

</emphasis>
 collections. You will also learn about 

<emphasis id="em1007" effect="italics">
ascending order

</emphasis>
 
and the 

<emphasis id="em1008" effect="italics">
natural ordering

</emphasis>
 of objects. 

</para>





<para id="p1009">
In addition, you will learn 
how more specialized stipulations are placed on interfaces as you progress down 
the interface inheritance hierarchy of the Java Collections Framework.

</para>





</section>
<section id="h11003">
<title>
<emphasis id="Generics" effect="bold">

Generics

</emphasis>


</title>




<para id="p1010">
The code in this series of modules is written with no thought given to


<link id="a1028" url="http://docs.oracle.com/javase/tutorial/java/generics/index.html">


Generics

</link>

. As a result, if you copy and compile the code, you will probably 
get warnings about 

<emphasis id="em1009" effect="italics">
unchecked or unsafe operations

</emphasis>
.

</para>





<para id="p1011">
While you will ultimately need to understand how to use Generics, that is a 
very complex topic. An understanding of Generics is beyond the scope of this 
course. Therefore, for purposes of this course, you can simply ignore those 
warnings.

</para>





</section>
<section id="h11004">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion

</emphasis>


</title>




<section id="h21000">
<title>
<emphasis id="We_will_start_with_a_quiz" effect="bold">

We will start with a quiz

</emphasis>


</title>




<para id="p1012">
I am going to begin this module with a quiz just to make sure that you are 
still awake. Is the following statement True 
or False?

</para>





<quote id="blockquote1000" display="block">

	The 

<emphasis id="strong1009" effect="bold">
TreeSet

</emphasis>
 class is a direct implementation of the 

<emphasis id="strong1010" effect="bold">
Collection

</emphasis>
 
	interface.

</quote>




<para id="p1013">
The answer is False. 

</para>





<para id="p1014">
The 

<emphasis id="strong1011" effect="bold">
TreeSet

</emphasis>
 class is not a direct implementation of 
the 

<emphasis id="strong1012" effect="bold">
Collection

</emphasis>
 interface. Rather, the 

<emphasis id="strong1013" effect="bold">
TreeSet

</emphasis>
 class is a direct 
implementation of the 

<emphasis id="strong1014" effect="bold">
SortedSet

</emphasis>
 interface. The 

<emphasis id="strong1015" effect="bold">
SortedSet

</emphasis>
 
interface extends the 

<emphasis id="strong1016" effect="bold">
Set

</emphasis>
 interface, and the 

<emphasis id="strong1017" effect="bold">
Set

</emphasis>
 interface extends 
the 

<emphasis id="strong1018" effect="bold">
Collection

</emphasis>
 interface.

</para>





<para id="p1015">
The interface hierarchy for the Java Collections Framework is shown below:

</para>





<para id="p1016">
</para>





<list id="ul1007" list-type="bulleted">

	

<item id="li1026">
Collection
	

<list id="ul1008" list-type="bulleted">

		

<item id="li1027">
Set
		

<list id="ul1009" list-type="bulleted">

			

<item id="li1028">
SortedSet

</item>


		

</list>


		

</item>


		

<item id="li1029">
List

</item>


		

<item id="li1030">
Queue

</item>


		

<item id="li1031">
Deque

</item>


	

</list>


	

</item>


	

<item id="li1032">
Map
	

<list id="ul1010" list-type="bulleted">

		

<item id="li1033">
SortedMap

</item>


	

</list>


	

</item>




</list>




<para id="p1017">
As you learned in an earlier module, the Java Collections Framework doesn't 
have a single root. As shown above, there are two distinct trees in the 
framework -- The 

<emphasis id="strong1019" effect="bold">
Collection

</emphasis>
 hierarchy and the 

<emphasis id="strong1020" effect="bold">
Map

</emphasis>
 hierarchy.

</para>





</section>
<section id="h21001">
<title>
<emphasis id="The_root_of_the_Collection_hierarchy" effect="bold">

The root of the Collection hierarchy

</emphasis>


</title>




<para id="p1018">
The 

<emphasis id="strong1021" effect="bold">
Collection

</emphasis>
 interface is the root of the collection hierarchy. 
The Java Collections Framework doesn't provide any direct implementations of the 

<emphasis id="strong1022" effect="bold">
Collection

</emphasis>
 
interface. All of the implementations of the interfaces in the 

<emphasis id="strong1023" effect="bold">

Collection

</emphasis>
 hierarchy implement one of the sub-interfaces of the 

<emphasis id="strong1024" effect="bold">
Collection

</emphasis>
 
interface. 

</para>





<section id="h31000">
<title>
<emphasis id="What_does_Oracle_say_about_this" effect="bold">

What does Oracle say about this?

</emphasis>


</title>




<para id="p1019">
Here is what the Oracle documentation has to say on the topic of the 

<emphasis id="strong1025" effect="bold">

Collection

</emphasis>
 interface: 

</para>





<para id="p1020">
<emphasis id="em1010" effect="italics">
"The SDK does not provide any direct implementations of this interface: it 
provides implementations of more specific sub-interfaces like 

<emphasis id="strong1026" effect="bold">
Set

</emphasis>
 and 


<emphasis id="strong1027" effect="bold">
List

</emphasis>
. This 
interface is typically used to pass collections around and manipulate them where 
maximum generality is desired."

</emphasis>
</para>





<para id="p1021">
The Oracle documentation also states:

</para>





<para id="p1022">
<emphasis id="em1011" effect="italics">
"Bags or multisets (unordered collections that may contain duplicate 
elements) should implement this interface directly."

</emphasis>
 

</para>





</section>
</section>
<section id="h21002">
<title>
<emphasis id="What_about_duplicate_elements" effect="bold">

What about duplicate elements?

</emphasis>


</title>




<para id="p1023">
Some implementations of 

<emphasis id="strong1028" effect="bold">
Collection

</emphasis>
 allow duplicate elements, and 
others do not. Implementations of the 

<emphasis id="strong1029" effect="bold">
List

</emphasis>
 interface 

<emphasis id="em1012" effect="italics">
(such as 


<emphasis id="strong1030" effect="bold">
ArrayList

</emphasis>
)

</emphasis>
 allow duplicate elements. Implements of 

<emphasis id="strong1031" effect="bold">
Set

</emphasis>
 and 

<emphasis id="strong1032" effect="bold">

SortedSet

</emphasis>
 

<emphasis id="em1013" effect="italics">
(such as 

<emphasis id="strong1033" effect="bold">
TreeSet

</emphasis>
)

</emphasis>
 do not allow duplicate elements. 
This was illustrated in an earlier module.

</para>





<para id="p1024">
A sample program in that earlier module created two collection objects and applied 
the polymorphic 

<emphasis id="strong1034" effect="bold">
add

</emphasis>
 method to add the same elements to each collection. 
One of the collection objects was of type 

<emphasis id="strong1035" effect="bold">
ArrayList

</emphasis>
, and the other 
collection object was of type 

<emphasis id="strong1036" effect="bold">
TreeSet

</emphasis>
. The elements added to each 
collection contained one pair of duplicate elements. The duplicate element 
was automatically excluded from the 

<emphasis id="strong1037" effect="bold">
TreeSet

</emphasis>
 object, but was retained in 
the 

<emphasis id="strong1038" effect="bold">
ArrayList

</emphasis>
 object. 

</para>





</section>
<section id="h21003">
<title>
<emphasis id="What_is_a_set" effect="bold">

What is a set?

</emphasis>


</title>




<para id="p1025">
According to Oracle, a 

<emphasis id="strong1039" effect="bold">
Set

</emphasis>
 is a 

<emphasis id="em1014" effect="italics">
"collection that contains no duplicate 
elements ... this interface models the mathematical set abstraction."

</emphasis>
 

</para>





<para id="p1026">
An 
object of type 

<emphasis id="strong1040" effect="bold">
Set

</emphasis>
 is typically used to model collections such as Social 
Security numbers, where duplicates are not allowed. 

</para>





</section>
<section id="h21004">
<title>
<emphasis id="What_is_a_list" effect="bold">

What is a list?

</emphasis>


</title>




<para id="p1027">
Also according to Oracle, a 

<emphasis id="strong1041" effect="bold">
List

</emphasis>
 is 

<emphasis id="em1015" effect="italics">
"An ordered collection (also known 
as a sequence). The user of this interface has precise control over where in the 
list each element is inserted. The user can access elements by their integer 
index (position in the list), and search for elements in the list."

</emphasis>
 

</para>





</section>
<section id="h21005">
<title>
<emphasis id="Ordered_is_not_the_same_as_sorted" effect="bold">

Ordered is not the same as sorted

</emphasis>


</title>




<para id="p1028">
Note that an 

<emphasis id="em1016" effect="italics">
ordered

</emphasis>
 collection is not the same as a 

<emphasis id="em1017" effect="italics">
sorted

</emphasis>
 
collection. 

</para>





<para id="p1029">
The fact that the collection is ordered derives from the fact 
that each element in the collection has a specific position specified by an 
index. 

</para>





<para id="p1030">
In a sorted collection, the position of each element is determined 
by its value relative to the values of its predecessors and successors.

</para>





<para id="p1031">
Oracle goes on to say, 

<emphasis id="em1018" effect="italics">
"Unlike sets, lists typically allow duplicate 
elements. More formally, lists typically allow pairs of elements e1 and e2 such 
that e1.equals(e2), and they typically allow multiple null elements if they 
allow null elements at all."

</emphasis>
</para>





</section>
<section id="h21006">
<title>
<emphasis id="Is_ascending_sort_order_always_required" effect="bold">

Is ascending sort order always required?

</emphasis>


</title>




<para id="p1032">
Not all implementations of the 

<emphasis id="strong1042" effect="bold">
Collection

</emphasis>
 interface maintain the 
elements in ascending sort order. Some may, and others do not. For 
example, as discussed above, implementations of the 

<emphasis id="strong1043" effect="bold">
List

</emphasis>
 interface 

<emphasis id="em1019" effect="italics">

(such as 

<emphasis id="strong1044" effect="bold">
ArrayList

</emphasis>
)

</emphasis>
 do not maintain their elements in sorted order at all. 
In other words, the position of an element in an 

<emphasis id="strong1045" effect="bold">
ArrayList

</emphasis>
 does not 
depend on the value of the element.

</para>





<para id="p1033">
On the other hand, implementations of the interface named 

<emphasis id="strong1046" effect="bold">
SortedSet 

</emphasis>



<emphasis id="em1020" effect="italics">
(such as 

<emphasis id="strong1047" effect="bold">
TreeSet

</emphasis>
) 

</emphasis>
and the interface named 

<emphasis id="strong1048" effect="bold">
SortedMap 

</emphasis>
do maintain their elements in 
sorted order. However, that order is not necessarily ascending. 

</para>





<para id="p1034">
When 
an object is instantiated from a class that implements the 

<emphasis id="strong1049" effect="bold">
SortedSet

</emphasis>
 
interface, the sorting order for that object can be established by providing an 
object instantiated from a class that implements the 


<link id="a1029" url="http://cnx.org/contents/5_Rd_R2l">

Comparator

</link>

 
interface. In that case, the author of the class that implements the 

<emphasis id="strong1050" effect="bold">
Comparator

</emphasis>
 
interface determines 
the order imposed on the elements in the collection. 

</para>





<section id="h31001">
<title>
<emphasis id="Does_case_matter_in_String_objects" effect="bold">

Does case matter in String objects?

</emphasis>


</title>




<para id="p1035">
For example, if your 

<emphasis id="strong1051" effect="bold">
SortedSet

</emphasis>
 object contains references to 

<emphasis id="strong1052" effect="bold">
String

</emphasis>
 
objects, the natural ascending sort would take the difference between upper case 
and lower case characters into account. 


</para>





<para id="p1036">
However, you might prefer that 
case be ignored when establishing the sorted order. You can accomplish 
this by providing an object of a class that implements the 

<emphasis id="strong1053" effect="bold">
Comparator

</emphasis>
 
interface and which defines the 

<emphasis id="strong1054" effect="bold">
compare method 

</emphasis>
and the 

<emphasis id="strong1055" effect="bold">
equals

</emphasis>
 method in 
such a way as to eliminate case considerations for comparisons of 

<emphasis id="strong1056" effect="bold">
String

</emphasis>
 
objects.

</para>





</section>
</section>
<section id="h21007">
<title>
<emphasis id="Sub_interfaces_have_more_stipulations" effect="bold">

Sub-interfaces have more stipulations

</emphasis>


</title>




<para id="p1037">
As you progress down the inheritance hierarchy, you find that additional 
stipulations apply at each level of inheritance. As an example, according 
to Oracle, 

<emphasis id="em1021" effect="italics">
"The Set interface places additional stipulations, beyond those 
inherited from the Collection interface, on the contracts of all constructors 
and on the contracts of the 

<emphasis id="strong1057" effect="bold">
add

</emphasis>
, 

<emphasis id="strong1058" effect="bold">
equals

</emphasis>
 and 

<emphasis id="strong1059" effect="bold">
hashCode

</emphasis>
 
methods."

</emphasis>
</para>





<para id="p1038">
The important point is that specific sub-interfaces of the 

<emphasis id="strong1060" effect="bold">
Collection

</emphasis>
 
interface can define requirements that do not apply to all sub-interfaces of the


<emphasis id="strong1061" effect="bold">
Collection

</emphasis>
 interface. 

</para>





<section id="h31002">
<title>
<emphasis id="Stipulations_on_set" effect="bold">

Stipulations on set

</emphasis>


</title>




<para id="p1039">
For example, the 

<emphasis id="strong1062" effect="bold">
add

</emphasis>
 method of the


<emphasis id="strong1063" effect="bold">
Set

</emphasis>
 interface stipulates the following:

</para>





<quote id="blockquote1001" display="block">

	

<emphasis id="em1022" effect="italics">
"Adds the specified element to this set if it is not already present."

</emphasis>
</quote>




<para id="p1040">
On the other hand, the 

<emphasis id="strong1064" effect="bold">
add

</emphasis>
 method of the 

<emphasis id="strong1065" effect="bold">
Collection

</emphasis>
 interface 
simply states:

</para>





<quote id="blockquote1002" display="block">

	

<emphasis id="em1023" effect="italics">
"Ensures that this collection contains the specified element."

</emphasis>
</quote>




<para id="p1041">
Thus, the contract for the 

<emphasis id="strong1066" effect="bold">
add

</emphasis>
 method of an object of a class that 
implements the 

<emphasis id="strong1067" effect="bold">
Set

</emphasis>
 interface is more specialized than the contract for 
the 

<emphasis id="strong1068" effect="bold">
add

</emphasis>
 method of an object of a class that implements the 

<emphasis id="strong1069" effect="bold">
Collection

</emphasis>
 
interface.

</para>





<para id="p1042">
An additional stipulation on the constructor for a 

<emphasis id="strong1070" effect="bold">
Set

</emphasis>
 object is that 
all constructors must create a set that contains no duplicate elements. 

</para>





</section>
<section id="h31003">
<title>
<emphasis id="Stipulations_on_SortedSet" effect="bold">

Stipulations on SortedSet

</emphasis>


</title>




<para id="p1043">
The 

<emphasis id="strong1071" effect="bold">
SortedSet

</emphasis>
 interface extends the 

<emphasis id="strong1072" effect="bold">
Set

</emphasis>
 interface. The 

<emphasis id="strong1073" effect="bold">

SortedSet

</emphasis>
 interface contains the following stipulation that makes it more 
specialized than a 

<emphasis id="strong1074" effect="bold">
Set

</emphasis>
. 

</para>





<para id="p1044">
<emphasis id="em1024" effect="italics">
"A set that further guarantees that its iterator will traverse the set in 
ascending element order, sorted according to the natural ordering of its 
elements (see 

<link id="a1030" url="http://cnx.org/contents/L3qgZmWm">

Comparable

</link>

), or by a 

<emphasis id="strong1075" effect="bold">
Comparator

</emphasis>
 provided at sorted set creation 
time."

</emphasis>
 

</para>





</section>
</section>
<section id="h21008">
<title>
<emphasis id="We_will_end_with_a_quiz" effect="bold">

We will end with a quiz

</emphasis>


</title>




<para id="p1045">
I'm going to finish this module with several questions in the form of a quiz. 
To ensure that this is a learning experience, I will provide an explanation in 
addition to the answer for each question. 

</para>





<section id="h31004">
<title>
<emphasis id="Question_1" effect="bold">

Question 1

</emphasis>


</title>




<para id="p1046">
True or False? A collection that implements the 

<emphasis id="strong1076" effect="bold">
List

</emphasis>
 
interface maintains its elements in ascending alphanumeric order.

</para>





<para id="p1047">
The answer to question 1 is False. Unlike collections that implement 
the 

<emphasis id="strong1077" effect="bold">
SortedSet

</emphasis>
 interface, the order of the elements in a collection that 
implements the 

<emphasis id="strong1078" effect="bold">
List

</emphasis>
 interface is not based on the values of the objects 
referred to by the elements in the list. 

</para>





</section>
<section id="h31005">
<title>
<emphasis id="Question_2" effect="bold">

Question 2

</emphasis>


</title>




<para id="p1048">
True or False? A collection that implements the 

<emphasis id="strong1079" effect="bold">
List

</emphasis>
 
interface is an unordered collection.

</para>





<para id="p1049">
The answer to question 2 is also False. A collection that implements 
the 

<emphasis id="strong1080" effect="bold">
List

</emphasis>
 interface is an 

<emphasis id="strong1081" effect="bold">
<emphasis id="em1025" effect="italics">
ordered

</emphasis>
</emphasis>
 collection 

<emphasis id="em1026" effect="italics">
(also known as a sequence)

</emphasis>
. 
According to Oracle, 

<emphasis id="em1027" effect="italics">
"The user of the interface has precise control over where 
in the list each element is inserted." 

</emphasis>
Elements can be inserted and 
retrieved on the basis of their integer index 

<emphasis id="em1028" effect="italics">
(position in the list)

</emphasis>
 
using the following methods: 

</para>





<list id="ul1011" list-type="bulleted">

	

<item id="li1034">
<emphasis id="strong1082" effect="bold">
add(int index, Object element)

</emphasis>
 

</item>


	

<item id="li1035">
<emphasis id="strong1083" effect="bold">
get(int index)

</emphasis>
</item>




</list>




<para id="p1050">
Valid index values are positive integers that begin with zero. When the


<emphasis id="strong1084" effect="bold">
add

</emphasis>
 method is used to insert an element at a specific position in the 
sequence, the element currently at that position 

<emphasis id="em1029" effect="italics">
(if any)

</emphasis>
 and any 
subsequent elements are shifted toward higher index values to make room for the 
new element.

</para>





<para id="p1051">
Another version of the 

<emphasis id="strong1085" effect="bold">
add

</emphasis>
 method takes a reference to an object as an 
incoming parameter and appends the specified element to the end of the 
collection.

</para>





<para id="p1052">
The 

<emphasis id="strong1086" effect="bold">
get

</emphasis>
 method simply returns the element at the specified position in 
the collection.

</para>





<para id="p1053">
The 

<emphasis id="strong1087" effect="bold">
List

</emphasis>
 interface also declares various other methods that can be 
used to manipulate the contents of the collection.

</para>





</section>
<section id="h31006">
<title>
<emphasis id="Question_3" effect="bold">

Question 3

</emphasis>


</title>




<para id="p1054">
True or False? A collection that implements the 

<emphasis id="strong1088" effect="bold">
List

</emphasis>
 
interface is allowed to contain duplicate values.

</para>





<para id="p1055">
The answer to question 3 is True. Unlike a collection that implements 
the 

<emphasis id="strong1089" effect="bold">
Set

</emphasis>
 interface, a collection that implements the 

<emphasis id="strong1090" effect="bold">
List

</emphasis>
 interface 
is typically allowed to contain duplicate values. More formally, according 
to Oracle, 

<emphasis id="em1030" effect="italics">
"lists typically allow pairs of elements e1 and e2 such that 
e1.equals(e2), and they typically allow multiple null elements if they allow 
null elements at all."

</emphasis>
 

</para>





</section>
<section id="h31007">
<title>
<emphasis id="Question_4" effect="bold">

Question 4

</emphasis>


</title>




<para id="p1056">
True or False? The contracts of the methods in the 

<emphasis id="strong1091" effect="bold">

List

</emphasis>
 interface are the same as the contracts of the methods inherited from 
the 

<emphasis id="strong1092" effect="bold">
Collection

</emphasis>
 interface.

</para>





<para id="p1057">
The answer to question 4 is False. According to Oracle, 

<emphasis id="em1031" effect="italics">
"The 

<emphasis id="strong1093" effect="bold">
List

</emphasis>
 
interface places additional stipulations, beyond those specified in the 

<emphasis id="strong1094" effect="bold">

Collection

</emphasis>
 interface, on the contracts of the 

<emphasis id="strong1095" effect="bold">
iterator

</emphasis>
, 

<emphasis id="strong1096" effect="bold">
add

</emphasis>
,


<emphasis id="strong1097" effect="bold">
remove

</emphasis>
, 

<emphasis id="strong1098" effect="bold">
equals

</emphasis>
, and 

<emphasis id="strong1099" effect="bold">
hashCode

</emphasis>
 methods."

</emphasis>
</para>





<para id="p1058">
For example, the 

<emphasis id="strong1100" effect="bold">
iterator

</emphasis>
 method 

<emphasis id="em1032" effect="italics">
(for both the 

<emphasis id="strong1101" effect="bold">
List

</emphasis>
 and 

<emphasis id="strong1102" effect="bold">

Collection

</emphasis>
 interfaces)

</emphasis>
 returns an iterator over the elements in the 
collection. For the 

<emphasis id="strong1103" effect="bold">
Collection

</emphasis>
 interface, there are no guarantees 
concerning the order in which the elements are returned by the methods of the 

<emphasis id="strong1104" effect="bold">

Iterator

</emphasis>
 object.

</para>





<para id="p1059">
On the other hand, the 

<emphasis id="strong1105" effect="bold">
iterator

</emphasis>
 method for the 

<emphasis id="strong1106" effect="bold">
List

</emphasis>
 interface 
returns an iterator over the elements in the collection in proper sequence, 
where the sequence is determined by the numeric index. In other words, 
when you call the methods of the 

<emphasis id="strong1107" effect="bold">
Iterator

</emphasis>
 object on a 

<emphasis id="strong1108" effect="bold">
List

</emphasis>
, the 
elements will be returned in the proper sequence as determined by a numeric 
index.

</para>





<para id="p1060">
Similarly, according to Oracle, the 

<emphasis id="strong1109" effect="bold">
SortedSet

</emphasis>
 interface 

<emphasis id="em1033" effect="italics">
"guarantees 
that its iterator will traverse the set in ascending element order, sorted 
according to the natural ordering of its elements (see 

<emphasis id="strong1110" effect="bold">
Comparable

</emphasis>
), or by a 


<emphasis id="strong1111" effect="bold">
Comparator

</emphasis>
 provided at sorted set creation time."

</emphasis>
 

</para>





</section>
</section>
</section>
<section id="h11005">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1061">
In this module you learned that all of the implementations of the interfaces in 
the 

<emphasis id="strong1112" effect="bold">
Collection

</emphasis>
 hierarchy implement one of the sub-interfaces of the 

<emphasis id="strong1113" effect="bold">

Collection

</emphasis>
 interface. You learned that a 

<emphasis id="strong1114" effect="bold">
Set

</emphasis>
 object cannot contain 
duplicate elements, but a 

<emphasis id="strong1115" effect="bold">
List

</emphasis>
 object can contain duplicate elements.

</para>





<para id="p1062">
You learned about the difference between 

<emphasis id="em1034" effect="italics">
ordered

</emphasis>
 collections and 

<emphasis id="em1035" effect="italics">

sorted

</emphasis>
 collections. You also learned about 

<emphasis id="em1036" effect="italics">
ascending order

</emphasis>
 and 
the 

<emphasis id="em1037" effect="italics">
natural ordering

</emphasis>
 of objects. In addition, you learned how more 
specialized stipulations are placed on interfaces as you progress down the 
interface inheritance hierarchy of the Java Collections Framework. 

</para>





</section>
<section id="h11006">
<title>
<emphasis id="Whats_next" effect="bold">

What's next?

</emphasis>


</title>




<para id="p1063">
The 

<emphasis id="strong1116" effect="bold">
SortedSet

</emphasis>
 interface 

<emphasis id="em1038" effect="italics">
"guarantees that its iterator will traverse 
the set in ascending element order, sorted according to the natural ordering of 
its elements (see 

<emphasis id="strong1117" effect="bold">
Comparable

</emphasis>
), or by a 

<emphasis id="strong1118" effect="bold">
Comparator

</emphasis>
 provided at sorted set 
creation time." 

</emphasis>
In the next module, I will show you how to use the 

<emphasis id="strong1119" effect="bold">

Comparator

</emphasis>
 interface to control the sorted order of your collections.

</para>





</section>
<section id="h11007">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>




<para id="p1064">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1120" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1012" list-type="bulleted">

					

<item id="li1036">
Module name: Java4060: Duplicate Elements, Ordered 
					Collections, Sorted Collections, and Interface 
					Specialization

</item>


					

<item id="li1037">
File: Java4060.htm


</item>


					

<item id="li1038">
Published: 04/18/13

</item>



				

</list>


				

</note>

			


		









	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1121" effect="bold">
Disclaimers:

</emphasis>
<para id="p1065">
<emphasis id="strong1122" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>



				

<para id="p1066">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>



				

<para id="p1067">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>



				

<para id="p1068">
<emphasis id="strong1123" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>



				

</note>

			


		









<para id="p1069">
-end- 

</para>







</section>
</content>




</document>