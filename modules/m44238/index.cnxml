<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Java3014: Cropping, Flipping, and Combining Pictures</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m44238</md:content-id>
  <md:title>Java3014: Cropping, Flipping, and Combining Pictures</md:title>
  <md:abstract>Learn to crop, flip, and combine pictures.</md:abstract>
  <md:uuid>a7b41fe1-0164-4ef9-a276-e71113b971f6</md:uuid>
</metadata>

<content>






<para id="p1000">
Revised: Sun Apr 03 11:56:24 CDT 2016

</para>




<para id="p1001">
<emphasis id="em1000" effect="italics">
This page is included in the following Books:

</emphasis>
</para>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">

	

<link id="a1000" url="http://cnx.org/contents/dzOvxPFw">


<emphasis id="em1001" effect="italics">
ITSE 2321 - Object-Oriented Programming (Java)

</emphasis>
</link>


</item>


	

<item id="li1001">

	

<link id="a1001" url="http://cnx.org/contents/-2RmHFs_">


<emphasis id="em1002" effect="italics">
Object-Oriented Programming (OOP) with Java 
	

</emphasis>
 
	

</link>

 

</item>




</list>














<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1001" list-type="bulleted">

	

<item id="li1002">
<link id="a1002" target-id="Preface">

Preface

</link>


	

<list id="ul1002" list-type="bulleted">

		

<item id="li1003">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1003" list-type="bulleted">

			

<item id="li1004">
<link id="a1004" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1005">
<link id="a1005" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1006">
<link id="a1006" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1007">
<link id="a1007" target-id="GeneralBackgroundInformation">

General background information

</link>


</item>


	

<item id="li1008">
<link id="a1008" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


</item>


	

<item id="li1009">
<link id="a1009" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1010">
<link id="a1010" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1011">
<link id="a1011" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1012">
<link id="a1012" target-id="Online_video_links">

Online video links

</link>


</item>


	

<item id="li1013">
<link id="a1013" target-id="Miscellaneous">

Miscellaneous

</link>


</item>


	

<item id="li1014">
<link id="a1014" target-id="Complete_program_listing">

Complete program listing

</link>


</item>




</list>


	
	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	
	

<para id="p1002">
This module is one of a series of modules designed to teach you about Object-Oriented Programming (OOP) using Java.

</para>





<para id="p1003">
The program described in this module requires the use of the Guzdial-Ericson 
multimedia class library. You will find download, installation, and usage 
instructions for the library at 

<link id="a1015" url="http://cnx.org/content/m44148/latest/">

Java OOP: The Guzdial-Ericson Multimedia Class Library

</link>

.

</para>



	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1004">
I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the Figures and Listings while you are reading about them.

</para>



	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1004" list-type="bulleted">

		

<item id="li1015">
<link id="a1016" target-id="Figure_1">

Figure 1

</link>

. Raw butterfly image. 

</item>


		

<item id="li1016">
<link id="a1017" target-id="Figure_2">

Figure 2

</link>

. Beach scene with student's name added. 

</item>


		

<item id="li1017">
<link id="a1018" target-id="Figure_3">

Figure 3

</link>

. Composite image.

</item>


		

<item id="li1018">
<link id="a1019" target-id="Figure_4">

Figure 4

</link>

. Required text output. 

</item>


		

<item id="li1019">
<link id="a1020" target-id="Figure_5">

Figure 5

</link>

. Cropped and flipped version of the butterfly image. 

</item>


		

<item id="li1020">
<link id="a1021" target-id="Figure_6">

Figure 6

</link>

. Partially complete version of the output picture.

</item>


	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1005" list-type="bulleted">

		

<item id="li1021">
<link id="a1022" target-id="Listing_1">

Listing 1

</link>

. The driver class named Prob02.

</item>


		

<item id="li1022">
<link id="a1023" target-id="Listing_2">

Listing 2

</link>

. Beginning of the Prob02Runner class. 

</item>


		

<item id="li1023">
<link id="a1024" target-id="Listing_3">

Listing 3

</link>

. Beginning of the run method. 

</item>


		

<item id="li1024">
<link id="a1025" target-id="Listing_4">

Listing 4

</link>

. Beginning of the cropAndFlip method. 

</item>


		

<item id="li1025">
<link id="a1026" target-id="Listing_5">

Listing 5

</link>

. Process using nested loops.

</item>


		

<item id="li1026">
<link id="a1027" target-id="Listing_6">

Listing 6

</link>

. Call the copyPictureWithCrop method from the run method..

</item>


		

<item id="li1027">
<link id="a1028" target-id="Listing_7">

Listing 7

</link>

. Beginning of the method named copyPictureWithCrop.

</item>


		

<item id="li1028">
<link id="a1029" target-id="Listing_8">

Listing 8

</link>

. Process using nested loops.

</item>


		

<item id="li1029">
<link id="a1030" target-id="Listing_9">

Listing 9

</link>

. The remainder of the run method.

</item>


		

<item id="li1030">
<link id="a1031" target-id="Listing_10">

Listing 10

</link>

. Complete program listing.

</item>


	

</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>


	

<para id="p1005">
In this module, you will learn how to:

</para>





<list id="ul1006" list-type="bulleted">

	

<item id="li1031">
Work directly with individual pixels and keep track of coordinate 
	values.

</item>


	

<item id="li1032">
Copy a portion of one picture into a specific location in another 
	picture.

</item>


	

<item id="li1033">
Crop and flip a picture.

</item>




</list>




<para id="p1006">
<emphasis id="strong1000" effect="bold">
Program specifications

</emphasis>
</para>





<para id="p1007">
Write a program named 

<emphasis id="strong1001" effect="bold">
Prob02

</emphasis>
 that uses the class definition shown in


<link id="a1032" target-id="Listing_1">

Listing 1

</link>

 and Ericson's media library along with the 
image files named 

<emphasis id="strong1002" effect="bold">
Prob02a.jpg

</emphasis>
 and 

<emphasis id="strong1003" effect="bold">
Prob02b.jpg

</emphasis>
 to produce the three graphic output 
images shown in 

<link id="a1033" target-id="Figure_1">

Figure 1

</link>

, 

<link id="a1034" target-id="Figure_2">

Figure 2

</link>

, and 


<link id="a1035" target-id="Figure_3">

Figure 3

</link>

.

</para>





<para id="p1008">
<emphasis id="Figure_1" effect="bold">


<emphasis id="strong1004" effect="bold">
<link id="a1036" target-id="Figure_1">

 Figure 1

</link>


</emphasis>
</emphasis>


<emphasis id="strong1005" effect="bold">
 - Raw butterfly image.

</emphasis>
</para>





<para id="p1009">
<media id="media1000" alt="This is an image of a butterfly that will be superimposed on a beach scene to form a composite image." display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/image-a-fab8.jpg" width="310" height="247"/>
</media>


</para>




	


<para id="p1010">
<emphasis id="Figure_2" effect="bold">


<emphasis id="strong1006" effect="bold">
<link id="a1037" target-id="Figure_2">

 Figure 2

</link>


</emphasis>
</emphasis>


<emphasis id="strong1007" effect="bold">
 - Beach scene with student's name added.

</emphasis>
</para>





<para id="p1011">
<media id="media1001" alt="This is an image of a beach scene that will be used to form a composite image." display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/image-b-ab8b.jpg" width="332" height="369"/>
</media>


</para>





	


<para id="p1012">
<emphasis id="Figure_3" effect="bold">


<emphasis id="strong1008" effect="bold">
<link id="a1038" target-id="Figure_3">

 Figure 3

</link>


</emphasis>
</emphasis>


<emphasis id="strong1009" effect="bold">
 - Composite image.

</emphasis>
</para>





<para id="p1013">
<media id="media1002" alt="This is the composite image with the cropped and flipped images of the butterfly superimposed on the beach scene on each side of center." display="block">
<image id="img1002" mime-type="image/jpeg" src="../../media/image-c-f933.jpg" width="332" height="369"/>
</media>


</para>





	



<para id="p1014">
<emphasis id="strong1010" effect="bold">
May define new classes

</emphasis>
</para>





<para id="p1015">
You may define new classes as necessary to cause your program to behave as 
required, but you may not modify the class definition for the class named 

<emphasis id="strong1011" effect="bold">

Prob02

</emphasis>
 given in


<link id="a1039" target-id="Listing_1">

Listing 1

</link>

.

</para>





<para id="p1016">
<emphasis id="strong1012" effect="bold">
The facing butterfly images

</emphasis>
</para>





<para id="p1017">
The two facing images of the butterflies in the final output picture are 
separated by two pixels and those two images as a pair are centered in the 
picture of the beach.

</para>





<para id="p1018">
<emphasis id="strong1013" effect="bold">
Required text output

</emphasis>
</para>





<para id="p1019">
In addition to the three output images mentioned above, your program must 
display your name and the other three lines of text shown in 

<link id="a1040" target-id="Figure_4">

Figure 4

</link>

 on the 
command-line screen:

</para>



	

<table id="table1000" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Figure_4" effect="bold">

Figure 4

</emphasis>

. Required text output.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">


							

<code id="pre1000" display="block">Display your name here.
Picture, filename Prob02a.jpg height 118 width 100
Picture, filename Prob02b.jpg height 240 width 320
Picture, filename None height 101 width 77</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1020">
</para>





</section>
<section id="h11003">
<title>
<emphasis id="GeneralBackgroundInformation" effect="bold">

General background 
information

</emphasis>


</title>




<para id="p1021">
This program copies a rectangular portion of a picture of a butterfly into a 
specific location in a picture of a beach.

</para>





<para id="p1022">
The program also crops the butterfly picture to the same size as the portion 
that was copied into the beach picture and flips the cropped version to cause 
the butterfly to face left instead of facing right.

</para>





<para id="p1023">
Then it copies the cropped and flipped image to a location two pixels to the 
right of the original copy of the butterfly in the beach image.

</para>





<para id="p1024">
The two resulting images of the butterfly within the beach image are 
separated by two pixels, face one another, and are centered in the picture of 
the beach as shown in 

<link id="a1041" target-id="Figure_3">

Figure 3

</link>

.

</para>





<para id="p1025">
<emphasis id="strong1014" effect="bold">
Major evaluation areas

</emphasis>
</para>





<para id="p1026">
In order to successfully write this program, the student must, as a minimum 
be able to:

</para>





<list id="ul1007" list-type="bulleted">

	

<item id="li1034">
Work directly with individual pixels and keep track of coordinate 
	values.

</item>


	

<item id="li1035">
Copy a portion of one picture into a specific location in another 
	picture.

</item>


	

<item id="li1036">
Crop and flip a picture.

</item>




</list>


	
	

</section>
<section id="h11004">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	
	

<para id="p1027">
<emphasis id="strong1015" effect="bold">
Will discuss in fragments

</emphasis>
</para>





<para id="p1028">
I will discuss this program in fragments. A complete listing of the 
program is provided in 

<link id="a1042" target-id="Listing_10">

Listing 10

</link>

 near the end of the 
module.

</para>





<para id="p1029">
<emphasis id="strong1016" effect="bold">
The driver class named Prob02

</emphasis>
</para>





<para id="p1030">
The driver class containing the 

<emphasis id="strong1017" effect="bold">
main

</emphasis>
 method is shown in


<link id="a1043" target-id="Listing_1">

Listing 1

</link>

.

</para>



	

<table id="table1001" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. The driver class named Prob02.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">

				

<code id="pre1001" display="block">import java.awt.Color;

public class Prob02{
  public static void main(String[] args){
    Picture[] pictures = new Prob02Runner().run();

    System.out.println(pictures[0]);
    System.out.println(pictures[1]);
    System.out.println(pictures[2]);
  }//end main method
}//end class Prob02</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1031">
<emphasis id="strong1018" effect="bold">
A reference to an array object

</emphasis>
</para>





<para id="p1032">
The call to the 

<emphasis id="strong1019" effect="bold">
run

</emphasis>
 method in 

<link id="a1044" target-id="Listing_1">

Listing 1

</link>

 may 
be new to you. This call expects to receive a reference to an array object 
of type 

<emphasis id="strong1020" effect="bold">
Picture[]

</emphasis>
 
as a return value.

</para>





<para id="p1033">
<emphasis id="strong1021" effect="bold">
Save return value in variable named pictures

</emphasis>
</para>





<para id="p1034">
The return value from the 

<emphasis id="strong1022" effect="bold">
run

</emphasis>
 method is stored in the local reference 
variable named 

<emphasis id="strong1023" effect="bold">
pictures

</emphasis>
.

</para>





<para id="p1035">
<emphasis id="strong1024" effect="bold">
Extract and print references to Picture objects

</emphasis>
</para>





<para id="p1036">
Then the reference variable is used to extract references to the individual


<emphasis id="strong1025" effect="bold">
Picture

</emphasis>
 objects encapsulated in the array. Those references are 
passed to the 

<emphasis id="strong1026" effect="bold">
println

</emphasis>
 method causing the last three lines of text shown 
in 

<link id="a1045" target-id="Figure_4">

Figure 4

</link>

 to be displayed on the command line screen.

</para>





<para id="p1037">
<emphasis id="strong1027" effect="bold">
Beginning of the Prob02Runner class

</emphasis>
</para>





<para id="p1038">
The class named 

<emphasis id="strong1028" effect="bold">
Prob02Runner

</emphasis>
 begins in 

<link id="a1046" target-id="Listing_2">

Listing 2

</link>

, which shows the 
constructor for the class.

</para>



	

<table id="table1002" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. Beginning of the Prob02Runner class.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">

				

<code id="pre1002" display="block">class Prob02Runner{

  public Prob02Runner(){//constructor
    System.out.println("Display your name here.");
  }//end constructor</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1039">
The constructor simply causes the student's name to be displayed on the 
	command line screen, producing the first line of output text shown in
	

<link id="a1047" target-id="Figure_4">

Figure 4

</link>

.

</para>





<para id="p1040">
<emphasis id="strong1029" effect="bold">
Beginning of the run method

</emphasis>
</para>





<para id="p1041">
The 

<emphasis id="strong1030" effect="bold">
run

</emphasis>
 method, that was called in 

<link id="a1048" target-id="Listing_1">

Listing 1

</link>

 begins in 


<link id="a1049" target-id="Listing_3">

Listing 3

</link>

.

</para>



	

<table id="table1003" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. Beginning of the run method.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">

				

<code id="pre1003" display="block">  public Picture[] run(){
    Picture picA = new Picture("Prob02a.jpg");
    picA.explore();
    
    Picture picB = new Picture("Prob02b.jpg");
    picB.addMessage("Display your name here.",10,20);
    picB.explore();

    Picture picC = cropAndFlip(picA,4,5,80,105);</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1042">
<link id="a1050" target-id="Listing_3">

Listing 3

</link>

 instantiates two 

<emphasis id="strong1031" effect="bold">
Picture

</emphasis>
 
	objects from image files and displays them by calling the 

<emphasis id="strong1032" effect="bold">
explore

</emphasis>
 
	method on each 

<emphasis id="strong1033" effect="bold">
Picture

</emphasis>
 object. In addition, the student's name 
	is added near the upper-left corner of the beach image. This code 
	results in the images shown in 

<link id="a1051" target-id="Figure_1">

Figure 1

</link>

 and
	

<link id="a1052" target-id="Figure_2">

Figure 2

</link>

.

</para>





<para id="p1043">
<emphasis id="strong1034" effect="bold">
Call the cropAndFlip method

</emphasis>
</para>





<para id="p1044">
Then 

<link id="a1053" target-id="Listing_3">

Listing 3

</link>

 calls the 

<emphasis id="strong1035" effect="bold">
cropAndFlip

</emphasis>
 method 
passing the reference to the butterfly image of 

<link id="a1054" target-id="Figure_1">

 Figure 1

</link>

, along with some other 
information as parameters. The return value is stored in a new local 
reference variable of type 

<emphasis id="strong1036" effect="bold">
Picture

</emphasis>
 named 

<emphasis id="strong1037" effect="bold">
picC

</emphasis>
.

</para>





<para id="p1045">
<emphasis id="strong1038" effect="bold">
Put discussion of the run method on hold

</emphasis>
</para>





<para id="p1046">
I will put the discussion of the 

<emphasis id="strong1039" effect="bold">
run

</emphasis>
 method on temporary hold at this 
point and explain the method named 

<emphasis id="strong1040" effect="bold">
cropAndFlip

</emphasis>
, which begins in


<link id="a1055" target-id="Listing_4">

Listing 4

</link>

.

</para>





<para id="p1047">
<emphasis id="strong1041" effect="bold">
Beginning of the cropAndFlip method

</emphasis>
</para>





<para id="p1048">
The 

<emphasis id="strong1042" effect="bold">
cropAndFlip 

</emphasis>
method crops a picture to the specified coordinate 
values and flips it around a vertical line at its center.

</para>



	

<table id="table1004" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. Beginning of the cropAndFlip method.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">

				

<code id="pre1004" display="block">
  private Picture cropAndFlip(Picture pic,
                              int x1,int y1,
                              int x2,int y2){
    Picture output = new Picture(x2-x1+1,y2-y1+1);

    int width = output.getWidth();
    
    Pixel pixel = null;
    Color color = null;</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1049">
<emphasis id="strong1043" effect="bold">
Incoming parameters

</emphasis>
</para>





<para id="p1050">
In addition to a reference to the picture to be processed, the method 
receives four incoming integer values as parameters. The parameters named


<emphasis id="strong1044" effect="bold">
x1

</emphasis>
 and 

<emphasis id="strong1045" effect="bold">
y1

</emphasis>
 specify the coordinates of the upper-left corner 
of a rectangular area of the picture that is to be retained in the output.

</para>





<para id="p1051">
The parameters named 

<emphasis id="strong1046" effect="bold">
x2

</emphasis>
 and 

<emphasis id="strong1047" effect="bold">
y2

</emphasis>
 specify the coordinates of the 
lower-right corner of the rectangular area of the picture that is to be retained 
in the output.

</para>





<para id="p1052">
<emphasis id="strong1048" effect="bold">
An empty Picture object

</emphasis>
</para>





<para id="p1053">



<link id="a1056" target-id="Listing_4">

Listing 4

</link>

 begins by creating an empty 

<emphasis id="strong1049" effect="bold">
Picture

</emphasis>
 object of the correct 
size to hold the cropped image. A reference to the empty picture is saved 
in the local reference variable named 

<emphasis id="strong1050" effect="bold">
output

</emphasis>
.

</para>





<para id="p1054">
Then


<link id="a1057" target-id="Listing_4">

Listing 4

</link>

 gets and saves the width of the output 
picture.

</para>





<para id="p1055">
Following this,


<link id="a1058" target-id="Listing_4">

Listing 4

</link>

 declares two local working variables named 

<emphasis id="strong1051" effect="bold">

pixel

</emphasis>



<emphasis id="em1003" effect="italics">
(of type 

<emphasis id="strong1052" effect="bold">
Pixel

</emphasis>
)

</emphasis>
 and 

<emphasis id="strong1053" effect="bold">
color

</emphasis>
 

<emphasis id="em1004" effect="italics">
(of type 

<emphasis id="strong1054" effect="bold">
Color

</emphasis>
)

</emphasis>
.

</para>





<para id="p1056">
<emphasis id="strong1055" effect="bold">
Process using nested loops

</emphasis>
</para>





<para id="p1057">
<link id="a1059" target-id="Listing_5">

Listing 5

</link>

 uses a pair of nested 

<emphasis id="strong1056" effect="bold">
for

</emphasis>
 loops to cause the output picture 
to be a cropped version of the picture received as an incoming parameter. 
The cropped image is flipped around its center.

</para>



	

<table id="table1005" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

. Process using nested loops.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">

				

<code id="pre1005" display="block">    for(int col = x1;col &lt; (x2+1);col++){
      for(int row = y1;row &lt; (y2+1);row++){
        color = pic.getPixel(col,row).getColor();
        pixel = output.getPixel(width-col+x1-1,row-y1);
        pixel.setColor(color);
      }//end inner loop
    }//end outer loop

    return output;
  }//end cropAndFlip method</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1058">
The code in 

<link id="a1060" target-id="Listing_5">

Listing 5

</link>

 copies the pixel colors of 
	the selected pixels of the incoming image to the pixels of the output image, 
	flipping the image around its center line in the process.

</para>





<para id="p1059">
<emphasis id="strong1057" effect="bold">
Cropped and flipped version of the butterfly image

</emphasis>
</para>





<para id="p1060">
If you display the picture referred to by 

<emphasis id="strong1058" effect="bold">
output

</emphasis>
 in 

<link id="a1061" target-id="Listing_5">

Listing 5

</link>

, 
you will get the image shown in 

<link id="a1062" target-id="Figure_5">

Figure 5

</link>

.

</para>





<para id="p1061">
<emphasis id="Figure_5" effect="bold">


<emphasis id="strong1059" effect="bold">
<link id="a1063" target-id="Figure_5">

 Figure 5

</link>


</emphasis>
</emphasis>


<emphasis id="strong1060" effect="bold">
 - Cropped and flipped version of the butterfly image.

</emphasis>
</para>





<para id="p1062">
<media id="media1003" alt="This is an image of the butterfly that has been cropped to eliminate extraneous material and flipped horizontally." display="block">
<image id="img1003" mime-type="image/jpeg" src="../../media/image-d-168e.jpg" width="310" height="231"/>
</media>


</para>




	



<para id="p1063">
<emphasis id="strong1061" effect="bold">
Compare with the original butterfly picture

</emphasis>
</para>





<para id="p1064">
If you compare 

<link id="a1064" target-id="Figure_5">

Figure 5

</link>

 with 

<link id="a1065" target-id="Figure_1">


Figure 1

</link>

, you will see that pixels on the outer edges of 

<link id="a1066" target-id="Figure_1">


Figure 1

</link>

 have been discarded and the resulting image has been flipped around 
its centerline.

</para>





<para id="p1065">
<emphasis id="strong1062" effect="bold">
End of the cropAndFlip method

</emphasis>
</para>





<para id="p1066">
<link id="a1067" target-id="Figure_5">

Figure 5

</link>

 returns a reference to the new image and 
ends the method named 

<emphasis id="strong1063" effect="bold">
cropAndFlip

</emphasis>
. The returned value is stored in the variable named 

<emphasis id="strong1064" effect="bold">

picC

</emphasis>
 in 

<link id="a1068" target-id="Listing_3">

Listing 3

</link>

.

</para>





<para id="p1067">
<emphasis id="strong1065" effect="bold">
Original image not modified

</emphasis>
</para>





<para id="p1068">
Note that the code in the 

<emphasis id="strong1066" effect="bold">
cropAndFlip

</emphasis>
 method does not modify the 
original image of the butterfly. Instead, it extracts pixel data from the 
original image to produce a new image. When control returns to the 

<emphasis id="strong1067" effect="bold">
run

</emphasis>
 
method in 

<link id="a1069" target-id="Listing_3">

Listing 3

</link>

, a reference to the new image is 
stored in the variable named 

<emphasis id="strong1068" effect="bold">
picC

</emphasis>
.

</para>





<para id="p1069">
<emphasis id="strong1069" effect="bold">
Call the copyPictureWithCrop method from the run method

</emphasis>
</para>





<para id="p1070">
Control has now returned to the 

<emphasis id="strong1070" effect="bold">
run

</emphasis>
 method, picking up where


<link id="a1070" target-id="Listing_3">

Listing 3

</link>

 left off. The next statement in the 

<emphasis id="strong1071" effect="bold">

run

</emphasis>
 method is shown in 

<link id="a1071" target-id="Listing_6">

Listing 6

</link>

.

</para>




	

<table id="table1006" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

. Call the copyPictureWithCrop method from the run method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">

				

<code id="pre1006" display="block">    copyPictureWithCrop(picA,picB,82,70,4,5,77,101);</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1071">
<emphasis id="strong1072" effect="bold">
Put the run method on hold again

</emphasis>
</para>





<para id="p1072">
Once again, I will put the 

<emphasis id="strong1073" effect="bold">
run

</emphasis>
 method on hold while I explain the 
method named 

<emphasis id="strong1074" effect="bold">
copyPictureWithCrop

</emphasis>
, which begins in 

<link id="a1072" target-id="Listing_7">


Listing 7

</link>

.

</para>





<para id="p1073">
<emphasis id="strong1075" effect="bold">
Beginning of the method named copyPictureWithCrop

</emphasis>
</para>





<para id="p1074">
The first two incoming parameters named 

<emphasis id="strong1076" effect="bold">
source

</emphasis>
 and 

<emphasis id="strong1077" effect="bold">
dest

</emphasis>
 are 
references to a source picture and a destination picture.

</para>





<para id="p1075">
When the method is called in 

<link id="a1073" target-id="Listing_6">

Listing 6

</link>

, the source picture is the original 
butterfly picture shown in 

<link id="a1074" target-id="Figure_1">

Figure 1

</link>

 and the destination picture is the beach 
picture shown in 

<link id="a1075" target-id="Figure_2">

Figure 2

</link>

.

</para>



	

<table id="table1007" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

. Beginning of the method named copyPictureWithCrop.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">

				

<code id="pre1007" display="block">  private void copyPictureWithCrop(
           Picture source,
           Picture dest,
           int xOff,
           int yOff,
           int xCoor,
           int yCoor,
           int width,
           int height){

    //Confirm that source will fit in destination
    if(((width+xOff) &lt;= dest.getWidth()) &amp;&amp;
         ((height+yOff) &lt;= dest.getHeight())){
         
      Pixel pixel = null;
      Color color = null;</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1076">
<emphasis id="strong1078" effect="bold">
Copy source to destination

</emphasis>
</para>





<para id="p1077">
The method named 

<emphasis id="strong1079" effect="bold">
copyPictureWithCrop 

</emphasis>
copies part of the source picture 
into the destination picture with an offset on both axes after first confirming 
that the part will fit. The method does nothing if the part won't fit.

</para>





<para id="p1078">
The copy process causes selected pixel colors in the destination picture to 
be replaced by pixel colors from the source picture.

</para>





<para id="p1079">
<emphasis id="strong1080" effect="bold">
The offset values

</emphasis>
</para>





<para id="p1080">
The next two parameters named 

<emphasis id="strong1081" effect="bold">
xOff

</emphasis>
 and 

<emphasis id="strong1082" effect="bold">
yOff

</emphasis>
 in 

<link id="a1076" target-id="Listing_7">


Listing 7

</link>

 specify the location in the destination picture where the 
upper-left corner of the cropped source picture is to be located.

</para>





<para id="p1081">
The statement in 

<link id="a1077" target-id="Listing_6">

Listing 6

</link>

 passes the values (82,70) 
for these two values. This is the location of the upper left corner of the 
left-most butterfly image in 

<link id="a1078" target-id="Figure_3">

Figure 3

</link>

.

</para>







	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1083" effect="bold">
Not really cropped

</emphasis>

				

<para id="p1082">
For clarity, I will refer to this as a cropped source picture 
				even though the program doesn't actually save a cropped version 
				of the picture as was the case with the 

<emphasis id="strong1084" effect="bold">
cropAndFlip

</emphasis>
 
				method.

</para>



				

<para id="p1083">
The program simply copies a rectangular portion of the source 
				picture into the destination picture.

</para>



				

</note>

			


		



	



	

<para id="p1084">
<emphasis id="strong1085" effect="bold">
Upper-left cropping corner

</emphasis>
</para>





<para id="p1085">
The parameters named 

<emphasis id="strong1086" effect="bold">
xCoor

</emphasis>
 and 

<emphasis id="strong1087" effect="bold">
yCoor

</emphasis>
 in 

<link id="a1079" target-id="Listing_7">


Listing 7

</link>

 specify the upper-left corner of the rectangular area of pixels 
that is to be preserved when the source image is cropped.

</para>





<para id="p1086">
Coordinate values of (4,5) are passed for these two values when the method is 
called in 

<link id="a1080" target-id="Listing_6">

Listing 6

</link>

.

</para>





<para id="p1087">
<emphasis id="strong1088" effect="bold">
Same values as 

<link id="a1081" target-id="Listing_3">

 Listing 3

</link>


</emphasis>
</para>





<para id="p1088">
Note that these are the same two values that were passed for this purpose 
when the 

<emphasis id="strong1089" effect="bold">
cropAndFlip

</emphasis>
 method was called in 

<link id="a1082" target-id="Listing_3">

Listing 3

</link>

.

</para>





<para id="p1089">
<emphasis id="strong1090" effect="bold">
Two ways to specify a rectangle

</emphasis>
</para>





<para id="p1090">
There are two commonly used ways to specify a rectangular area in 
programming. One way is to specify the coordinates of the upper-left and 
bottom right corners. This is the approach used in the 

<emphasis id="strong1091" effect="bold">
cropAndFlip

</emphasis>
 
method in 

<link id="a1083" target-id="Listing_4">

Listing 4

</link>

.

</para>





<para id="p1091">
The other way is to specify the coordinates of the upper-left corner and then 
to specify the width and the height. This is the approach used in the 

<emphasis id="strong1092" effect="bold">

copyPictureWithCrop

</emphasis>
 method in 

<link id="a1084" target-id="Listing_7">

Listing 7

</link>

.

</para>





<para id="p1092">
<emphasis id="strong1093" effect="bold">
The width and height parameters

</emphasis>
</para>





<para id="p1093">
The parameters named 

<emphasis id="strong1094" effect="bold">
width

</emphasis>
 and 

<emphasis id="strong1095" effect="bold">
height

</emphasis>
 in 

<link id="a1085" target-id="Listing_7">


Listing 7

</link>

 specify the width and height of the rectangular area of pixels 
that is to be preserved when the source picture is cropped.

</para>





<para id="p1094">
If you compare the width and height parameter values passed in


<link id="a1086" target-id="Listing_6">

Listing 6

</link>

 with the coordinate values passed in


<link id="a1087" target-id="Listing_3">

Listing 3

</link>

, you will see that the same rectangular area 
of the butterfly image is being preserved after cropping in both cases.

</para>





<para id="p1095">
<emphasis id="strong1096" effect="bold">
Confirm that the cropped image will fit

</emphasis>
</para>





<para id="p1096">
<link id="a1088" target-id="Listing_7">

Listing 7

</link>

 begins by confirming that the cropped 
rectangular area of the source picture will fit within the destination picture 
when placed at the specified location. If the conditional clause of the 

<emphasis id="strong1097" effect="bold">

if

</emphasis>
 statement 
returns true, then the code in the body of the statement will be executed. 
If not, control bypasses the body of the 

<emphasis id="strong1098" effect="bold">
if

</emphasis>
 statement and the 
source picture will not be copied into the destination picture.

</para>





<para id="p1097">
<emphasis id="strong1099" effect="bold">
Process using nested for loops

</emphasis>
</para>





<para id="p1098">
As was the case in 

<link id="a1089" target-id="Listing_4">

Listing 4

</link>

, 

<link id="a1090" target-id="Listing_7">


Listing 7

</link>

 declares two working variables named 

<emphasis id="strong1100" effect="bold">
pixel

</emphasis>
 and 

<emphasis id="strong1101" effect="bold">
color

</emphasis>
.

</para>





<para id="p1099">
The variables named 

<emphasis id="strong1102" effect="bold">
pixel

</emphasis>
 and 

<emphasis id="strong1103" effect="bold">
color

</emphasis>
 are used along with various 
parameter values in the pair of nested 

<emphasis id="strong1104" effect="bold">
for

</emphasis>
 loops shown in


<link id="a1091" target-id="Listing_8">

Listing 8

</link>

 to crop the source picture and to copy the 
cropped source picture into the destination picture at the specified location.

</para>



	

<table id="table1008" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1008">

			

<row id="tr1016">

				

<entry id="th1008">
<emphasis id="Listing_8" effect="bold">

Listing 8

</emphasis>

. Process using nested loops.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1008">

			

<row id="tr1017">

				

<entry id="td1008">

				

<code id="pre1008" display="block">      for(int col = 0;col &lt; width;col++){
        for(int row = 0;row &lt; height;row++){
          color = source.getPixel(
                      col + xCoor,row + yCoor).getColor();
          pixel = dest.getPixel(col+xOff,row+yOff);
          pixel.setColor(color);
        }//end inner loop
      }//end outer loop
      
    }//end if
    
  }//end copyPictureWithCrop method
  
}//end class Prob02Runner</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1100">
<emphasis id="strong1105" effect="bold">
Not as complicated as it looks

</emphasis>
</para>





<para id="p1101">
Although the arithmetic operations involved in


<link id="a1092" target-id="Listing_8">

Listing 8

</link>

 can be daunting, the code in


<link id="a1093" target-id="Listing_8">

Listing 8

</link>

 is doing nothing more than replacing selected 
pixel colors in the destination picture with selected pixel colors from the 
source picture.

</para>





<para id="p1102">
<emphasis id="strong1106" effect="bold">
Partially complete version of the output picture.

</emphasis>
</para>





<para id="p1103">
If you were to display the destination picture before returning control back 
to the 

<emphasis id="strong1107" effect="bold">
run

</emphasis>
 method in


<link id="a1094" target-id="Listing_8">

Listing 8

</link>

, you would see the image shown in 


<link id="a1095" target-id="Figure_6">

Figure 6

</link>

.

</para>





<para id="p1104">
<emphasis id="Figure_6" effect="bold">


<emphasis id="strong1108" effect="bold">
<link id="a1096" target-id="Figure_6">

 Figure 6

</link>


</emphasis>
</emphasis>


<emphasis id="strong1109" effect="bold">
 - Partially complete version of the output picture.

</emphasis>
</para>





<para id="p1105">
<media id="media1004" alt="This image shows a cropped version of the original butterfly image superimposed on the beach scene immediately to the left of center." display="block">
<image id="img1004" mime-type="image/jpeg" src="../../media/image-e-67e2.jpg" width="332" height="370"/>
</media>


</para>




	


<para id="p1106">
At this point, only one cropped version of the butterfly image has been 
copied into the beach image.

</para>





<para id="p1107">
<emphasis id="strong1110" effect="bold">
Return control to the run method

</emphasis>
</para>





<para id="p1108">
The 

<emphasis id="strong1111" effect="bold">
copyPictureWithCrop

</emphasis>
 method terminates in 

<link id="a1097" target-id="Listing_8">


Listing 8

</link>

 and returns control to the 

<emphasis id="strong1112" effect="bold">
run

</emphasis>
 method, picking up where 

<link id="a1098" target-id="Listing_6">

Listing 
6

</link>

 left off.

</para>





<para id="p1109">
<emphasis id="strong1113" effect="bold">
The remainder of the run method

</emphasis>
</para>





<para id="p1110">
The remainder of the 

<emphasis id="strong1114" effect="bold">
run

</emphasis>
 method is shown in 

<link id="a1099" target-id="Listing_9">


Listing 9

</link>

.

</para>



	

<table id="table1009" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1009">

			

<row id="tr1018">

				

<entry id="th1009">
<emphasis id="Listing_9" effect="bold">

Listing 9

</emphasis>

. The remainder of the run method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1009">

			

<row id="tr1019">

				

<entry id="td1009">

				

<code id="pre1009" display="block">    copyPictureWithCrop(picC,picB,161,70,0,0,77,101);

    picB.explore();

    Picture[] output = {picA,picB,picC};
    return output;
  }//end run</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1111">
<emphasis id="strong1115" effect="bold">
Call the copyPictureWithCrop method again

</emphasis>
</para>





<para id="p1112">
 

<link id="a1100" target-id="Listing_9">


Listing 9

</link>

 begins by calling the 

<emphasis id="strong1116" effect="bold">
copyPictureWithCrop

</emphasis>
 method again. 
This time, however, the picture shown in 

<link id="a1101" target-id="Figure_5">

Figure 5

</link>

 is 
passed as the source image with the same picture as before being passed as the 
destination image.

</para>





<para id="p1113">
<emphasis id="strong1117" effect="bold">
The offset coordinates

</emphasis>
</para>





<para id="p1114">
In this case, the offset coordinate values specify the upper-left corner of 
the right-most butterfly image in 

<link id="a1102" target-id="Figure_3">

Figure 3

</link>

.

</para>





<para id="p1115">
<emphasis id="strong1118" effect="bold">
The cropping parameters

</emphasis>
</para>





<para id="p1116">
The final four parameters that are passed in 

<link id="a1103" target-id="Listing_9">

Listing 9

</link>

 
specify that the entire source picture is to be copied into the destination 
picture.

</para>





<para id="p1117">
<emphasis id="strong1119" effect="bold">
Display the destination picture

</emphasis>
</para>





<para id="p1118">
When the 

<emphasis id="strong1120" effect="bold">
copyPictureWithCrop

</emphasis>
 method returns, 

<link id="a1104" target-id="Listing_9">


Listing 9

</link>

 calls the 

<emphasis id="strong1121" effect="bold">
explore

</emphasis>
 method to display the current state of 
the destination picture. The result is shown in 

<link id="a1105" target-id="Figure_3">

Figure 
3

</link>

.

</para>





<para id="p1119">
<emphasis id="strong1122" effect="bold">
A new array object

</emphasis>
</para>





<para id="p1120">
Finally, 

<link id="a1106" target-id="Listing_9">

Listing 9

</link>

 instantiates a new array object, 
populates it with references to three 

<emphasis id="strong1123" effect="bold">
Picture

</emphasis>
 objects, and returns control to the 

<emphasis id="strong1124" effect="bold">
main

</emphasis>
 
method code in 

<link id="a1107" target-id="Listing_1">

Listing 1

</link>

 returning a reference to the 
array object in the process.

</para>





<para id="p1121">
The code in 

<link id="a1108" target-id="Listing_1">

Listing 1

</link>

 saves the reference to the 
array object in the variable named 

<emphasis id="strong1125" effect="bold">
pictures

</emphasis>
.

</para>





<para id="p1122">
<emphasis id="strong1126" effect="bold">
Pass Picture object references to println method

</emphasis>
</para>





<para id="p1123">
Then 

<link id="a1109" target-id="Listing_1">

Listing 1

</link>

 extracts and passes each of the three


<emphasis id="strong1127" effect="bold">
Picture

</emphasis>
 object 
references to the 

<emphasis id="strong1128" effect="bold">
println

</emphasis>
 method causing the last three lines of text 
shown in 

<link id="a1110" target-id="Figure_4">

Figure 4

</link>

 to be displayed on the command-line 
screen.

</para>





<para id="p1124">
The second line of output text (

<emphasis id="strong1129" effect="bold">
picA

</emphasis>
) describes the raw butterfly 
image shown in 

<link id="a1111" target-id="Figure_1">

Figure 1

</link>

.

</para>





<para id="p1125">
The third line of output text for (

<emphasis id="strong1130" effect="bold">
picB

</emphasis>
) describes the beach scene 
shown in 

<link id="a1112" target-id="Figure_2">

Figure 2

</link>

 and 

<link id="a1113" target-id="Figure_3">

Figure 3

</link>

.

</para>





<para id="p1126">
The last line of output text (

<emphasis id="strong1131" effect="bold">
picC

</emphasis>
) describes the cropped and flipped 
version of the butterfly image shown in 

<link id="a1114" target-id="Figure_5">

Figure 5

</link>

.

</para>






</section>
<section id="h11005">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>





<para id="p1127">
I encourage you to copy the code from 

<link id="a1115" target-id="Listing_10">

Listing 10

</link>

. 
Compile the code and execute it. Experiment with the code, making changes, and 
observing the results of your changes. Make certain that you can explain why 
your changes behave as they do.

</para>





<para id="p1128">
Click 

<link id="a1116" url="Prob02a.jpg">

here

</link>

 and 

<link id="a1117" url="Prob02b.jpg">

here

</link>

 to 
download the two required input image files.

</para>



	

</section>
<section id="h11006">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1129">
In this module, you learned how to:

</para>





<list id="ul1008" list-type="bulleted">

	

<item id="li1037">
Work directly with individual pixels and keep track of coordinate 
	values.

</item>


	

<item id="li1038">
Copy a portion of one picture into a specific location in another 
	picture.

</item>


	

<item id="li1039">
Crop and flip a picture.

</item>




</list>




</section>
<section id="h11007">
<title>
<emphasis id="Whats_next" effect="bold">

What's next?

</emphasis>


</title>




<para id="p1130">
You will learn to write a program to do 
green-screen processing in the next module.

</para>






</section>
<section id="h11008">
<title>
<emphasis id="Online_video_links" effect="bold">

Online video links

</emphasis>


</title>





<para id="p1131">
While not a requirement of the course, you can select the following links to view 
optional online video lectures on the material in this 
module.

</para>





<list id="ul1009" list-type="bulleted">

	

<item id="li1040">
<link id="a1118" url="http://www.youtube.com/playlist?list=PL3D7CCC0D884E2EF4">

ITSE 
	2321 Lecture 07

</link>


<list id="ul1010" list-type="bulleted">

		

<item id="li1041">
<link id="a1119" url="http://www.youtube.com/watch?v=AY1oMeuFWwY">

Part01

</link>


</item>


		

<item id="li1042">
<link id="a1120" url="http://www.youtube.com/watch?v=IWNm1xWA7wQ">

Part02

</link>


</item>


		

<item id="li1043">
<link id="a1121" url="http://www.youtube.com/watch?v=P0thqN0Fofs">

Part03

</link>


</item>


	

</list>


	

</item>




</list>


	

</section>
<section id="h11009">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1132">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1132" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1011" list-type="bulleted">

					

<item id="li1044">
Module name: Java OOP: Cropping, Flipping, and Combining Pictures

</item>


					

<item id="li1045">
File: Java3014.htm


</item>


					

<item id="li1046">
Published: 08/01/12

</item>



				

</list>


				

</note>

			


		



	





	

<note id="note1002" type="">


		


			


				

<emphasis id="strong1133" effect="bold">
Disclaimers:

</emphasis>
<para id="p1133">
<emphasis id="strong1134" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>



				

<para id="p1134">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>



				

<para id="p1135">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>



				

<para id="p1136">
<emphasis id="strong1135" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>



				

</note>

			


		



	





</section>
<section id="h11010">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1137">
A complete listing of the program discussed in this module is shown in


<link id="a1122" target-id="Listing_10">

Listing 10

</link>

 below.

</para>











<table id="table1010" summary="A table." pgwide="0">
<tgroup cols="1">





<thead id="thead1010">



<row id="tr1020">



<entry id="th1010">



<emphasis id="Listing_10" effect="bold">

Listing 10

</emphasis>

. 

<emphasis id="strong1136" effect="bold">
Complete program listing.

</emphasis>



</entry>



</row>



</thead>





<tbody id="tbody1010">



<row id="tr1021">



<entry id="td1010">



<code id="pre1010" display="block">/*File Prob02 Copyright 2008 R.G.Baldwin
Revised 12/16/08
*********************************************************/
import java.awt.Color;

public class Prob02{
  public static void main(String[] args){
    Picture[] pictures = new Prob02Runner().run();

    System.out.println(pictures[0]);
    System.out.println(pictures[1]);
    System.out.println(pictures[2]);
  }//end main method
}//end class Prob02
//======================================================//

class Prob02Runner{

  public Prob02Runner(){//constructor
    System.out.println("Display your name here.");
  }//end constructor
  //----------------------------------------------------//

  public Picture[] run(){
    Picture picA = new Picture("Prob02a.jpg");
    picA.explore();
    Picture picB = new Picture("Prob02b.jpg");
    picB.addMessage("Display your name here.",10,20);
    picB.explore();

    Picture picC = cropAndFlip(picA,4,5,80,105);

    copyPictureWithCrop(picA,picB,82,70,4,5,77,101);
    copyPictureWithCrop(picC,picB,161,70,0,0,77,101);


    picB.explore();

    Picture[] output = {picA,picB,picC};
    return output;
  }//end run
  //----------------------------------------------------//

  //Crops a picture to the specified coordinate values and
  // flips it around a vertical line at its center.
  private Picture cropAndFlip(Picture pic,int x1,int y1,
                              int x2,int y2){
    Picture output = new Picture(x2-x1+1,y2-y1+1);

    int width = output.getWidth();
    Pixel pixel = null;
    Color color = null;
    for(int col = x1;col &lt; (x2+1);col++){
      for(int row = y1;row &lt; (y2+1);row++){
        color = pic.getPixel(col,row).getColor();
        pixel = output.getPixel(width-col+x1-1,row-y1);
        pixel.setColor(color);
      }//end inner loop
    }//end outer loop

    return output;
  }//end crop and flip
  //----------------------------------------------------//

  //Copies part of the source picture into the destination
  // picture with an offset on both axes after first
  // confirming that the part will fit. Does nothing if it
  // won't fit.
  private void copyPictureWithCrop(
           Picture source,Picture dest,int xOff,
                                       int yOff,
                                       int xCoor,
                                       int yCoor,
                                       int width,
                                       int height){

    //Confirm that source will fit in destination
    if(((width+xOff) &lt;= dest.getWidth()) &amp;&amp;
         ((height+yOff) &lt;= dest.getHeight())){
      Pixel pixel = null;
      Color color = null;
      for(int col = 0;col &lt; width;col++){
        for(int row = 0;row &lt; height;row++){
          color = source.getPixel(
                      col + xCoor,row + yCoor).getColor();
          pixel = dest.getPixel(col+xOff,row+yOff);
          pixel.setColor(color);
        }//end inner loop
      }//end outer loop
    }//end if
  }//end copyPictureWithCrop method
}//end class Prob02Runner</code>





</entry>



</row>



</tbody>





</tgroup>
</table>




<para id="p1138">
-end- 

</para>







</section>
</content>




</document>