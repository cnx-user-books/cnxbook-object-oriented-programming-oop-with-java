<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Java4150: The toArray Method, Part 1</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m46197</md:content-id>
  <md:title>Java4150: The toArray Method, Part 1</md:title>
  <md:abstract>This module shows you how to use the simpler version of the overloaded toArray method that is declared in the Collection interface. The module also explains why you need to exercise care when using the elements stored in the resulting array to avoid corrupting the state of the objects referred to by the elements in the collection.</md:abstract>
  <md:uuid>926813d2-ea55-43ef-acaa-0fd9f297ba08</md:uuid>
</metadata>

<content>






<para id="p1000">
Revised: Fri Apr 08 11:29:38 CDT 2016

</para>




<para id="p1001">
<emphasis id="em1000" effect="italics">
This page is included in the following Books:

</emphasis>
</para>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">

	

<link id="a1000" url="http://cnx.org/contents/dzOvxPFw">


<emphasis id="em1001" effect="italics">
ITSE 2321 - Object-Oriented Programming (Java)

</emphasis>
</link>


</item>


	

<item id="li1001">

	

<link id="a1001" url="http://cnx.org/contents/-2RmHFs_">


<emphasis id="em1002" effect="italics">
Object-Oriented Programming (OOP) with Java 
	

</emphasis>
 
	

</link>

 

</item>




</list>















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1001" list-type="bulleted">

	

<item id="li1002">
<link id="a1002" target-id="Preface">

Preface

</link>


	

<list id="ul1002" list-type="bulleted">

		

<item id="li1003">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1003" list-type="bulleted">

			

<item id="li1004">
<link id="a1004" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1005">
<link id="a1005" target-id="Preview">

Preview

</link>

 
	

<list id="ul1004" list-type="bulleted">

		

<item id="li1006">
<link id="a1006" target-id="Generics">

Generics

</link>


</item>


	

</list>


	

</item>



	

<item id="li1007">
<link id="a1007" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


<list id="ul1005" list-type="bulleted">



<item id="li1008">
<link id="a1008" target-id="Beginning_with_a_quiz">

Beginning with a quiz

</link>


<list id="ul1006" list-type="bulleted">

	

<item id="li1009">
<link id="a1009" target-id="And_the_answer_is_">

And the answer is ...

</link>


</item>




</list>




</item>




<item id="li1010">
<link id="a1010" target-id="A_new_LinkedList_collection_">

A new LinkedList collection

</link>




<list id="ul1007" list-type="bulleted">

	

<item id="li1011">
<link id="a1011" target-id="The_LinkedList_class_">

The LinkedList class 

</link>

 

</item>


	

<item id="li1012">
<link id="a1012" target-id="Populating_the_LinkedList_collection">

Populating the LinkedList collection

</link>


</item>


	

<item id="li1013">
<link id="a1013" target-id="Four_buttons_and_two_labels">

Four buttons and two labels

</link>


</item>


	

<item id="li1014">
<link id="a1014" target-id="The_toolTipText_property">

The toolTipText property

</link>


</item>


	

<item id="li1015">
<link id="a1015" target-id="Why_am_I_using_Swing_GUI_components_">

Why am I using Swing GUI components?

</link>


	

</item>




</list>




</item>




<item id="li1016">
<link id="a1016" target-id="Making_the_objects_distinguishable">

Making the objects distinguishable

</link>


<list id="ul1008" list-type="bulleted">

	

<item id="li1017">
<link id="a1017" target-id="Identifying_the_buttons_and_labels">

Identifying the buttons and labels

</link>


</item>


	

<item id="li1018">
<link id="a1018" target-id="Why_populate_this_way_">

Why populate this way? 

</link>

 

</item>


	

<item id="li1019">
<link id="a1019" target-id="Display_the_collection">

Display the collection

</link>


</item>


	

<item id="li1020">
<link id="a1020" target-id="Downcast_is_required">

Downcast is required

</link>


</item>


	

<item id="li1021">
<link id="a1021" target-id="The_output_for_the_collection">

The output for the collection

</link>


</item>




</list>




</item>




<item id="li1022">
<link id="a1022" target-id="Copy_collection_elements_into_an_array_">

Copy collection elements into an array

</link>




<list id="ul1009" list-type="bulleted">

	

<item id="li1023">
<link id="a1023" target-id="The_toArray_method">

The toArray method

</link>


</item>


	

<item id="li1024">
<link id="a1024" target-id="Display_the_array_contents">

Display the array contents

</link>


</item>


	

<item id="li1025">
<link id="a1025" target-id="The_showArray_method">

The showArray method

</link>


</item>


	

<item id="li1026">
<link id="a1026" target-id="The_output_for_the_array">

The output for the array

</link>


</item>




</list>




</item>




<item id="li1027">
<link id="a1027" target-id="How_safe_is_the_array">

How "safe" is the array?

</link>


<list id="ul1010" list-type="bulleted">

	

<item id="li1028">
<link id="a1028" target-id="Array_contains_copies_of_references_to_objects">

Array contains copies of references to objects

</link>


</item>


	

<item id="li1029">
<link id="a1029" target-id="Modifying_the_state_of_an_object">

Modifying the state of an object

</link>


</item>


	

<item id="li1030">
<link id="a1030" target-id="Display_array_contents_after_object_modification_">

Display array contents after object modification 
	

</link>

 

</item>


	

<item id="li1031">
<link id="a1031" target-id="Display_the_contents_of_the_collection_again">

Display the contents of the collection again

</link>


</item>




</list>




</item>




<item id="li1032">
<link id="a1032" target-id="The_bottom_line">

The bottom line

</link>


</item>



	

</list>


	

</item>


	

<item id="li1033">
<link id="a1033" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1034">
<link id="a1034" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1035">
<link id="a1035" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1036">
<link id="a1036" target-id="Miscellaneous">

Miscellaneous

</link>


</item>




</list>




</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>




<para id="p1002">
This module is one of a series of modules designed to teach you about 
Object-Oriented Programming (OOP) in general and the Java Collections 
framework in particular.

</para>





<para id="p1003">
This module shows you how to use the simpler version of the overloaded 


<emphasis id="strong1000" effect="bold">
toArray

</emphasis>
 method that is declared in the 

<emphasis id="strong1001" effect="bold">
Collection

</emphasis>
 interface. 
The module also explains why you need to exercise care when using the elements stored in the resulting array to avoid corrupting the state of the objects referred to by the elements in the collection.

</para>





<para id="p1004">
In addition to studying these modules, I strongly recommend that you study 
the 

<link id="a1037" url="http://docs.oracle.com/javase/tutorial/collections/index.html">


Collections Trail

</link>

 in


<link id="a1038" url="http://docs.oracle.com/javase/tutorial/index.html">

Oracle's Java 
Tutorials

</link>

. The modules in this collection are intended to supplement and not 
to replace those tutorials.

</para>





<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>




<para id="p1005">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the listings while you are reading about them.

</para>





<section id="h31000">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<list id="ul1011" list-type="bulleted">

	

<item id="li1037">
<link id="a1039" target-id="Listing_1">

Listing 1

</link>

. The program named ToArray01. 

</item>


	

<item id="li1038">
<link id="a1040" target-id="Listing_2">

Listing 2

</link>

. A new LinkedList collection.

</item>


	

<item id="li1039">
<link id="a1041" target-id="Listing_3">

Listing 3

</link>

. Beginning of the fillIt method.

</item>


	

<item id="li1040">
<link id="a1042" target-id="Listing_4">

Listing 4

</link>

. Making the objects distinguishable.

</item>


	

<item id="li1041">
<link id="a1043" target-id="Listing_5">

Listing 5

</link>

. The showCollection method. 

</item>


	

<item id="li1042">
<link id="a1044" target-id="Listing_6">

Listing 6

</link>

. Copy collection elements into an array.

</item>


	

<item id="li1043">
<link id="a1045" target-id="Listing_7">

Listing 7

</link>

. Display the array contents.

</item>


	

<item id="li1044">
<link id="a1046" target-id="Listing_8">

Listing 8

</link>

. The showArray method. 

</item>


	

<item id="li1045">
<link id="a1047" target-id="Listing_9">

Listing 9

</link>

. Modifying the state of an object.

</item>


	

<item id="li1046">
<link id="a1048" target-id="Listing_10">

Listing 10

</link>

. Display the contents of the collection again. 

</item>




</list>




</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>




<para id="p1006">
In earlier modules, I used the 

<emphasis id="strong1002" effect="bold">
toArray

</emphasis>
 method, declared in the 

<emphasis id="strong1003" effect="bold">

Collection

</emphasis>
 interface, to copy elements from a collection into an array. 
However, in those modules, I didn't take the time to fully explain how to use 
the method. Also, I didn't fully explain the precautions that you need to take 
when you use the method. 

</para>





<para id="p1007">
The 

<emphasis id="strong1004" effect="bold">
Collection

</emphasis>
 interface declares the following two overloaded 
versions of the 

<emphasis id="strong1005" effect="bold">
toArray

</emphasis>
 method: 

</para>







	

<note id="note1000" type="">


		


			


				


				


<code id="pre1000" display="block">

public Object[] toArray()
 
public Object[] toArray(Object[] a)
</code>


				

</note>

			


		









<para id="p1008">
In this module, will teach you how to use the first 

<emphasis id="em1003" effect="italics">
(simpler)

</emphasis>
 version 
of the 

<emphasis id="strong1006" effect="bold">
toArray

</emphasis>
 method. I will also show why you need to exercise care 
when using the elements stored in the array to avoid corrupting the state of the 
objects referred to by the elements in the collection. 

</para>





<para id="p1009">
I will teach you how to use the second 

<emphasis id="em1004" effect="italics">
(more complex)

</emphasis>
 version of the


<emphasis id="strong1007" effect="bold">
toArray

</emphasis>
 method in the next module. 

</para>





</section>
<section id="h11003">
<title>
<emphasis id="Generics" effect="bold">

Generics

</emphasis>


</title>




<para id="p1010">
The code in this series of modules is written with no thought given to


<link id="a1049" url="http://docs.oracle.com/javase/tutorial/java/generics/index.html">


Generics

</link>

. As a result, if you copy and compile the code, you will probably 
get warnings about 

<emphasis id="em1005" effect="italics">
unchecked or unsafe operations

</emphasis>
.

</para>





<para id="p1011">
While you will ultimately need to understand how to use Generics, that is a 
very complex topic. An understanding of Generics is beyond the scope of this 
course. Therefore, for purposes of this course, you can simply ignore those 
warnings.

</para>





</section>
<section id="h11004">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>




<section id="h21001">
<title>
<emphasis id="Beginning_with_a_quiz" effect="bold">

Beginning with a quiz

</emphasis>

 

</title>




<para id="p1012">
Let's begin with a quiz to test your prior knowledge of the 
Collections Framework. To take this quiz, examine the program shown in 

<link id="a1050" target-id="Listing_1">

Listing 1

</link>

 
and write down the output produced by the program. 

</para>











<table id="table1000" summary="A table." pgwide="0">
<tgroup cols="1">





<thead id="thead1000">



<row id="tr1000">



<entry id="th1000">



<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. 

<emphasis id="strong1008" effect="bold">
The program named ToArray01

</emphasis>
.


</entry>



</row>



</thead>





<tbody id="tbody1000">



<row id="tr1001">



<entry id="td1000">



<code id="pre1001" display="block">//File ToArray01.java
//Copyright 2001, R.G.Baldwin
import java.util.*;
import javax.swing.*;

public class ToArray01{
  public static void main(String args[]){
    new Worker().doIt();
  }//end main()
}//end class ToArray01
//===================================//

class Worker{
  public void doIt(){
    Collection ref;

    //Create, populate, and display the
    // contents of a collection
    ref = new LinkedList();
    Populator.fillIt(ref);
    System.out.println("Collection contents");
    showCollection(ref);

    //Get collection contents into the
    // array and display the new
    // contents of the array.
    Object[] array = ref.toArray();
    System.out.println("New array contents");
    showArray(array);

    //Modify a property of an object
    // referred to by one of the
    // elements in the array. Display
    // array contents after
    // modification
    System.out.println("Modified array contents");
    ((JComponent)array[0]).setToolTipText("XX");
    showArray(array);

    //Display the contents of the
    // collection
    System.out.println("Collection contents");
    showCollection(ref);
  }//end doIt()
//-----------------------------------//

  //Utility method for displaying
  // array contents
  void showArray(Object[] array){
    for(int i = 0; i &lt; array.length;i++){
      if(array[i] == null){
        System.out.print("null ");
      }else{
        System.out.print(((JComponent)array[i]).
                                 getToolTipText() + " ");
      }//end else
    }//end for loop
    System.out.println();
  }//end showArray()
//-----------------------------------//

  //Utility method for displaying
  // collection contents
  void showCollection(Collection ref){
    Iterator iter = ref.iterator();
    while(iter.hasNext()){
      System.out.print(((JComponent)iter.next()).
                                 getToolTipText() + " ");
    }//end while loop
    System.out.println();
  }//end showCollection
}// end class Worker
//===================================//

class Populator{
  public static void fillIt(Collection ref){
    ref.add(new JButton());
    ref.add(new JButton());
    ref.add(new JLabel());
    ref.add(new JButton());
    ref.add(new JButton());
    ref.add(new JLabel());

    Iterator iter = ref.iterator();
    int cnt = 0;
    JComponent refVar;
    while(iter.hasNext()){
      refVar = (JComponent)iter.next();
      if(refVar instanceof JButton){
        refVar.setToolTipText("B"+cnt++);
      }else{
        refVar.setToolTipText("L" + cnt++);
      }//end else
    }//end while loop

  }//end fillIt()
}//end class Populator
</code>





</entry>



</row>



</tbody>





</tgroup>
</table>







<section id="h31001">
<title>
<emphasis id="And_the_answer_is_" effect="bold">

And the answer is ...

</emphasis>

 

</title>




<para id="p1013">
The correct answer to the quiz is the program output shown below:

</para>







	

<note id="note1001" type="">


		


			


				


				

<code id="pre1002" display="block">

Collection contents
B0 B1 L2 B3 B4 L5 
New array contents
B0 B1 L2 B3 B4 L5 
Modified array contents
XX B1 L2 B3 B4 L5 
Collection contents
XX B1 L2 B3 B4 L5</code>


				

</note>

			


		









<para id="p1014">
If that was your answer, you probably already understand most of the material 
covered in this module. In that case, you might consider skipping this module 
and moving on to the next module. If that wasn't your answer, you should 
probably continue with your study of this module. 

</para>





</section>
</section>
<section id="h21002">
<title>
<emphasis id="A_new_LinkedList_collection_" effect="bold">

A new LinkedList collection 

</emphasis>

 


</title>




<para id="p1015">
The code in 

<link id="a1051" target-id="Listing_2">

Listing 2

</link>

 creates and populates a new 

<emphasis id="strong1009" effect="bold">
LinkedList

</emphasis>
 
object and saves the object's reference as the interface type 

<emphasis id="strong1010" effect="bold">
Collection

</emphasis>
. The collection is populated by passing the 

<emphasis id="strong1011" effect="bold">
LinkedList

</emphasis>
 
object's reference to a method named 

<emphasis id="strong1012" effect="bold">
fillIt

</emphasis>
. 

</para>





<para id="p1016">
The code in 

<link id="a1052" target-id="Listing_2">

Listing 2

</link>

 also displays the contents of the 

<emphasis id="strong1013" effect="bold">
LinkedList

</emphasis>
 
after it has been populated. The list is displayed by passing the 

<emphasis id="strong1014" effect="bold">
LinkedList

</emphasis>
 
object's reference to a method named 

<emphasis id="strong1015" effect="bold">
showCollection

</emphasis>
. 

</para>






	

<table id="table1001" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. A new LinkedList collection.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">

				

<code id="pre1003" display="block">    Collection ref;
    ref = new LinkedList();

    Populator.fillIt(ref);

    System.out.println("Collection contents");
    showCollection(ref);
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>





<section id="h31002">
<title>
<emphasis id="The_LinkedList_class_" effect="bold">

The LinkedList class 

</emphasis>

 

</title>




<para id="p1017">
The 

<emphasis id="strong1016" effect="bold">
LinkedList

</emphasis>
 class is one of the concrete class implementations of 
the 

<emphasis id="em1006" effect="italics">
Collections Framework

</emphasis>
. This class implements the 

<emphasis id="strong1017" effect="bold">
Collection

</emphasis>
 interface 
and the 

<emphasis id="strong1018" effect="bold">
List

</emphasis>
 interface. Thus, it adheres to the contracts and 
stipulations of the 

<emphasis id="strong1019" effect="bold">
List

</emphasis>
 interface. 

</para>





<para id="p1018">
Here is part of what Oracle has to say about this class: 

</para>





<quote id="blockquote1000" display="block">

	

<emphasis id="em1007" effect="italics">
"Linked list implementation of the List interface. Implements all 
	optional list operations, and permits all elements (including null). In 
	addition ..."

</emphasis>
</quote>




</section>
<section id="h31003">
<title>
<emphasis id="Populating_the_LinkedList_collection" effect="bold">

Populating the LinkedList collection

</emphasis>

 


</title>




<para id="p1019">
The beginning of the static 

<emphasis id="strong1020" effect="bold">
fillIt

</emphasis>
 method, used to populate the 
collection, is shown in 

<link id="a1053" target-id="Listing_3">

Listing 3

</link>

. 

</para>






	

<table id="table1002" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. Beginning of 
				the fillIt method.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">

				

<code id="pre1004" display="block">  public static void fillIt(Collection ref){
    ref.add(new JButton());
    ref.add(new JButton());
    ref.add(new JLabel());
    ref.add(new JButton());
    ref.add(new JButton());
    ref.add(new JLabel());
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>





<para id="p1020">
As shown in 

<link id="a1054" target-id="Listing_3">

Listing 3

</link>

, the 

<emphasis id="strong1021" effect="bold">
fillIt

</emphasis>
 method begins by calling the 

<emphasis id="strong1022" effect="bold">
add

</emphasis>
 
method six times in succession, passing references to new anonymous objects as a 
parameter to the 

<emphasis id="strong1023" effect="bold">
add

</emphasis>
 method. 

</para>





</section>
<section id="h31004">
<title>
<emphasis id="Four_buttons_and_two_labels" effect="bold">

Four buttons and two labels

</emphasis>

 

</title>




<para id="p1021">
Four of the objects are instantiated from the class named 

<emphasis id="strong1024" effect="bold">
JButton

</emphasis>
. Two 
of the objects are instantiated from the class named 

<emphasis id="strong1025" effect="bold">
JLabel

</emphasis>
. 

</para>





<para id="p1022">
Both 

<emphasis id="strong1026" effect="bold">
JButton

</emphasis>
 and 

<emphasis id="strong1027" effect="bold">
JLabel

</emphasis>
 belong to the 

<emphasis id="strong1028" effect="bold">
javax.swing

</emphasis>
 
package. Further, both are subclasses of the class named 

<emphasis id="strong1029" effect="bold">
JComponent

</emphasis>
. 

</para>





</section>
<section id="h31005">
<title>
<emphasis id="The_toolTipText_property" effect="bold">

The toolTipText property

</emphasis>

 

</title>




<para id="p1023">
Finally, both classes have a property named 

<emphasis id="strong1030" effect="bold">
toolTipText

</emphasis>
, which can be 
set and accessed by calling the following methods on a reference to the object:


</para>







	

<note id="note1002" type="">


		


			


				


				

<code id="pre1005" display="block">
				
void setToolTipText(String text) 

String getToolTipText() 
</code>


				

</note>

			


		









</section>
<section id="h31006">
<title>
<emphasis id="Why_am_I_using_Swing_GUI_components_" effect="bold">

Why am I using Swing GUI components?


</emphasis>

 

</title>




<para id="p1024">
I really don't plan to do anything special with these Swing GUI 
components. Rather, I chose to use them for illustration purposes simply because 
they possess the characteristics that I need for this module, and the next 
module as well. Those characteristics are: 

</para>





<list id="ul1012" list-type="bulleted">

	

<item id="li1047">
Both classes subclass the class named JComponent 

<emphasis id="em1008" effect="italics">
(a common superclass 
	below the Object class).

</emphasis>
</item>


	

<item id="li1048">
Both classes inherit a property 

<emphasis id="em1009" effect="italics">
(toolTipText)

</emphasis>
 that can be used to 
	identify them later.

</item>




</list>




</section>
</section>
<section id="h21003">
<title>
<emphasis id="Making_the_objects_distinguishable" effect="bold">

Making the objects distinguishable

</emphasis>

 


</title>




<para id="p1025">
After the code in 

<link id="a1055" target-id="Listing_3">

Listing 3

</link>

 has been executed, the buttons and labels are 
indistinguishable on the basis of the 

<emphasis id="em1010" effect="italics">
null

</emphasis>
 value of their 

<emphasis id="strong1031" effect="bold">
toolTipText

</emphasis>
 
property. 

</para>





<para id="p1026">
The code in 

<link id="a1056" target-id="Listing_4">

Listing 4

</link>

 deals with this issue. This code uses the 

<emphasis id="strong1032" effect="bold">

setToolTipText

</emphasis>
 method to store a unique 

<emphasis id="strong1033" effect="bold">
String 

</emphasis>
value in the 

<emphasis id="strong1034" effect="bold">

toolTipText

</emphasis>
 property of the object referred to by each of the elements in 
the collection. 

</para>






	

<table id="table1003" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. Making the objects distinguishable.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">

				

<code id="pre1006" display="block">    Iterator iter = ref.iterator();
    int cnt = 0;
    JComponent refVar;

    while(iter.hasNext()){
      refVar = (JComponent)iter.next();
      if(refVar instanceof JButton){
        refVar.setToolTipText("B"+cnt++);
      }else{
        refVar.setToolTipText("L" + cnt++);
      }//end else
    }//end while loop

  }//end fillIt()
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>








<section id="h31007">
<title>
<emphasis id="Identifying_the_buttons_and_labels" effect="bold">

Identifying the buttons and labels

</emphasis>

 


</title>




<para id="p1027">
In addition to storing a unique value in the 

<emphasis id="strong1035" effect="bold">
toolTipText

</emphasis>
 property of 
the object referred to by each element, the code in 

<link id="a1057" target-id="Listing_4">

Listing 4

</link>

 also makes it 
possible to distinguish between the 

<emphasis id="strong1036" effect="bold">
JButton

</emphasis>
 objects and the 

<emphasis id="strong1037" effect="bold">
JLabel

</emphasis>
 
objects. This is accomplished by including an upper-case "B" in the property 
value for each 

<emphasis id="strong1038" effect="bold">
JButton

</emphasis>
, and including an upper-case "L" in the property 
value for each 

<emphasis id="strong1039" effect="bold">
JLabel

</emphasis>
 button. 

</para>





</section>
<section id="h31008">
<title>
<emphasis id="Why_populate_this_way_" effect="bold">

Why populate this way? 

</emphasis>

 

</title>




<para id="p1028">
This approach to population is, admittedly, a little bit of an overkill for 
illustrating what I want to illustrate in this program. However, I plan to use 
the same 

<emphasis id="strong1040" effect="bold">
fillIt

</emphasis>
 method in the sample program in the next module, and it 
won't be an overkill there. 

</para>





</section>
<section id="h31009">
<title>
<emphasis id="Display_the_collection" effect="bold">

Display the collection

</emphasis>

 

</title>




<para id="p1029">
The code in 

<link id="a1058" target-id="Listing_2">

Listing 2

</link>

 above calls the 

<emphasis id="strong1041" effect="bold">
showCollection

</emphasis>
 method to display 
the contents of the populated 

<emphasis id="strong1042" effect="bold">
LinkedList

</emphasis>
 collection. The 

<emphasis id="strong1043" effect="bold">

showCollection

</emphasis>
 method is shown in 

<link id="a1059" target-id="Listing_5">

Listing 5

</link>

 

</para>






	

<table id="table1004" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

. The 
				showCollection method.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">

				

<code id="pre1007" display="block">  void showCollection(Collection ref){
    Iterator iter = ref.iterator();
    while(iter.hasNext()){
      System.out.print(((JComponent)iter.next()).
                                 getToolTipText() + " ");
    }//end while loop
    System.out.println();
  }//end showCollection
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>





<para id="p1030">
By now, you should have no difficulty understanding the code in 

<link id="a1060" target-id="Listing_5">

Listing 5

</link>

. 
This code gets an iterator on the incoming reference of type 

<emphasis id="strong1044" effect="bold">
Collection

</emphasis>
. 
The code then uses that iterator to gain access to each element in succession, 
displaying the 

<emphasis id="strong1045" effect="bold">
String

</emphasis>
 value of the 

<emphasis id="strong1046" effect="bold">
toolTipText

</emphasis>
 property belonging 
to a particular object during each iteration. 

</para>





</section>
<section id="h31010">
<title>
<emphasis id="Downcast_is_required" effect="bold">

Downcast is required

</emphasis>

 

</title>




<para id="p1031">
Note that the 

<emphasis id="strong1047" effect="bold">
next

</emphasis>
 method of the 

<emphasis id="strong1048" effect="bold">
Iterator

</emphasis>
 interface returns a 
reference to the next element in the collection, as type 

<emphasis id="strong1049" effect="bold">
Object

</emphasis>
. 

<emphasis id="em1011" effect="italics">

(Remember, Generics were not used to populate this collection.)

</emphasis>
</para>





<para id="p1032">
In order to call the 

<emphasis id="strong1050" effect="bold">
getToolTipText

</emphasis>
 method on the returned reference, 
the reference must be downcast to type 

<emphasis id="strong1051" effect="bold">
JComponent

</emphasis>
. Since both 

<emphasis id="strong1052" effect="bold">
JButton

</emphasis>
 
and 

<emphasis id="strong1053" effect="bold">
JLabel

</emphasis>
 extend 

<emphasis id="strong1054" effect="bold">
JComponent

</emphasis>
, and the 

<emphasis id="strong1055" effect="bold">
getToolTipText

</emphasis>
 method 
is declared in the 

<emphasis id="strong1056" effect="bold">
JComponent

</emphasis>
 class, it is not necessary to be concerned 
as to whether an object is type 

<emphasis id="strong1057" effect="bold">
JButton

</emphasis>
 or type 

<emphasis id="strong1058" effect="bold">
JLabel

</emphasis>
 to display 
the value of the 

<emphasis id="strong1059" effect="bold">
toolTipText

</emphasis>
 property. 

<emphasis id="em1012" effect="italics">
(This is an example of 
polymorphic behavior based on class inheritance.)

</emphasis>
 

</para>





</section>
<section id="h31011">
<title>
<emphasis id="The_output_for_the_collection" effect="bold">

The output for the collection

</emphasis>

 


</title>




<para id="p1033">
The output produced by the code in 

<link id="a1061" target-id="Listing_2">

Listing 2

</link>

 is shown below: 

</para>








	

<note id="note1003" type="">


		


			


				


				

<code id="pre1008" display="block">
				
Collection contents
B0 B1 L2 B3 B4 L5 </code>


				

</note>

			


		









<para id="p1034">
By examining the "B" and "L" characters in this output, you can identify the


<emphasis id="strong1060" effect="bold">
JButton

</emphasis>
 objects and the 

<emphasis id="strong1061" effect="bold">
JLabel

</emphasis>
 objects. 

</para>





</section>
</section>
<section id="h21004">
<title>
<emphasis id="Copy_collection_elements_into_an_array_" effect="bold">

Copy collection elements into an array


</emphasis>

 

</title>




<para id="p1035">
The code in 

<link id="a1062" target-id="Listing_6">

Listing 6

</link>

 shows how to use the simple version of the 

<emphasis id="strong1062" effect="bold">
toArray

</emphasis>
 
method to create an array of type 

<emphasis id="strong1063" effect="bold">
Object

</emphasis>
 that contains a copy of each 
element in the 

<emphasis id="strong1064" effect="bold">
LinkedList

</emphasis>
 collection. 

</para>





	

<table id="table1005" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

. Copy collection elements into an array.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">

				

<code id="pre1009" display="block">    Object[] array = ref.toArray();
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>





<section id="h31012">
<title>
<emphasis id="The_toArray_method" effect="bold">

The toArray method

</emphasis>

 

</title>




<para id="p1036">
Here is some of what Oracle has to say about this version of the 

<emphasis id="strong1065" effect="bold">
toArray

</emphasis>
 
method: 

</para>





<quote id="blockquote1001" display="block">

	

<emphasis id="em1013" effect="italics">
"Returns an array containing all of the elements in this collection. If 
	the collection makes any guarantees as to what order its elements are 
	returned by its iterator, this method must return the elements in the same 
	order.

</emphasis>
</quote>




<quote id="blockquote1002" display="block">

	

<emphasis id="em1014" effect="italics">
The returned array will be "safe" in that no references to it are 
	maintained by this collection. ... The caller is thus free to modify the 
	returned array."

</emphasis>
</quote>




<para id="p1037">
I will have some more to say about the 

<emphasis id="em1015" effect="italics">
safe

</emphasis>
 aspects of the array 
shortly. 

</para>





</section>
<section id="h31013">
<title>
<emphasis id="Display_the_array_contents" effect="bold">

Display the array contents

</emphasis>

 

</title>




<para id="p1038">
The code in 

<link id="a1063" target-id="Listing_7">

Listing 7

</link>

 calls a method named 

<emphasis id="strong1066" effect="bold">
showArray

</emphasis>
 to cause the 
current contents of the array to be displayed. 

</para>





	

<table id="table1006" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

. Display the array contents.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">

				

<code id="pre1010" display="block">    System.out.println("New array contents");
    showArray(array);
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>





<para id="p1039">
The entire 

<emphasis id="strong1067" effect="bold">
showArray

</emphasis>
 method is shown in 

<link id="a1064" target-id="Listing_8">

Listing 8

</link>

. 

</para>





	

<table id="table1007" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Listing_8" effect="bold">

Listing 8

</emphasis>

. The showArray 
				method.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">

				

<code id="pre1011" display="block">  void showArray(Object[] array){
    for(int i = 0; i &lt; array.length;i++){
      if(array[i] == null){
        System.out.print("null ");
      }else{
        System.out.print(((JComponent)array[i]).
                                  getToolTipText() + " ");
      }//end else
    }//end for loop
    System.out.println();
  }//end showArray()
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>





</section>
<section id="h31014">
<title>
<emphasis id="The_showArray_method" effect="bold">

The showArray method

</emphasis>

 

</title>




<para id="p1040">
The behavior of the 

<emphasis id="strong1068" effect="bold">
ShowArray

</emphasis>
 method is straightforward. The method 
uses a 

<emphasis id="strong1069" effect="bold">
for

</emphasis>
 loop to access each of the elements stored in the array in 
increasing index order. 

</para>





<para id="p1041">
A test is made to determine if the element contains a null reference. If so, 
then the word 

<emphasis id="strong1070" effect="bold">
null

</emphasis>
 is displayed for that element. If not, the 

<emphasis id="strong1071" effect="bold">

getToolTipText

</emphasis>
 method is used to access and display the value of the 

<emphasis id="strong1072" effect="bold">

toolTipText

</emphasis>
 property for each element in the array. 

</para>





</section>
<section id="h31015">
<title>
<emphasis id="The_output_for_the_array" effect="bold">

The output for the array

</emphasis>

 

</title>




<para id="p1042">
The output produced by the code in 

<link id="a1065" target-id="Listing_8">

Listing 8

</link>

 is shown below: 

</para>







	

<note id="note1004" type="">


		


			


				


				

<code id="pre1012" display="block">

New array contents
B0 B1 L2 B3 B4 L5</code>


				

</note>

			


		









<para id="p1043">
As you can see, 

<emphasis id="em1016" effect="italics">
(except for the String that identifies the type of output)

</emphasis>
 
this is an exact match to the output produced when the contents of the 
collection were displayed. 

</para>





</section>
</section>
<section id="h21005">
<title>
<emphasis id="How_safe_is_the_array" effect="bold">

How "safe" is the array?

</emphasis>

 

</title>




<para id="p1044">
While it is "safe" to modify the contents of the array as explained in the 
quotation from Oracle earlier, there is still some danger here that you need to 
be aware of. 

</para>





<para id="p1045">
Java collections do not store objects. Rather, Java collections store 
references to objects. In Java, it is entirely possible to have two or more 
references to the same object. 

</para>





<section id="h31016">
<title>
<emphasis id="Array_contains_copies_of_references_to_objects" effect="bold">

Array contains copies of references to objects

</emphasis>

 


</title>




<para id="p1046">
Each element in the array is a copy of an element in the collection. 

</para>





<para id="p1047">
Therefore, at this point, for each object being managed by the collection, at 
least two references exist that refer to that object. One copy is contained in 
the collection. The other copy is contained in the array. 

</para>





<para id="p1048">
If you use a reference stored in the array to modify the state of one of 
those objects, that modification is made to the object that is also referenced 
by an element in the collection. This may or may not be what you intend. It's 
not necessarily a problem as long as you understand what is going on and be 
careful how you use the references stored in the array. 

</para>





</section>
<section id="h31017">
<title>
<emphasis id="Modifying_the_state_of_an_object" effect="bold">

Modifying the state of an object

</emphasis>

 


</title>




<para id="p1049">
The code shown in 

<link id="a1066" target-id="Listing_9">

Listing 9

</link>

 calls the 

<emphasis id="strong1073" effect="bold">
setToolTipText

</emphasis>
 method on the 
reference stored in the first element in the array to modify the state of the 
object to which that reference refers. Then the code calls the 

<emphasis id="strong1074" effect="bold">
showArray

</emphasis>
 
method to display the contents of the array. 

</para>





	

<table id="table1008" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1008">

			

<row id="tr1016">

				

<entry id="th1008">
<emphasis id="Listing_9" effect="bold">

Listing 9

</emphasis>

. Modifying the state of an object.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1008">

			

<row id="tr1017">

				

<entry id="td1008">

				

<code id="pre1013" display="block">    System.out.println("Modified array contents");
    ((JComponent)array[0]).setToolTipText("XX");
    showArray(array);
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>





<para id="p1050">
The 

<emphasis id="strong1075" effect="bold">
toolTipText

</emphasis>
 property value for each of the objects referred to by 
the remaining elements is left undisturbed. 

</para>





</section>
<section id="h31018">
<title>
<emphasis id="Display_array_contents_after_object_modification_" effect="bold">

Display array contents after object modification


</emphasis>

 

</title>




<para id="p1051">
The output produced by the code in 

<link id="a1067" target-id="Listing_9">

Listing 9

</link>

 is shown below: 

</para>








	

<note id="note1005" type="">


		


			


				


				

<code id="pre1014" display="block">

Modified array contents
XX B1 L2 B3 B4 L5</code>


				

</note>

			


		










<para id="p1052">
As you can see, except for the first element, this is a match for the display 
of the array contents before the state of the object referred by the first 
element was modified. However, the 

<emphasis id="strong1076" effect="bold">
toolTipText

</emphasis>
 property for the object 
referred to by the first element now contains the string "XX", instead of the 
string "B0" as before. 

</para>





</section>
<section id="h31019">
<title>
<emphasis id="Display_the_contents_of_the_collection_again" effect="bold">

Display the contents of the collection again

</emphasis>

 


</title>




<para id="p1053">
The code in 

<link id="a1068" target-id="Listing_10">

Listing 10

</link>

 displays the state of each of the objects referred to 
by the elements in the 

<emphasis id="strong1077" effect="bold">
LinkedList

</emphasis>
 collection. 

</para>





	

<table id="table1009" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1009">

			

<row id="tr1018">

				

<entry id="th1009">
<emphasis id="Listing_10" effect="bold">

Listing 10

</emphasis>

. Display the 
				contents of the collection again.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1009">

			

<row id="tr1019">

				

<entry id="td1009">

				

<code id="pre1015" display="block">    System.out.println("Collection contents");
    showCollection(ref);
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>





<para id="p1054">
The output produced by 

<link id="a1069" target-id="Listing_10">

Listing 10

</link>

 is shown below: 

</para>








	

<note id="note1006" type="">


		


			


				


				

<code id="pre1016" display="block">

Collection contents
XX B1 L2 B3 B4 L5</code>


				

</note>

			


		











<para id="p1055">
As you can see, the state of the object referred to by the reference stored 
in the first element of the collection is also changed. The 

<emphasis id="strong1078" effect="bold">
toolTipText

</emphasis>
 
property for that object now contains the string "XX" instead of "B0" as before.


</para>





</section>
</section>
<section id="h21006">
<title>
<emphasis id="The_bottom_line" effect="bold">

The bottom line

</emphasis>

 

</title>




<para id="p1056">
It is safe to modify the contents of the array, even to replace the 
references in the array with references to other objects. Such a replacement has 
no impact on the contents of the collection. 

</para>





<para id="p1057">
However, it is also possible to use the elements of the array to modify the 
state of the objects referred to by the elements in the collection. 

</para>





<para id="p1058">
If this is what you intend to do, that's great. However, if that is not what 
you intend to do, that may be a problem. So, the bottom line is, be careful what 
you do with the elements in the array. 

</para>






</section>
</section>
<section id="h11005">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>




<para id="p1059">
I encourage you to copy the code from 

<link id="a1070" target-id="Listing_1">

Listing 1

</link>

. 
Paste the code into your Java editor. Then 
compile and execute it.

</para>





<para id="p1060">
Run the program 
and observe the results. Experiment with the code. Make changes, run the program again, and observe the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>





</section>
<section id="h11006">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1061">
In this module, I taught you how to use the simpler version of the overloaded


<emphasis id="strong1079" effect="bold">
toArray

</emphasis>
 method, declared in the 

<emphasis id="strong1080" effect="bold">
Collection

</emphasis>
 interface, to copy the 
elements from a collection into an array of type 

<emphasis id="strong1081" effect="bold">
Object

</emphasis>
. 

</para>





<para id="p1062">
I also showed why you need to exercise care when using the elements stored in 
the array, to avoid corrupting the state of the objects referred to by the 
elements in the collection.

</para>





</section>
<section id="h11007">
<title>
<emphasis id="Whats_next" effect="bold">

What's next?

</emphasis>


</title>




<para id="p1063">
In the next module, I will teach you how to use the other, more complex 
version of the overloaded 

<emphasis id="strong1082" effect="bold">
toArray

</emphasis>
 method. 

</para>





</section>
<section id="h11008">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>




<para id="p1064">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1007" type="">


		


			


				

<emphasis id="strong1083" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1013" list-type="bulleted">

					

<item id="li1049">
Module name: Java4150: The toArray Method, Part 1

</item>


					

<item id="li1050">
File: Java4150.htm


</item>


					

<item id="li1051">
Published: 05/07/13

</item>



				

</list>


				

</note>

			


		









	

<note id="note1008" type="">


		


			


				

<emphasis id="strong1084" effect="bold">
Disclaimers:

</emphasis>
<para id="p1065">
<emphasis id="strong1085" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>



				

<para id="p1066">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>



				

<para id="p1067">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>



				

<para id="p1068">
<emphasis id="strong1086" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>



				

</note>

			


		









<para id="p1069">
-end- 

</para>







</section>
</content>




</document>