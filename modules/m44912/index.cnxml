<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Java3114 Java OOP Controlling Opacity with a Slider</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m44912</md:content-id>
  <md:title>Java3114 Java OOP Controlling Opacity with a Slider</md:title>
  <md:abstract>Learn how to use a slider to continuously change the opacity of an image and to draw that image onto a background image.</md:abstract>
  <md:uuid>7c1e0678-e0ed-41fb-8865-f0fab2a9a567</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1002">
<link id="a1002" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1003">
<link id="a1003" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1004">
<link id="a1004" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1005">
<link id="a1005" target-id="General_background_information">

General background information

</link>


</item>


	

<item id="li1006">
<link id="a1006" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


</item>


	

<item id="li1007">
<link id="a1007" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1008">
<link id="a1008" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1009">
<link id="a1009" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1010">
<link id="a1010" target-id="Miscellaneous">

Miscellaneous

</link>


</item>


	

<item id="li1011">
<link id="a1011" target-id="Complete_program_listing">

Complete program listing

</link>


</item>




</list>


	

	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	

	

<para id="p1000">
This module is one of a series of modules designed to teach you about Object-Oriented Programming (OOP) using Java. 

</para>




<para id="p1001">
The program described in this module requires the use of the Guzdial-Ericson 
multimedia class library. You will find download, installation, and usage 
instructions for the library at 

<link id="a1012" url="http://cnx.org/content/m44148/latest/">

Java OOP: The Guzdial-Ericson Multimedia Class Library

</link>

.

</para>


	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1002">
I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.

</para>


	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1003" list-type="bulleted">

		

<item id="li1012">
<link id="a1013" target-id="Figure_1">

Figure 1

</link>

. Screen output at startup. 

</item>


		

<item id="li1013">
<link id="a1014" target-id="Figure_2">

Figure 2

</link>

. Twenty-percent opacity. 

</item>


		

<item id="li1014">
<link id="a1015" target-id="Figure_3">

Figure 3

</link>

. Eighty-percent opacity. 

</item>


	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1004" list-type="bulleted">

		

<item id="li1015">
<link id="a1016" target-id="Listing_1">

Listing 1

</link>

. Modification of the SimplePicture class. 

</item>


		

<item id="li1016">
<link id="a1017" target-id="Listing_2">

Listing 2

</link>

. Beginning of the class named Prob07Runner. 

</item>


		

<item id="li1017">
<link id="a1018" target-id="Listing_3">

Listing 3

</link>

. Beginning of the constructor. 

</item>


		

<item id="li1018">
<link id="a1019" target-id="Listing_4">

Listing 4

</link>

. Display the initial image. 

</item>


		

<item id="li1019">
<link id="a1020" target-id="Listing_5">

Listing 5

</link>

. Display the butterfly at 50-percent opacity. 

</item>


		

<item id="li1020">
<link id="a1021" target-id="Listing_6">

Listing 6

</link>

. The setOpacity method. 

</item>


		

<item id="li1021">
<link id="a1022" target-id="Listing_7">

Listing 7

</link>

. The drawPictureOnPicture method. 

</item>


		

<item id="li1022">
<link id="a1023" target-id="Listing_8">

Listing 8

</link>

. Begin the registration of an event handler on the slider.

</item>


		

<item id="li1023">
<link id="a1024" target-id="Listing_9">

Listing 9

</link>

. Draw the butterfly and repaint. 

</item>


		

<item id="li1024">
<link id="a1025" target-id="Listing_10">

Listing 10

</link>

. Complete program listing.

</item>


	

</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>


	

<para id="p1003">
The primary objective of this module is to illustrate how to use a slider 
	to continuously change the opacity of an image and to draw that image onto a 
	background image. 

</para>




<para id="p1004">
<emphasis id="strong1000" effect="bold">
Two approaches

</emphasis>
</para>




<para id="p1005">
This module builds on an earlier module involving transparency. In that 
module, you learned that there are at least two ways to incorporate alpha 
transparency into Ericson's media library, The easiest way, which is not 
necessarily the best way, is to make a relatively simple modification to a 
constructor in Ericson's 

<emphasis id="strong1001" effect="bold">
SimplePicture

</emphasis>
 class. That is the approach used 
in this module.

</para>




<para id="p1006">
<emphasis id="strong1002" effect="bold">
The second approach

</emphasis>
</para>




<para id="p1007">
The second approach is more complicated, but does not require the 
modification of the classes in Ericson's library. That is probably a better 
approach due simply to the fact that modifications to Ericson's library are not 
required. However, that approach is not shown in this module.

</para>




<para id="p1008">
<emphasis id="strong1003" effect="bold">
Outside research

</emphasis>
</para>




<para id="p1009">
As with the earlier module, the program that I will explain in this module 
may require a significant amount of outside research on the part of the student 
in order to learn about:

</para>




<list id="ul1005" list-type="bulleted">

	

<item id="li1025">
Alpha transparency

</item>


	

<item id="li1026">
A buffered image of type 

<emphasis id="strong1004" effect="bold">
TYPE_INT_ARGB

</emphasis>
</item>


	

<item id="li1027">
The ability to use Ericson's 

<emphasis id="strong1005" effect="bold">
getBasicPixel

</emphasis>
 and 

<emphasis id="strong1006" effect="bold">
setBasicPixel

</emphasis>
 
	methods, 

</item>


	

<item id="li1028">
The use of the bitwise AND, OR, and left-shift operators.

</item>


	

<item id="li1029">
The use of the 

<emphasis id="strong1007" effect="bold">
drawImage

</emphasis>
 method of the 

<emphasis id="strong1008" effect="bold">
Graphics

</emphasis>
 class.

</item>




</list>




<para id="p1010">
<emphasis id="strong1009" effect="bold">
Modification to the SimplePicture class

</emphasis>
</para>




<para id="p1011">
The student must modify the 

<emphasis id="strong1010" effect="bold">
SimplePicture

</emphasis>
 class to cause the buffered 
image used to store the image to be 

<emphasis id="strong1011" effect="bold">
TYPE_INT_ARGB

</emphasis>
 instead of 

<emphasis id="strong1012" effect="bold">

TYPE_INT_RGB

</emphasis>
, which is its normal type.

</para>




<para id="p1012">
Generally speaking, this program:

</para>




<list id="ul1006" list-type="bulleted">

	

<item id="li1030">
Instantiates a new visual object that extends the 

<emphasis id="strong1013" effect="bold">
JFrame

</emphasis>
 class 
	and contains a 

<emphasis id="strong1014" effect="bold">
JSlider

</emphasis>
 object.

</item>


	

<item id="li1031">
Instantiates 

<emphasis id="strong1015" effect="bold">
Picture

</emphasis>
 objects from two image files 

<emphasis id="em1000" effect="italics">
(beach and 
	butterfly)

</emphasis>
 along with some blank 

<emphasis id="strong1016" effect="bold">
Picture

</emphasis>
 objects of the same 
	size.

</item>


	

<item id="li1032">
Defines a method named 

<emphasis id="strong1017" effect="bold">
setOpacity

</emphasis>
 that can be called to set the 
	opacity of every pixel in a picture to a specified value.

</item>


	

<item id="li1033">
Defines a method named 

<emphasis id="strong1018" effect="bold">
drawPictureOnPicture

</emphasis>
 that can be called to 
	draw one picture onto another picture.

</item>


	

<item id="li1034">
Registers a 

<emphasis id="strong1019" effect="bold">
ChangeEvent

</emphasis>
 handler on the slider to:

<list id="ul1007" list-type="bulleted">

		

<item id="li1035">
Extract a percent-opacity value from the slider based on the 
		position of the thumb.

</item>


		

<item id="li1036">
Apply that opacity value to the butterfly image.

</item>


		

<item id="li1037">
Draw the modified butterfly image on the beach image and display it.

</item>


	

</list>


	

</item>




</list>




<para id="p1013">
<emphasis id="strong1020" effect="bold">
Brief program specifications

</emphasis>
</para>




<para id="p1014">
Write a program named 

<emphasis id="strong1021" effect="bold">
Prob07

</emphasis>
 that uses the class definition for the 
class named 

<emphasis id="strong1022" effect="bold">
Prob07

</emphasis>
 in 

<link id="a1026" target-id="Listing_10">

Listing 10

</link>

 along with 
Ericson's media library and the image files named 

<link id="a1027" url="Prob07a.jpg">

Prob07a.jpg

</link>

 and 


<link id="a1028" url="Prob07b.jpg">

Prob07b.jpg

</link>

 to produce the 
two output images shown in 

<link id="a1029" target-id="Figure_1">

Figure 1

</link>

.

</para>




<para id="p1015">
<emphasis id="strong1023" effect="bold">
<emphasis id="Figure_1" effect="bold">

Figure 1

</emphasis>

 - Screen output at startup.

</emphasis>
</para>


<para id="p1016">
<media id="media1000" alt="Missing image." display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/image-a-e905.jpg" width="332" height="364"/>
</media>


</para>


	



<para id="p1017">
<emphasis id="strong1024" effect="bold">
Two output images

</emphasis>
</para>




<para id="p1018">
Note that 

<link id="a1030" target-id="Figure_1">

Figure 1

</link>

 actually consists of 
two output images, one positioned below the other.

</para>




<para id="p1019">
<emphasis id="strong1025" effect="bold">
Move the thumb to the left

</emphasis>
</para>




<para id="p1020">
When you move the thumb on the slider to the left, the butterfly becomes less 
opaque 

<emphasis id="em1001" effect="italics">
(more transparent)

</emphasis>
 as shown in 

<link id="a1031" target-id="Figure_2">


Figure 2

</link>

 with total transparency at the extreme left end of the slider.

</para>




<para id="p1021">
<emphasis id="strong1026" effect="bold">
<emphasis id="Figure_2" effect="bold">

Figure 2

</emphasis>

 - Twenty-percent opacity.

</emphasis>
</para>




<para id="p1022">
<media id="media1001" alt="Missing image." display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/image-b-2ef6.jpg" width="331" height="363"/>
</media>


</para>


	



<para id="p1023">
<emphasis id="strong1027" effect="bold">
Move the thumb to the right

</emphasis>
</para>




<para id="p1024">
When you move the thumb on the slider to the right, the butterfly becomes 
more opaque 

<emphasis id="em1002" effect="italics">
(less transparent)

</emphasis>
 as shown in


<link id="a1032" target-id="Figure_3">

Figure 3

</link>

 with total opacity at the extreme 
right end of the slider.

</para>




<para id="p1025">
<emphasis id="strong1028" effect="bold">
<emphasis id="Figure_3" effect="bold">

Figure 3

</emphasis>

 - Eighty-percent opacity.

</emphasis>
</para>




<para id="p1026">
<media id="media1002" alt="Missing image." display="block">
<image id="img1002" mime-type="image/jpeg" src="../../media/image-c-f0cd.jpg" width="331" height="363"/>
</media>


</para>


	



<para id="p1027">
<emphasis id="strong1029" effect="bold">
Define new classes

</emphasis>
</para>




<para id="p1028">
You may define new classes as necessary to cause your program to behave as 
required, but you may not modify the class definition for the class named 

<emphasis id="strong1030" effect="bold">

Prob07

</emphasis>
 given in 

<link id="a1033" target-id="Listing_10">

Listing 10

</link>

.

</para>




</section>
<section id="h11003">
<title>
<emphasis id="General_background_information" effect="bold">

General background 
information

</emphasis>


</title>




<para id="p1029">
The image in a 

<emphasis id="strong1031" effect="bold">
SimplePicture

</emphasis>
 object is stored in an object of the 

<emphasis id="strong1032" effect="bold">

BufferedImage

</emphasis>
 class, which is a class in the standard Sun Java library.

</para>




<para id="p1030">
<emphasis id="strong1033" effect="bold">
Image data formats

</emphasis>
</para>




<para id="p1031">
An examination of the documentation for the 

<emphasis id="strong1034" effect="bold">
BufferedImage

</emphasis>
 class shows 
that the red, green, blue, and alpha values for each pixel can be formatted in 
about fourteen different ways in an object of the 

<emphasis id="strong1035" effect="bold">
BufferedImage

</emphasis>
 class.

</para>




<para id="p1032">
<emphasis id="strong1036" effect="bold">
No alpha data

</emphasis>
</para>




<para id="p1033">
Some of those formats, including the way that information is stored in a 

<emphasis id="strong1037" effect="bold">

SimplePicture

</emphasis>
 object, don't include an alpha value.

</para>




<para id="p1034">
<emphasis id="strong1038" effect="bold">
Modification of the SimplePicture class

</emphasis>
</para>




<para id="p1035">
One way to modify the 

<emphasis id="strong1039" effect="bold">
SimplePicture

</emphasis>
 class to force it to accommodate 
alpha transparency data is to modify one of the constructors for the 

<emphasis id="strong1040" effect="bold">

SimplePicture

</emphasis>
 class as shown in 

<link id="a1034" target-id="Listing_1">

Listing 1

</link>

. 
Note the change indicated by comments in 

<link id="a1035" target-id="Listing_1.">


Listing 1

</link>

. 

<emphasis id="em1003" effect="italics">
(There are probably other ways that you can modify the class to 
achieve the same result as well.)

</emphasis>
</para>


	

<table id="table1000" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

 - Modification of the SimplePicture class. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">

				

<code id="pre1000" display="block"> /**
  * A constructor that takes the width and height desired
  * for a picture and creates a buffered image of that
  * size.  This constructor doesn't show the picture.
  */
 public  SimplePicture(int width, int height){
//Disable the following statement
//   bufferedImage = new BufferedImage(
//            width, height, BufferedImage.TYPE_INT_RGB);

   //Modify constructor to support alpha transparency.
   bufferedImage = new BufferedImage(
             width, height, BufferedImage.TYPE_INT_ARGB);
             
   title = "None";
   fileName = "None";
   extension = "jpg";
   setAllPixelsToAColor(Color.white);
 }//end constructor</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1036">
<emphasis id="strong1041" effect="bold">
Future Picture objects will accommodate alpha transparency

</emphasis>
</para>




<para id="p1037">
Having made this modification, future objects instantiated from the 

<emphasis id="strong1042" effect="bold">

SimplePicture

</emphasis>
 class using this constructor will accommodate alpha 
transparency. 

<emphasis id="em1004" effect="italics">
(The 

<emphasis id="strong1043" effect="bold">
SimplePicture

</emphasis>
 class is the superclass of the 

<emphasis id="strong1044" effect="bold">

Picture

</emphasis>
 class.)

</emphasis>
</para>




<para id="p1038">
<emphasis id="strong1045" effect="bold">
No complete listing of SimplePicture provided

</emphasis>
</para>




<para id="p1039">
Because of the simplicity of this modification, a complete listing of the 
modified 

<emphasis id="strong1046" effect="bold">
SimplePicture

</emphasis>
 class will not be provided in this module.

</para>


	

	

</section>
<section id="h11004">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	

	

<section id="h21001">
<title>
<emphasis id="The_class_named_Prob07" effect="bold">

The class named Prob07

</emphasis>


</title>




<para id="p1040">
You can view the driver class named 

<emphasis id="strong1047" effect="bold">
Prob07

</emphasis>
 at the beginning of the 
source code in 

<link id="a1036" target-id="Listing_10">

Listing 10

</link>

. You are 
already familiar with the code in the 

<emphasis id="strong1048" effect="bold">
main

</emphasis>
 method of that class from 
earlier modules so I won't spend any time explaining it.

</para>




<para id="p1041">
Briefly, the 

<emphasis id="strong1049" effect="bold">
main

</emphasis>
 method instantiates a new object of the class named


<emphasis id="strong1050" effect="bold">
Prob07Runner

</emphasis>
 and calls the 

<emphasis id="strong1051" effect="bold">
run

</emphasis>
 method on that object. When the 

<emphasis id="strong1052" effect="bold">

run

</emphasis>
 method returns, the GUI shown in 

<link id="a1037" target-id="Figure_1">

Figure 
1

</link>

 has been displayed on the screen.

</para>




<para id="p1042">
At that point, the program simply goes into an idle state and waits for the 
user to take some action that causes an event to be fired. When an event is 
fired, it is handled and the program goes idle again waiting for another event.

</para>



	

<para id="p1043">
<emphasis id="em1005" effect="italics">
(Because there are images on the screen, the program does not actually 
	terminate until the user forces it to terminate.)

</emphasis>
</para>





</section>
<section id="h21002">
<title>
<emphasis id="The_class_named_Prob07Runner" effect="bold">

The class named Prob07Runner

</emphasis>


</title>




<para id="p1044">
<emphasis id="strong1053" effect="bold">
Will explain in fragments

</emphasis>
</para>




<para id="p1045">
I will explain this program in fragments. A complete listing of the program 
is provided in 

<link id="a1038" target-id="Listing_10">

Listing 10

</link>

 near the end 
of the module.

</para>




<para id="p1046">
<emphasis id="strong1054" effect="bold">
Beginning of the class named Prob07Runner

</emphasis>
</para>




<para id="p1047">
The class named 

<emphasis id="strong1055" effect="bold">
Prob07Runner

</emphasis>
 begins in


<link id="a1039" target-id="Listing_2">

Listing 2

</link>

.

</para>


	

<table id="table1001" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

 - Beginning of the class named Prob07Runner. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">

				

<code id="pre1001" display="block">class Prob07Runner extends JFrame{

  private JPanel mainPanel = new JPanel();
  private JPanel titlePanel = new JPanel();
  private JSlider slider = new JSlider();

  private Picture background = new Picture("Prob07b.jpg");
  private Picture butterfly = new Picture("Prob07a.jpg");


  private int backgroundWidth = background.getWidth();
  private int backgroundHeight = background.getHeight();
  private int butterflyWidth = butterfly.getWidth();
  private int butterflyHeight = butterfly.getHeight();

  private Picture display =
            new Picture(backgroundWidth,backgroundHeight);
  private Picture tempPicture =
              new Picture(butterflyWidth,butterflyHeight);

  private Image image = null;
  private Graphics graphics = null;</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1048">
<emphasis id="strong1056" effect="bold">
Class extends JFrame

</emphasis>
</para>




<para id="p1049">
Note that this class extends 

<emphasis id="strong1057" effect="bold">
JFrame

</emphasis>
. An object of this class forms the 
lower part of the image shown in 

<link id="a1040" target-id="Figure_1">

Figure 1

</link>

 
that contains the slider.

</para>




<para id="p1050">
The code in 

<link id="a1041" target-id="Listing_1">

Listing 1

</link>

 is 
straightforward and shouldn't require an explanation.

</para>




<para id="p1051">
<emphasis id="strong1058" effect="bold">
When Listing 2 finishes executing...

</emphasis>
</para>




<para id="p1052">
When the code in 

<link id="a1042" target-id="Listing_2">

Listing 2

</link>

 has 
finished executing, four new 

<emphasis id="strong1059" effect="bold">
Picture

</emphasis>
 objects have been instantiated and 
referred to by the following reference variables:

</para>




<list id="ul1008" list-type="bulleted">

	

<item id="li1038">
<emphasis id="strong1060" effect="bold">
background

</emphasis>
 - The beach scene shown in the background in
	

<link id="a1043" target-id="Figure_1">

Figure 1

</link>

.

</item>


	

<item id="li1039">
<emphasis id="strong1061" effect="bold">
butterfly

</emphasis>
 - Contains an opaque image of the butterfly shown in
	

<link id="a1044" target-id="Figure_1">

Figure 1

</link>

.

</item>


	

<item id="li1040">
<emphasis id="strong1062" effect="bold">
display

</emphasis>
 - Empty picture the same size as the beach scene.

</item>


	

<item id="li1041">
<emphasis id="strong1063" effect="bold">
tempPicture

</emphasis>
 - Empty picture the same size as the butterfly.

</item>




</list>




<para id="p1053">
In addition, a pair of working variables named 

<emphasis id="strong1064" effect="bold">
image

</emphasis>
 and 

<emphasis id="strong1065" effect="bold">
graphics

</emphasis>
 
of the types 

<emphasis id="strong1066" effect="bold">
Image

</emphasis>
 and 

<emphasis id="strong1067" effect="bold">
Graphics

</emphasis>
 have been declared.

</para>




<para id="p1054">
Finally, when the code in 

<link id="a1045" target-id="Listing_2">

Listing 2

</link>

 
has finished executing, two new 

<emphasis id="strong1068" effect="bold">
JPanel

</emphasis>
 objects and one new 

<emphasis id="strong1069" effect="bold">
JSlider

</emphasis>
 
object have been instantiated and referred to by the variables named 

<emphasis id="strong1070" effect="bold">

mainPanel

</emphasis>
, 

<emphasis id="strong1071" effect="bold">
titlePanel

</emphasis>
, and 

<emphasis id="strong1072" effect="bold">
slider

</emphasis>
.

</para>




<para id="p1055">
<emphasis id="strong1073" effect="bold">
Beginning of the constructor

</emphasis>
</para>




<para id="p1056">
The beginning of the constructor is shown in


<link id="a1046" target-id="Listing_3">

Listing 3

</link>

.

</para>


	

<table id="table1002" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

 - Beginning of the constructor. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">

				

<code id="pre1002" display="block">  public Prob07Runner(){//constructor
    //Do some initial setup.
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    slider.setMajorTickSpacing(10);
    slider.setMinorTickSpacing(5);
    slider.setPaintTicks(true);
    slider.setPaintLabels(true);

    mainPanel.setLayout(new BorderLayout());
    titlePanel.add(new JLabel(
                         "Percent Opacity of Butterfly"));
    mainPanel.add(titlePanel,BorderLayout.NORTH);
    mainPanel.add(slider,BorderLayout.CENTER);

    getContentPane().add(mainPanel);
    
    setSize(backgroundWidth + 7,97);
    setLocation(0,backgroundHeight + 25);
    setVisible(true);</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1057">
Although it may be necessary for you to go to Sun's Java documentation to 
	learn about the detailed behavior of some of the methods that are called in
	

<link id="a1047" target-id="Listing_3">

Listing 3

</link>

, the code in
	

<link id="a1048" target-id="Listing_3">

Listing 3

</link>

 is straightforward and 
	should not require further explanation.

</para>




<para id="p1058">
<emphasis id="strong1074" effect="bold">
Display the initial background image

</emphasis>
</para>




<para id="p1059">
<link id="a1049" target-id="Listing_4">

Listing 4

</link>

 displays the initial 
background image.

</para>




<para id="p1060">
Instantiating and destroying a lot of new 

<emphasis id="strong1075" effect="bold">
Picture

</emphasis>
 objects as the user 
moves the slider to change the opacity would be very inefficient. To avoid this 
inefficiency, this program gets images from existing 

<emphasis id="strong1076" effect="bold">
Picture

</emphasis>
 objects and 
draws them on existing 

<emphasis id="strong1077" effect="bold">
Picture

</emphasis>
 objects without modifying the originals.

</para>


	

<table id="table1003" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

 - Display the initial image. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">

				

<code id="pre1003" display="block">    graphics = display.getGraphics();
    graphics.drawImage(background.getImage(),0,0,null);</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1061">
<emphasis id="strong1078" effect="bold">
Display the butterfly at 50-percent opacity

</emphasis>
</para>




<para id="p1062">
<link id="a1050" target-id="Listing_5">

Listing 5

</link>

 calls the 

<emphasis id="strong1079" effect="bold">
setOpacity

</emphasis>
 
and 

<emphasis id="strong1080" effect="bold">
drawPictureOnPicture

</emphasis>
 methods to set the opacity of the butterfly and 
draw it onto the display with 50-percent opacity. The image of the butterfly is 
centered on the background.

</para>


	

<table id="table1004" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

 - Display the butterfly at 50-percent opacity. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">



<code id="pre1004" display="block">
    butterfly = setOpacity(butterfly,50);
    drawPictureOnPicture(
                  butterfly,
                  display,
                  backgroundWidth/2 - butterflyWidth/2,
                  backgroundHeight/2 - butterflyHeight/2);
    display.show();</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1063">
<emphasis id="strong1081" effect="bold">
Put the constructor on hold

</emphasis>
</para>




<para id="p1064">
At this point, I will put the discussion of the constructor on hold and 
explain the 

<emphasis id="strong1082" effect="bold">
setOpacity

</emphasis>
 and 

<emphasis id="strong1083" effect="bold">
drawPictureOnPicture

</emphasis>
 methods.

</para>




<para id="p1065">
<emphasis id="strong1084" effect="bold">
The setOpacity method

</emphasis>
</para>




<para id="p1066">
The 

<emphasis id="strong1085" effect="bold">
setOpacity

</emphasis>
 method is shown in its entirety in


<link id="a1051" target-id="Listing_6">

Listing 6

</link>

.

</para>


	
	

<table id="table1005" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

 - The setOpacity method. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">



<code id="pre1005" display="block">
  private Picture setOpacity(
                  Picture pic,double percentOpacity){

    int opacity = (int)(255*percentOpacity/100);
    int opacityMask = opacity &lt;&lt; 24;

    for(int col = 0;col &lt; butterflyWidth;col++){
      for(int row = 0;row &lt; butterflyHeight;row++){
        //Get the pixel in basic int format.
        int basicPixel = pic.getBasicPixel(col,row);

        //Set the alpha value for the pixel.
        basicPixel = basicPixel &amp; 0x00FFFFFF;
        basicPixel = basicPixel | opacityMask;

        //Set the modified pixel into tempPicture.
        tempPicture.setBasicPixel(col,row,basicPixel);
      }//end inner loop
    }//end outer loop

    return tempPicture;

  }//end setOpacity</code>




<code id="pre1006" display="block">

</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1067">
This method copies an incoming picture into an existing temporary 
	picture, setting the alpha value for every pixel to a specified value in the 
	process. Then it returns the modified picture object's reference where it is 
	saved in the reference variable named 

<emphasis id="strong1086" effect="bold">
butterfly

</emphasis>
 in
	

<link id="a1052" target-id="Listing_5">

Listing 5

</link>

,

</para>




<para id="p1068">
<emphasis id="strong1087" effect="bold">
A bitwise left-shift operation

</emphasis>
</para>




<para id="p1069">
The only thing in 

<link id="a1053" target-id="Listing_6">

Listing 6

</link>

 that is 
new to this module is the use of a bitwise left-shift operation.

</para>




<para id="p1070">
<emphasis id="strong1088" effect="bold">
A 24-bit left shift

</emphasis>
</para>




<para id="p1071">
<link id="a1054" target-id="Listing_6">

Listing 6

</link>

 converts the incoming 

<emphasis id="strong1089" effect="bold">

percentOpacity

</emphasis>
 value to an integer value ranging from 0 to 255. This value 
resides in the least significant eight bits of an 

<emphasis id="strong1090" effect="bold">
int

</emphasis>
 variable named 

<emphasis id="strong1091" effect="bold">

opacity

</emphasis>
.

</para>




<para id="p1072">
Then 

<link id="a1055" target-id="Listing_6">

Listing 6

</link>

 applies the bitwise 
left-shift operator 

<emphasis id="em1006" effect="italics">
(two left angle brackets)

</emphasis>
 to shift those eight bits into the eight most 
significant bits and stores the result in another 

<emphasis id="strong1092" effect="bold">
int

</emphasis>
 variable named 

<emphasis id="strong1093" effect="bold">

opacityMask

</emphasis>
.

</para>




<para id="p1073">
<emphasis id="strong1094" effect="bold">
Apply the opacityMask to the pixels

</emphasis>
</para>




<para id="p1074">
A pair of nested 

<emphasis id="strong1095" effect="bold">
for

</emphasis>
 loops is used to set the alpha value of every 
pixel to the value of 

<emphasis id="strong1096" effect="bold">
opacityMask

</emphasis>
 using an overall bit-masking 
methodology that I explained in an earlier module.

</para>




<para id="p1075">
<emphasis id="strong1097" effect="bold">
The drawPictureOnPicture method

</emphasis>
</para>




<para id="p1076">
After the alpha value for every pixel in the butterfly image has been set to 
the specified opacity, 

<link id="a1056" target-id="Listing_5">

Listing 5

</link>

 calls 
the method named 

<emphasis id="strong1098" effect="bold">
drawPictureOnPicture

</emphasis>
 to draw the modified butterfly 
image on the beach scene as shown in 

<link id="a1057" target-id="Figure_1">

Figure 1

</link>

.

</para>




<para id="p1077">
The 

<emphasis id="strong1099" effect="bold">
drawPictureOnPicture

</emphasis>
 method is shown in its entirety in


<link id="a1058" target-id="Listing_7">

Listing 7

</link>

.

</para>


	

<table id="table1006" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

 - The drawPictureOnPicture method. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">

				

<code id="pre1007" display="block">  private void drawPictureOnPicture(
                     Picture source,Picture dest,int xOff,
                                                int yOff){

      Graphics destGraphics = dest.getGraphics();
      Image sourceImage = source.getImage();
      destGraphics.drawImage(sourceImage,
                             xOff,
                             yOff,
                             null);
  }//end drawPictureOnPicture method</code>




<code id="pre1008" display="block">

</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1078">
This method draws the source picture onto the destination picture with an 
	offset on both axes. There is nothing in 

<link id="a1059" target-id="Listing_7">


	Listing 7

</link>

 that I haven't explained in an earlier module.

</para>




<para id="p1079">
<emphasis id="strong1100" effect="bold">
Return to the explanation of the constructor

</emphasis>
</para>




<para id="p1080">
You are already familiar with the use of anonymous inner classes to create 
and register listener objects on Java source objects. The slider is a source 
object.

</para>




<para id="p1081">
<link id="a1060" target-id="Listing_8">

Listing 8

</link>

 begins the registration of 
an anonymous 

<emphasis id="strong1101" effect="bold">
ChangeEvent

</emphasis>
 listener on the slider.

</para>


	

<table id="table1007" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Listing_8" effect="bold">

Listing 8

</emphasis>

 - Begin the registration of an event handler on the slider.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">

				

<code id="pre1009" display="block">    slider.addChangeListener(
      new ChangeListener(){
        public void stateChanged(ChangeEvent e){
          //Draw a new copy of the background on the
          // display.
          graphics = display.getGraphics();
          graphics.drawImage(
                          background.getImage(),0,0,null);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1082">
<emphasis id="strong1102" effect="bold">
Restore the background image

</emphasis>
</para>




<para id="p1083">
Each time the slider fires a 

<emphasis id="strong1103" effect="bold">
ChangeEvent

</emphasis>
, this event handler draws a 
new background image on the display. This erases what was previously drawn 
there, restoring a pristine image of the beach scene.

</para>




<para id="p1084">
<emphasis id="strong1104" effect="bold">
Draw a partially opaque butterfly image on the background

</emphasis>
</para>




<para id="p1085">
Then it uses the current value of the slider to set the opacity of the 
butterfly image and draws it centered on the display on top of the background 
image.

</para>


	

<para id="p1086">
<emphasis id="strong1105" effect="bold">
A series of events

</emphasis>
</para>




<para id="p1087">
The slider fires a series of 

<emphasis id="strong1106" effect="bold">
ChangeEvents

</emphasis>
 as the user moves the thumb 
on the slider. 

<link id="a1061" target-id="Listing_8">

Listing 8

</link>

 begins the 
definition of the event handler method named 

<emphasis id="strong1107" effect="bold">
stateChanged

</emphasis>
, which is 
registered on the slider. This method is called each time the slider fires a 

<emphasis id="strong1108" effect="bold">

ChangeEvent

</emphasis>
.

</para>




<para id="p1088">
<link id="a1062" target-id="Listing_8">

Listing 8

</link>

 draws a new copy of the 
beach background image on the 

<emphasis id="strong1109" effect="bold">
Picture

</emphasis>
 object referred to by the reference 
variable named 

<emphasis id="strong1110" effect="bold">
background

</emphasis>
. This image replaces the image that was 
previously drawn there.

</para>




<para id="p1089">
<emphasis id="strong1111" effect="bold">
Draw the butterfly and repaint

</emphasis>
</para>




<para id="p1090">
<link id="a1063" target-id="Listing_9">

Listing 9

</link>

 calls the 

<emphasis id="strong1112" effect="bold">
setOpacity

</emphasis>
 
and 

<emphasis id="strong1113" effect="bold">
drawPictureOnPicture

</emphasis>
 methods to:

</para>




<list id="ul1009" list-type="bulleted">

	

<item id="li1042">
Set the opacity of the butterfly to the value currently represented by 
	the position of the thumb on the slider. This is the value returned by the 
	slider's 

<emphasis id="strong1114" effect="bold">
getValue

</emphasis>
 method.

</item>


	

<item id="li1043">
Draw the butterfly image on the background image.

</item>




</list>


	

<table id="table1008" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1008">

			

<row id="tr1016">

				

<entry id="th1008">
<emphasis id="Listing_9" effect="bold">

Listing 9

</emphasis>

 - Draw the butterfly and repaint. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1008">

			

<row id="tr1017">

				

<entry id="td1008">

				

<code id="pre1010" display="block">          //Set the opacity of butterfly and copy it onto
          // the display. Then repaint the display.
          butterfly =
                  setOpacity(butterfly,slider.getValue());
          drawPictureOnPicture(
                  butterfly,
                  display,
                  backgroundWidth/2 - butterflyWidth/2,
                  backgroundHeight/2 - butterflyHeight/2);
          
          display.repaint();
        }//end stateChanged
      }//end new ChangeListener
    );//end addChangeListener
    //--------------------------------------------------//
  }//end constructor
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1091">
<emphasis id="strong1115" effect="bold">
Repaint the image

</emphasis>
</para>




<para id="p1092">
Then 

<link id="a1064" target-id="Listing_9">

Listing 9

</link>

 calls the 

<emphasis id="strong1116" effect="bold">
repaint

</emphasis>
 
method to cause the modified image to be rendered onto the computer screen.

</para>




<para id="p1093">
<emphasis id="strong1117" effect="bold">
The end of the program

</emphasis>
</para>




<para id="p1094">
<link id="a1065" target-id="Listing_9">

Listing 9

</link>

 also signals the end of the 
constructor, the end of the class named 

<emphasis id="strong1118" effect="bold">
Prob07Runner

</emphasis>
, and the end of the 
program. 

</para>






</section>
</section>
<section id="h11005">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>






<para id="p1095">
I encourage you to copy the code from 

<link id="a1066" target-id="Listing_10">


Listing 10

</link>

. Compile the code and execute it. Experiment with the code, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>


	

</section>
<section id="h11006">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1096">
In this module, you learned how to use a slider to continuously change the 
opacity of an image and draw that image onto a background image.

</para>




</section>
<section id="h11007">
<title>
<emphasis id="Whats_next" effect="bold">

What's next?

</emphasis>


</title>




<para id="p1097">
In the next module, you will learn how to use a slider to continuously change 
the threshold detection level of an edge detector and to draw the edge-detected 
image on the screen.

</para>


	

</section>
<section id="h11008">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1098">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1119" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1010" list-type="bulleted">

					

<item id="li1044">
Module name: Java OOP: Controlling Opacity with a Slider

</item>


					

<item id="li1045">
File: Java3114.htm


</item>


					

<item id="li1046">
Published: 05/13/12

</item>




<item id="li1047">
Revised: 02/06/16

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1120" effect="bold">
Disclaimers:

</emphasis>
<para id="p1099">
<emphasis id="strong1121" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1100">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1101">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1102">
<emphasis id="strong1122" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


				

</note>

			


		



	





</section>
<section id="h11009">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1103">
A complete listing of the program discussed in this module is shown in


<link id="a1067" target-id="Listing_10">

Listing 10

</link>

 below.

</para>





<para id="p1104">
<emphasis id="strong1123" effect="bold">
<emphasis id="Listing_10" effect="bold">

Listing 10

</emphasis>

 - Complete program 
				listing.

</emphasis>
</para>



				

<code id="pre1011" display="block">/*File Prob07 Copyright 2008 R.G.Baldwin
*********************************************************/
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.BorderLayout;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JLabel;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;

public class Prob07{
  //DO NOT MODIFY THE CODE IN THIS CLASS DEFINITION.
  public static void main(String[] args){
    new Prob07Runner();
  }//end main method
}//end class Prob07
//======================================================//

class Prob07Runner extends JFrame{

  private JPanel mainPanel = new JPanel();
  private JPanel titlePanel = new JPanel();
  private JSlider slider = new JSlider();

  private Picture background = new Picture("Prob07b.jpg");
  private Picture butterfly = new Picture("Prob07a.jpg");


  private int backgroundWidth = background.getWidth();
  private int backgroundHeight = background.getHeight();
  private int butterflyWidth = butterfly.getWidth();
  private int butterflyHeight = butterfly.getHeight();

  private Picture display =
            new Picture(backgroundWidth,backgroundHeight);
  private Picture tempPicture =
              new Picture(butterflyWidth,butterflyHeight);

  private Image image = null;
  private Graphics graphics = null;

  public Prob07Runner(){//constructor
    //Do some initial setup.
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    slider.setMajorTickSpacing(10);
    slider.setMinorTickSpacing(5);
    slider.setPaintTicks(true);
    slider.setPaintLabels(true);

    mainPanel.setLayout(new BorderLayout());
    titlePanel.add(new JLabel(
                         "Percent Opacity of Butterfly"));
    mainPanel.add(titlePanel,BorderLayout.NORTH);
    mainPanel.add(slider,BorderLayout.CENTER);

    getContentPane().add(mainPanel);
    
    setSize(backgroundWidth + 7,97);
    setLocation(0,backgroundHeight + 25);
    setVisible(true);

    //Draw and display the initial image with 50-percent
    // opacity. In order to avoid instantiating and
    // destroying a lot of Picture objects, the
    // procedure is to simply get images from existing
    // picture objects and draw them on other existing
    // picture objects.
    graphics = display.getGraphics();
    graphics.drawImage(background.getImage(),0,0,null);

    //Set the opacity of butterfly and draw it onto the
    // display. In this case, the opacity is set to
    // 50-percent. The image of the butterfly is centered
    // on the background.
    butterfly = setOpacity(butterfly,50);
    drawPictureOnPicture(
                  butterfly,
                  display,
                  backgroundWidth/2 - butterflyWidth/2,
                  backgroundHeight/2 - butterflyHeight/2);
    display.show();
    //--------------------------------------------------//
    //Register an anonymous listener object on the slider.
    //Each time the slider fires a ChangeEvent, this event
    // handler draws a new background image on the
    // display. This erases what was previously drawn
    // there. Then it uses the current value of the slider
    // to set the opacity of the butterfly image and
    // draws it on the display on top of the background
    // image. It is centered on the background image.
    slider.addChangeListener(
      new ChangeListener(){
        public void stateChanged(ChangeEvent e){
          //Draw a new copy of the background on the
          // display.
          graphics = display.getGraphics();
          graphics.drawImage(
                          background.getImage(),0,0,null);

          //Set the opacity of butterfly and copy it onto
          // the display. Then repaint the display.
          butterfly =
                  setOpacity(butterfly,slider.getValue());
          drawPictureOnPicture(
                  butterfly,
                  display,
                  backgroundWidth/2 - butterflyWidth/2,
                  backgroundHeight/2 - butterflyHeight/2);
          display.repaint();
        }//end stateChanged
      }//end new ChangeListener
    );//end addChangeListener
    //--------------------------------------------------//
  }//end constructor
  //----------------------------------------------------//


  //This method copies an incoming picture into an
  // existing temporary picture, setting the alpha value
  // for every pixel to a specified value. Then it returns
  // the modified temporary picture object.
  private Picture setOpacity(
                       Picture pic,double percentOpacity){

    int opacity = (int)(255*percentOpacity/100);
    int opacityMask = opacity &lt;&lt; 24;

    for(int col = 0;col &lt; butterflyWidth;col++){
      for(int row = 0;row &lt; butterflyHeight;row++){
        //Get the pixel in basic int format.
        int basicPixel = pic.getBasicPixel(col,row);

        //Set the alpha value for the pixel.
        basicPixel = basicPixel &amp; 0x00FFFFFF;
        basicPixel = basicPixel | opacityMask;

        //Set the modified pixel into tempPicture.
        tempPicture.setBasicPixel(col,row,basicPixel);
      }//end inner loop
    }//end outer loop

    return tempPicture;

  }//end setOpacity
  //----------------------------------------------------//

  //Draws the source picture onto the destination
  // picture with an offset on both axes.
  private void drawPictureOnPicture(
                     Picture source,Picture dest,int xOff,
                                                int yOff){

      Graphics destGraphics = dest.getGraphics();
      Image sourceImage = source.getImage();
      destGraphics.drawImage(sourceImage,
                             xOff,
                             yOff,
                             null);
  }//end drawPictureOnPicture method
}//end class Prob07Runner
</code>



	

<para id="p1105">
-end- 

</para>






</section>
</content>




</document>