<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Ap0020: Self-assessment, Assignment and Arithmetic Operators</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m45286</md:content-id>
  <md:title>Ap0020: Self-assessment, Assignment and Arithmetic Operators</md:title>
  <md:abstract>Part of a self-assessment test designed to help you determine how much you know about assignment and arithmetic operators in Java.</md:abstract>
  <md:uuid>45ca9687-42ab-4b62-96ab-e575ef60fb34</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


</item>


	

<item id="li1001">
<link id="a1001" target-id="Questions">

Questions

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1002">
<link id="a1002" target-id="question01">

1

</link>

, 

<link id="a1003" target-id="question02">

2

</link>

,
		

<link id="a1004" target-id="question03">

3

</link>

, 

<link id="a1005" target-id="question04">

4

</link>

,
		

<link id="a1006" target-id="question05">

5

</link>

, 

<link id="a1007" target-id="question06">

6

</link>

,
		

<link id="a1008" target-id="question07">

7

</link>

, 

<link id="a1009" target-id="question08">

8

</link>

,
		

<link id="a1010" target-id="question09">

9

</link>

, 

<link id="a1011" target-id="question10">

10

</link>

,
		
		

<link id="a1012" target-id="question11">

11

</link>

, 

<link id="a1013" target-id="question12">

12

</link>

,
		

<link id="a1014" target-id="question13">

13

</link>

, 

<link id="a1015" target-id="question14">

14

</link>

,
		

<link id="a1016" target-id="question15">

15

</link>


		

</item>


	

</list>


	

</item>


	

<item id="li1003">
<link id="a1017" target-id="Programming_challenge_questions">

Programming challenge questions

</link>


<list id="ul1002" list-type="bulleted">

		

<item id="li1004">
<link id="a1018" target-id="question16">

16

</link>

, 

<link id="a1019" target-id="question17">

17

</link>

, 
		

<link id="a1020" target-id="question18">

18

</link>

, 

<link id="a1021" target-id="question19">

19

</link>

, 
		

<link id="a1022" target-id="question20">

20

</link>

, 

<link id="a1023" target-id="question21">

21

</link>

, 
		

<link id="a1024" target-id="question22">

22

</link>


</item>


	

</list>


	

</item>


	

<item id="li1005">
<link id="a1025" target-id="Listings">

Listings

</link>


</item>


	

<item id="li1006">
<link id="a1026" target-id="Miscellaneous">

Miscellaneous

</link>


</item>


	

<item id="li1007">
<link id="a1027" target-id="Answers">

Answers

</link>


</item>




</list>




</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>




<para id="p1000">
This module is part of a self-assessment test designed to help 
you determine how much you know about object-oriented 
programming using Java. 

</para>




<para id="p1001">
<emphasis id="strong1000" effect="bold">
Questions and answers

</emphasis>
</para>




<para id="p1002">
The test consists of a series of 

<link id="a1028" target-id="Questions">

questions

</link>

 with 


<link id="a1029" target-id="Answers">

answers

</link>

 and explanations of 
the answers.

</para>




<para id="p1003">
The questions and the answers are connected by hyperlinks to make it easy for 
you to navigate from the question to the answer and back.

</para>




<para id="p1004">
<emphasis id="strong1001" effect="bold">
Programming challenge questions

</emphasis>
</para>




<para id="p1005">
The module also contains a section titled 


<link id="a1030" target-id="Programming_challenge_questions">

Programming challenge questions

</link>

. This section provides specifications for one or 
more programs that you should be able to write once you understand the answers 
to all of the questions. 

<emphasis id="em1000" effect="italics">
(Note that it is not always possible to confine the 
programming knowledge requirement to this and earlier modules. Therefore, you 
may occasionally need to refer ahead to future modules in order to write the 
programs.)

</emphasis>
</para>




<para id="p1006">
Unlike the other questions, solutions are not provided for the 

<emphasis id="em1001" effect="italics">

Programming challenge questions

</emphasis>
. However, in most cases, the specifications 
will describe the output that your program should produce.

</para>




<para id="p1007">
<emphasis id="strong1002" effect="bold">
Listings

</emphasis>
</para>




<para id="p1008">
I recommend that you open another copy of this document in a separate browser 
window and use the links to under 

<link id="a1031" target-id="Listings">

Listings

</link>

 to easily 
find and view the listings while you are reading about them. 

</para>




</section>
<section id="h11002">
<title>
<emphasis id="Questions" effect="bold">

Questions

</emphasis>


</title>




<section id="h21000">
<title>
<emphasis id="question01" effect="bold">

Question 1

</emphasis>


<emphasis id="strong1003" effect="bold">
. 

</emphasis>
 

</title>




<para id="p1009">
What output is produced by the program shown in 

<link id="a1032" target-id="Listing_1">

Listing 
1

</link>

? 

</para>




<list id="ul1003" list-type="bulleted">

	

<item id="li1008">
A. Compiler Error

</item>


	

<item id="li1009">
B. Runtime Error

</item>


	

<item id="li1010">
C. 3.0

</item>


	

<item id="li1011">
D. 4.0

</item>


	

<item id="li1012">
E. 7.0

</item>




</list>




	

<table id="table1000" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. Listing for Question 1.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">



<code id="pre1000" display="block">public class Ap010{
  public static void main(
                        String args[]){
    new Worker().doAsg();
  }//end main()
}//end class definition

class Worker{
  public void doAsg(){
    double myVar;
    myVar = 3.0;
    myVar += 4.0;
    System.out.println(myVar);
  }//end doAsg()
}//end class definition
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1010">
<link id="a1033" target-id="answer01">

Answer and Explanation

</link>

 

</para>




</section>
<section id="h21001">
<title>
<emphasis id="question02" effect="bold">

Question 2

</emphasis>


</title>




<para id="p1011">
What output is produced by the program shown in 

<link id="a1034" target-id="Listing_2">

Listing 
2

</link>

? 

</para>




<list id="ul1004" list-type="bulleted">

	

<item id="li1013">
A. Compiler Error

</item>


	

<item id="li1014">
B. Runtime Error

</item>


	

<item id="li1015">
C. 2.147483647E9

</item>


	

<item id="li1016">
D. 2.14748365E9

</item>




</list>




	

<table id="table1001" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. Listing for Question 2.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">



<code id="pre1001" display="block">public class Ap011{
  public static void main(
                        String args[]){
    new Worker().doAsg();
  }//end main()
}//end class definition

class Worker{
  public void doAsg(){
    double myDoubleVar;
    //Integer.MAX_VALUE = 2147483647
    int myIntVar = Integer.MAX_VALUE;
    myDoubleVar = myIntVar;
    System.out.println(myDoubleVar);
  }//end doAsg()
}//end class definition
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1012">
<link id="a1035" target-id="answer02">

Answer and Explanation

</link>

 

</para>




</section>
<section id="h21002">
<title>
<emphasis id="question03" effect="bold">

Question 3

</emphasis>

 

</title>




<para id="p1013">
What output is produced by the following program? 

</para>




<list id="ul1005" list-type="bulleted">

	

<item id="li1017">
A. Compiler Error

</item>


	

<item id="li1018">
B. Runtime Error

</item>


	

<item id="li1019">
C. 2147483647

</item>


	

<item id="li1020">
D. 2.147483647E9

</item>




</list>




	

<table id="table1002" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. Listing for Question 3.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">



<code id="pre1002" display="block">public class Ap012{
  public static void main(
                        String args[]){
    new Worker().doAsg();
  }//end main()
}//end class definition

class Worker{
  public void doAsg(){
    //Integer.MAX_VALUE = 2147483647
    double myDoubleVar =
                    Integer.MAX_VALUE;
    int myIntVar;
    myIntVar = myDoubleVar;
    System.out.println(myIntVar);
  }//end doAsg()
}//end class definition
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1014">
<link id="a1036" target-id="answer03">

Answer and Explanation

</link>

 

</para>




</section>
<section id="h21003">
<title>
<emphasis id="question04" effect="bold">

Question 4

</emphasis>


</title>




<para id="p1015">
What output is produced by the program shown in 

<link id="a1037" target-id="Listing_4">

Listing 
4

</link>

? 

</para>




<list id="ul1006" list-type="bulleted">

	

<item id="li1021">
A. Compiler Error

</item>


	

<item id="li1022">
B. Runtime Error

</item>


	

<item id="li1023">
C. 2147483647

</item>


	

<item id="li1024">
D. 2.147483647E9

</item>




</list>




	

<table id="table1003" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. Listing for Question 4.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">



<code id="pre1003" display="block">public class Ap013{
  public static void main(
                        String args[]){
    new Worker().doAsg();
  }//end main()
}//end class definition

class Worker{
  public void doAsg(){
    //Integer.MAX_VALUE = 2147483647
    double myDoubleVar =
                    Integer.MAX_VALUE;
    int myIntVar;
    myIntVar = (int)myDoubleVar;
    System.out.println(myIntVar);
  }//end doAsg()
}//end class definition
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1016">
<link id="a1038" target-id="answer04">

Answer and Explanation

</link>

 

</para>




</section>
<section id="h21004">
<title>
<emphasis id="question05" effect="bold">

Question 5

</emphasis>


</title>




<para id="p1017">
What output is produced by the program shown in 

<link id="a1039" target-id="Listing_5">

Listing 
5

</link>

? 

</para>




<list id="ul1007" list-type="bulleted">

	

<item id="li1025">
A. Compiler Error

</item>


	

<item id="li1026">
B. Runtime Error

</item>


	

<item id="li1027">
C. 4.294967294E9

</item>


	

<item id="li1028">
D. 4294967294

</item>




</list>




	

<table id="table1004" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

. Listing for Question 5.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">



<code id="pre1004" display="block">public class Ap014{
  public static void main(
                        String args[]){
    new Worker().doMixed();
  }//end main()
}//end class definition

class Worker{
  public void doMixed(){
    //Integer.MAX_VALUE = 2147483647
    int myIntVar = Integer.MAX_VALUE;
    System.out.println(2.0 * myIntVar);
  }//end doMixed()
}//end class definition
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1018">
<link id="a1040" target-id="answer05">

Answer and Explanation

</link>


</para>




</section>
<section id="h21005">
<title>
<emphasis id="question06" effect="bold">

Question 6

</emphasis>


</title>




<para id="p1019">
What output is produced by the program shown in 

<link id="a1041" target-id="Listing_6">

Listing 
6

</link>

? 

</para>




<list id="ul1008" list-type="bulleted">

	

<item id="li1029">
A. Compiler Error

</item>


	

<item id="li1030">
B. Runtime Error

</item>


	

<item id="li1031">
C. 2147483649

</item>


	

<item id="li1032">
D. -2147483647

</item>




</list>




	

<table id="table1005" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

. Listing for Question 6.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">



<code id="pre1005" display="block">public class Ap015{
  public static void main(
                        String args[]){
    new Worker().doMixed();
  }//end main()
}//end class definition

class Worker{
  public void doMixed(){
    //Integer.MAX_VALUE = 2147483647
    int myVar01 = Integer.MAX_VALUE;
    int myVar02 = 2;
    System.out.println(
                    myVar01 + myVar02);
  }//end doMixed()
}//end class definition
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1020">
<link id="a1042" target-id="answer06">

Answer and Explanation

</link>

 

</para>




</section>
<section id="h21006">
<title>
<emphasis id="question07" effect="bold">

Question 7

</emphasis>


</title>




<para id="p1021">
What output is produced by the program shown in 

<link id="a1043" target-id="Listing_7">

Listing 
7

</link>

? 

</para>




<list id="ul1009" list-type="bulleted">

	

<item id="li1033">
A. Compiler Error

</item>


	

<item id="li1034">
B. Runtime Error

</item>


	

<item id="li1035">
C. 33.666666

</item>


	

<item id="li1036">
D. 34

</item>


	

<item id="li1037">
E. 33

</item>




</list>




	

<table id="table1006" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

. Listing for Question 7.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">



<code id="pre1006" display="block">public class Ap016{
  public static void main(
                        String args[]){
    new Worker().doMixed();
  }//end main()
}//end class definition

class Worker{
  public void doMixed(){
    int myVar01 = 101;
    int myVar02 = 3;
    System.out.println(
                      myVar01/myVar02);
  }//end doMixed()
}//end class definition
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>







<para id="p1022">
<link id="a1044" target-id="answer07">

Answer and Explanation

</link>


</para>




</section>
<section id="h21007">
<title>
<emphasis id="question08" effect="bold">

Question 8

</emphasis>

 

</title>




<para id="p1023">
What output is produced by the program shown in 

<link id="a1045" target-id="Listing_8">

Listing 
8

</link>

? 

</para>




<list id="ul1010" list-type="bulleted">

	

<item id="li1038">
A. Compiler Error

</item>


	

<item id="li1039">
B. Runtime Error

</item>


	

<item id="li1040">
C. Infinity

</item>


	

<item id="li1041">
D. 11

</item>




</list>




	

<table id="table1007" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Listing_8" effect="bold">

Listing 8

</emphasis>

. Listing for Question 8.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">



<code id="pre1007" display="block">public class Ap017{
  public static void main(
                        String args[]){
    new Worker().doMixed();
  }//end main()
}//end class definition

class Worker{
  public void doMixed(){
    int myVar01 = 11;
    int myVar02 = 0;
    System.out.println(
                      myVar01/myVar02);
  }//end doMixed()
}//end class definition
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1024">
<link id="a1046" target-id="answer08">

Answer and Explanation

</link>

 

</para>




</section>
<section id="h21008">
<title>
<emphasis id="question09" effect="bold">

Question 9

</emphasis>


</title>




<para id="p1025">
What output is produced by the program shown in 

<link id="a1047" target-id="Listing_9">

Listing 
9

</link>

? 

</para>




<list id="ul1011" list-type="bulleted">

	

<item id="li1042">
A. Compiler Error

</item>


	

<item id="li1043">
B. Runtime Error

</item>


	

<item id="li1044">
C. Infinity

</item>


	

<item id="li1045">
D. 11

</item>




</list>




	

<table id="table1008" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1008">

			

<row id="tr1016">

				

<entry id="th1008">
<emphasis id="Listing_9" effect="bold">

Listing 9

</emphasis>

. Listing for Question 9.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1008">

			

<row id="tr1017">

				

<entry id="td1008">



<code id="pre1008" display="block">public class Ap018{
  public static void main(
                        String args[]){
    new Worker().doMixed();
  }//end main()
}//end class definition

class Worker{
  public void doMixed(){
    double myVar01 = 11;
    double myVar02 = 0;
    System.out.println(
                      myVar01/myVar02);
  }//end doMixed()
}//end class definition
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1026">
<link id="a1048" target-id="answer09">

Answer and Explanation

</link>

 

</para>





</section>
<section id="h21009">
<title>
<emphasis id="question10" effect="bold">

Question 10

</emphasis>


</title>




<para id="p1027">
What output is produced by the program shown in 

<link id="a1049" target-id="Listing_10">

Listing 
10

</link>

? 

</para>




<list id="ul1012" list-type="bulleted">

	

<item id="li1046">
A. Compiler Error

</item>


	

<item id="li1047">
B. Runtime Error

</item>


	

<item id="li1048">
C. 2

</item>


	

<item id="li1049">
D. -2

</item>




</list>




	

<table id="table1009" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1009">

			

<row id="tr1018">

				

<entry id="th1009">
<emphasis id="Listing_10" effect="bold">

Listing 10

</emphasis>

. Listing for Question 
				10.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1009">

			

<row id="tr1019">

				

<entry id="td1009">



<code id="pre1009" display="block">public class Ap019{
  public static void main(
                        String args[]){
    new Worker().doMod();
  }//end main()
}//end class definition

class Worker{
  public void doMod(){
    int myVar01 = -11;
    int myVar02 = 3;
    System.out.println(
                      myVar01 % myVar02);
  }//end doMod()
}//end class definition
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1028">
<link id="a1050" target-id="answer10">

Answer and Explanation

</link>


</para>





</section>
<section id="h21010">
<title>
<emphasis id="question11" effect="bold">

Question 11

</emphasis>


</title>




<para id="p1029">
What output is produced by the program shown in 

<link id="a1051" target-id="Listing_11">

Listing 
11

</link>

? 

</para>




<list id="ul1013" list-type="bulleted">

	

<item id="li1050">
A. Compiler Error

</item>


	

<item id="li1051">
B. Runtime Error

</item>


	

<item id="li1052">
C. 2

</item>


	

<item id="li1053">
D. 11

</item>




</list>


	

<table id="table1010" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1010">

			

<row id="tr1020">

				

<entry id="th1010">
<emphasis id="Listing_11" effect="bold">

Listing 11

</emphasis>

. Listing for Question 
				11.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1010">

			

<row id="tr1021">

				

<entry id="td1010">



<code id="pre1010" display="block">public class Ap020{
  public static void main(
                        String args[]){
    new Worker().doMod();
  }//end main()
}//end class definition

class Worker{
  public void doMod(){
    int myVar01 = -11;
    int myVar02 = 0;
    System.out.println(
                      myVar01 % myVar02);
  }//end doMod()
}//end class definition</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1030">
<link id="a1052" target-id="answer11">

Answer and Explanation

</link>


</para>





</section>
<section id="h21011">
<title>
<emphasis id="question12" effect="bold">

Question 12

</emphasis>


</title>




<para id="p1031">
What output is produced by the program shown in 

<link id="a1053" target-id="Listing_12">

Listing 
12

</link>

? 

</para>




<list id="ul1014" list-type="bulleted">

	

<item id="li1054">
A. Compiler Error

</item>


	

<item id="li1055">
B. Runtime Error

</item>


	

<item id="li1056">
C. -0.010999999999999996

</item>


	

<item id="li1057">
D. 0.010999999999999996

</item>




</list>





	

<table id="table1011" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1011">

			

<row id="tr1022">

				

<entry id="th1011">
<emphasis id="Listing_12" effect="bold">

Listing 12

</emphasis>

. Listing for Question 
				12.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1011">

			

<row id="tr1023">

				

<entry id="td1011">



<code id="pre1011" display="block">public class Ap021{
  public static void main(
                        String args[]){
    new Worker().doMod();
  }//end main()
}//end class definition

class Worker{
  public void doMod(){
    double myVar01 = -0.11;
    double myVar02 = 0.033;
    System.out.println(
                      myVar01 % myVar02);
  }//end doMod()
}//end class definition</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1032">
<link id="a1054" target-id="answer12">

Answer and Explanation

</link>


</para>





</section>
<section id="h21012">
<title>
<emphasis id="question13" effect="bold">

Question 13

</emphasis>


</title>




<para id="p1033">
What output is produced by the program shown in 

<link id="a1055" target-id="Listing_13">

Listing 
13

</link>

? 

</para>




<list id="ul1015" list-type="bulleted">

	

<item id="li1058">
A. Compiler Error

</item>


	

<item id="li1059">
B. Runtime Error

</item>


	

<item id="li1060">
C. 0.0

</item>


	

<item id="li1061">
D. 1.5499999999999996

</item>




</list>





	

<table id="table1012" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1012">

			

<row id="tr1024">

				

<entry id="th1012">
<emphasis id="Listing_13" effect="bold">

Listing 13

</emphasis>

. Listing for Question 
				13.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1012">

			

<row id="tr1025">

				

<entry id="td1012">



<code id="pre1012" display="block">public class Ap022{
  public static void main(
                        String args[]){
    new Worker().doMod();
  }//end main()
}//end class definition

class Worker{
  public void doMod(){
    double myVar01 = 15.5;
    double myVar02 = 1.55;
    System.out.println(
                      myVar01 % myVar02);
  }//end doMod()
}//end class definition</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1034">
<link id="a1056" target-id="answer13">

Answer and Explanation

</link>


</para>





</section>
<section id="h21013">
<title>
<emphasis id="question14" effect="bold">

Question 14

</emphasis>


</title>




<para id="p1035">
What output is produced by the program shown in 

<link id="a1057" target-id="Listing_14">

Listing 
14

</link>

? 

</para>




<list id="ul1016" list-type="bulleted">

	

<item id="li1062">
A. Compiler Error

</item>


	

<item id="li1063">
B. Runtime Error

</item>


	

<item id="li1064">
C. Infinity

</item>


	

<item id="li1065">
D. NaN

</item>




</list>


	

<table id="table1013" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1013">

			

<row id="tr1026">

				

<entry id="th1013">
<emphasis id="Listing_14" effect="bold">

Listing 14

</emphasis>

. Listing for Question 
				14.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1013">

			

<row id="tr1027">

				

<entry id="td1013">



<code id="pre1013" display="block">public class Ap023{
  public static void main(
                        String args[]){
    new Worker().doMod();
  }//end main()
}//end class definition

class Worker{
  public void doMod(){
    double myVar01 = 15.5;
    double myVar02 = 0.0;
    System.out.println(
                      myVar01 % myVar02);
  }//end doMod()
}//end class definition</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1036">
<link id="a1058" target-id="answer14">

Answer and Explanation

</link>


</para>





</section>
<section id="h21014">
<title>
<emphasis id="question15" effect="bold">

Question 15

</emphasis>


</title>




<para id="p1037">
What output is produced by the program shown in 

<link id="a1059" target-id="Listing_15">

Listing 
15

</link>

? 

</para>




<list id="ul1017" list-type="bulleted">

	

<item id="li1066">
A. Compiler Error

</item>


	

<item id="li1067">
B. Runtime Error

</item>


	

<item id="li1068">
C. -3 2

</item>


	

<item id="li1069">
D. -3 -2

</item>




</list>





	

<table id="table1014" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1014">

			

<row id="tr1028">

				

<entry id="th1014">
<emphasis id="Listing_15" effect="bold">

Listing 15

</emphasis>

. Listing for Question 
				15.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1014">

			

<row id="tr1029">

				

<entry id="td1014">



<code id="pre1014" display="block">public class Ap024{
  public static void main(
                        String args[]){
    new Worker().doMod();
  }//end main()
}//end class definition

class Worker{
  public void doMod(){
    int x = 11;
    int y = -3;
    System.out.println(
                      x/y + " " + x % y);
  }//end doMod()
}//end class definition</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1038">
<link id="a1060" target-id="answer15">

Answer and Explanation

</link>


</para>




</section>
</section>
<section id="h11003">
<title>
<emphasis id="Programming_challenge_questions" effect="bold">

Programming challenge questions

</emphasis>


</title>





<section id="h21015">
<title>
<emphasis id="question16" effect="bold">

Question 16

</emphasis>


</title>




<para id="p1039">
Write the program described in 

<link id="a1061" target-id="Listing_16">

Listing 16

</link>

.

</para>





	

<table id="table1015" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1015">

			

<row id="tr1030">

				

<entry id="th1015">
<emphasis id="Listing_16" effect="bold">

Listing 16

</emphasis>

. Listing for Question 16. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1015">

			

<row id="tr1031">

				

<entry id="td1015">



<code id="pre1015" display="block">
/*File Ap0020a1.java Copyright 2012, R.G.Baldwin

Instructions to student:
Beginning with the code fragment shown below, write a
method named doIt that:
1. Illustrates the proper use of the combined 
arithmetic/assignment operators such as the following
operators:

+= 
*=

**********************************************************/
public class Ap0020a1{
  public static void main(String args[]){
    new Worker().doIt();
  }//end main()
}//end class definition 
//=======================================================//

class Worker{
  //-----------------------------------------------------//
  //Student: insert the method named doIt between these
  // lines.
  //-----------------------------------------------------//
}//end class definition
//=======================================================//
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>







</section>
<section id="h21016">
<title>
<emphasis id="question17" effect="bold">

Question 17

</emphasis>


</title>




<para id="p1040">
Write the program described in 

<link id="a1062" target-id="Listing_17">

Listing 17

</link>

.

</para>





	

<table id="table1016" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1016">

			

<row id="tr1032">

				

<entry id="th1016">
<emphasis id="Listing_17" effect="bold">

Listing 17

</emphasis>

. Listing for Question 17. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1016">

			

<row id="tr1033">

				

<entry id="td1016">



<code id="pre1016" display="block">
/*File Ap0020b1.java Copyright 2012, R.G.Baldwin

Instructions to student:
Beginning with the code fragment shown below, write a
method named doIt that:
1. Illustrates the detrimental impact of integer arithmetic
overflow.

**********************************************************/
public class Ap0020b1{
  public static void main(String args[]){
    new Worker().doIt();
  }//end main()
}//end class definition 
//=======================================================//

class Worker{
  //-----------------------------------------------------//
  //Student: insert the method named doIt between these
  // lines.
  //-----------------------------------------------------//
}//end class definition
//=======================================================//
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>







</section>
<section id="h21017">
<title>
<emphasis id="question18" effect="bold">

Question 18

</emphasis>


</title>




<para id="p1041">
Write the program described in 

<link id="a1063" target-id="Listing_18">

Listing 18

</link>

.

</para>





	

<table id="table1017" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1017">

			

<row id="tr1034">

				

<entry id="th1017">
<emphasis id="Listing_18" effect="bold">

Listing 18

</emphasis>

. Listing for Question 18. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1017">

			

<row id="tr1035">

				

<entry id="td1017">



<code id="pre1017" display="block">
/*File Ap0020c1.java Copyright 2012, R.G.Baldwin

Instructions to student:
Beginning with the code fragment shown below, write a
method named doIt that:
1. Illustrates the effect of integer truncation that 
occurs with integer division.

**********************************************************/
public class Ap0020c1{
  public static void main(String args[]){
    new Worker().doIt();
  }//end main()
}//end class definition 
//=======================================================//

class Worker{
  //-----------------------------------------------------//
  //Student: insert the method named doIt between these
  // lines.
  //-----------------------------------------------------//
}//end class definition
//=======================================================//
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>







</section>
<section id="h21018">
<title>
<emphasis id="question19" effect="bold">

Question 19

</emphasis>


</title>




<para id="p1042">
Write the program described in 

<link id="a1064" target-id="Listing_19">

Listing 19

</link>

.

</para>





	

<table id="table1018" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1018">

			

<row id="tr1036">

				

<entry id="th1018">
<emphasis id="Listing_19" effect="bold">

Listing 19

</emphasis>

. Listing for Question 19. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1018">

			

<row id="tr1037">

				

<entry id="td1018">



<code id="pre1018" display="block">
/*File Ap0020d1.java Copyright 2012, R.G.Baldwin

Instructions to student:
Beginning with the code fragment shown below, write a
method named doIt that:
1. Illustrates the effect of double divide by zero.
2. Illustrates the effect of integer divide by zero.

**********************************************************/
public class Ap0020d1{
  public static void main(String args[]){
    new Worker().doIt();
  }//end main()
}//end class definition 
//=======================================================//

class Worker{
  //-----------------------------------------------------//
  //Student: insert the method named doIt between these
  // lines.
  //-----------------------------------------------------//
}//end class definition
//=======================================================//
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>







</section>
<section id="h21019">
<title>
<emphasis id="question20" effect="bold">

Question 20

</emphasis>


</title>




<para id="p1043">
Write the program described in 

<link id="a1065" target-id="Listing_20">

Listing 20

</link>

.

</para>





	

<table id="table1019" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1019">

			

<row id="tr1038">

				

<entry id="th1019">
<emphasis id="Listing_20" effect="bold">

Listing 20

</emphasis>

. Listing for Question 
				20. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1019">

			

<row id="tr1039">

				

<entry id="td1019">



<code id="pre1019" display="block">
/*File Ap0020e1.java Copyright 2012, R.G.Baldwin

Instructions to student:
Beginning with the code fragment shown below, write a
method named doIt that:
1. Illustrates the effect of the modulus operation with
integers.

**********************************************************/
public class Ap0020e1{
  public static void main(String args[]){
    new Worker().doIt();
  }//end main()
}//end class definition 
//=======================================================//

class Worker{
  //-----------------------------------------------------//
  //Student: insert the method named doIt between these
  // lines.
  //-----------------------------------------------------//
}//end class definition
//=======================================================//
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>












</section>
<section id="h21020">
<title>
<emphasis id="question21" effect="bold">

Question 21

</emphasis>


</title>




<para id="p1044">
Write the program described in 

<link id="a1066" target-id="Listing_21">

Listing 21

</link>

.

</para>





	

<table id="table1020" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1020">

			

<row id="tr1040">

				

<entry id="th1020">
<emphasis id="Listing_21" effect="bold">

Listing 21

</emphasis>

. Listing for Question 
				21. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1020">

			

<row id="tr1041">

				

<entry id="td1020">



<code id="pre1020" display="block">
/*File Ap0020f1.java Copyright 2012, R.G.Baldwin

Instructions to student:
Beginning with the code fragment shown below, write a
method named doIt that:
1. Illustrates the effect of the modulus operation with
doubles.

**********************************************************/
public class Ap0020f1{
  public static void main(String args[]){
    new Worker().doIt();
  }//end main()
}//end class definition 
//=======================================================//

class Worker{
  //-----------------------------------------------------//
  //Student: insert the method named doIt between these
  // lines.
  //-----------------------------------------------------//
}//end class definition
//=======================================================//
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>







</section>
<section id="h21021">
<title>
<emphasis id="question22" effect="bold">

Question 22

</emphasis>


</title>




<para id="p1045">
Write the program described in 

<link id="a1067" target-id="Listing_22">

Listing 22

</link>

.

</para>





	

<table id="table1021" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1021">

			

<row id="tr1042">

				

<entry id="th1021">
<emphasis id="Listing_22" effect="bold">

Listing 22

</emphasis>

. Listing for Question 
				22. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1021">

			

<row id="tr1043">

				

<entry id="td1021">



<code id="pre1021" display="block">
/*File Ap0020g1.java Copyright 2012, R.G.Baldwin

Instructions to student:
Beginning with the code fragment shown below, write a
method named doIt that:
1. Illustrates the concatenation of the following strings
separated by space characters.

"This"
"is"
"fun"

Cause your program to produce the following output:
This
is
fun
This is fun
**********************************************************/
public class Ap0020g1{
  public static void main(String args[]){
    new Worker().doIt();
  }//end main()
}//end class definition 
//=======================================================//

class Worker{
  //-----------------------------------------------------//
  //Student: insert the method named doIt between these
  // lines.
  //-----------------------------------------------------//
}//end class definition
//=======================================================//
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>












</section>
</section>
<section id="h11004">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<para id="p1046">
I recommend that you open another copy of this document in a separate browser 
window and use the following links to easily 
find and view the listings while you are reading about them.

</para>




<list id="ul1018" list-type="bulleted">

	

<item id="li1070">
<link id="a1068" target-id="Listing_1">

Listing 1

</link>

. Listing for Question 1. 

</item>


	

<item id="li1071">
<link id="a1069" target-id="Listing_2">

Listing 2

</link>

. Listing for Question 2. 

</item>


	

<item id="li1072">
<link id="a1070" target-id="Listing_3">

Listing 3

</link>

. Listing for Question 3. 

</item>


	

<item id="li1073">
<link id="a1071" target-id="Listing_4">

Listing 4

</link>

. Listing for Question 4. 

</item>


	

<item id="li1074">
<link id="a1072" target-id="Listing_5">

Listing 5

</link>

. Listing for Question 5. 

</item>


	

<item id="li1075">
<link id="a1073" target-id="Listing_6">

Listing 6

</link>

. Listing for Question 6. 

</item>


	

<item id="li1076">
<link id="a1074" target-id="Listing_7">

Listing 7

</link>

. Listing for Question 7. 

</item>


	
	

<item id="li1077">
<link id="a1075" target-id="Listing_8">

Listing 8

</link>

. Listing for Question 8. 

</item>


	

<item id="li1078">
<link id="a1076" target-id="Listing_9">

Listing 9

</link>

. Listing for Question 9. 

</item>


	

<item id="li1079">
<link id="a1077" target-id="Listing_10">

Listing 10

</link>

. Listing for Question 10. 

</item>


	

<item id="li1080">
<link id="a1078" target-id="Listing_11">

Listing 11

</link>

. Listing for Question 11. 

</item>


	

<item id="li1081">
<link id="a1079" target-id="Listing_12">

Listing 12

</link>

. Listing for Question 12. 

</item>


	

<item id="li1082">
<link id="a1080" target-id="Listing_13">

Listing 13

</link>

. Listing for Question 13. 

</item>


	

<item id="li1083">
<link id="a1081" target-id="Listing_14">

Listing 14

</link>

. Listing for Question 14. 

</item>


	

<item id="li1084">
<link id="a1082" target-id="Listing_15">

Listing 15

</link>

. Listing for Question 15. 

</item>



	

<item id="li1085">
<link id="a1083" target-id="Listing_16">

Listing 16

</link>

. Listing for Question 16. 

</item>


	

<item id="li1086">
<link id="a1084" target-id="Listing_17">

Listing 17

</link>

. Listing for Question 17. 

</item>


	

<item id="li1087">
<link id="a1085" target-id="Listing_18">

Listing 18

</link>

. Listing for Question 18. 

</item>


	

<item id="li1088">
<link id="a1086" target-id="Listing_19">

Listing 19

</link>

. Listing for Question 19. 

</item>


	

<item id="li1089">
<link id="a1087" target-id="Listing_20">

Listing 20

</link>

. Listing for Question 20. 

</item>


	

<item id="li1090">
<link id="a1088" target-id="Listing_21">

Listing 21

</link>

. Listing for Question 21. 

</item>


	

<item id="li1091">
<link id="a1089" target-id="Listing_22">

Listing 22

</link>

. Listing for Question 22. 

</item>





</list>




</section>
<section id="h11005">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>




<para id="p1047">
This section contains a variety of miscellaneous information. 

</para>





	

<note id="note1000" type="">


		


			

<emphasis id="strong1004" effect="bold">
Housekeeping material

</emphasis>

			

<list id="ul1019" list-type="bulleted">

				

<item id="li1092">
Module name: Ap0020: Self-assessment, Assignment and 
				Arithmetic Operators

</item>


				

<item id="li1093">
File: Ap0020.htm 

</item>


				

<item id="li1094">
Originally published: January 7, 2002

</item>


				

<item id="li1095">
Published at cnx.org: 12/01/12

</item>


				

<item id="li1096">
Revised: 12/03/14

</item>


			

</list>


			

</note>

		









	

<note id="note1001" type="">


		


			

<emphasis id="strong1005" effect="bold">
Disclaimers:

</emphasis>
<para id="p1048">
<emphasis id="strong1006" effect="bold">
Financial

</emphasis>
: 
			Although the Connexions site makes it possible for you to download a 
			PDF file for this module at no charge, and also makes it possible 
			for you to purchase a pre-printed version of the PDF file, you 
			should be aware that some of the HTML elements in this module may 
			not translate well into PDF.

</para>


			

<para id="p1049">
I also want you to know that, I receive no financial compensation 
			from the Connexions website even if you purchase the PDF version of 
			the module.

</para>


			

<para id="p1050">
In the past, unknown individuals have copied my modules from 
			cnx.org, converted them to Kindle books, and placed them for sale on 
			Amazon.com showing me as the author. I neither receive compensation 
			for those sales nor do I know who does receive compensation. If you 
			purchase such a book, please be aware that it is a copy of a module 
			that is freely available on cnx.org and that it was made and 
			published without my prior knowledge.

</para>


			

<para id="p1051">
<emphasis id="strong1007" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer 
			Information Technology at Austin Community College in Austin, TX.
			

</para>


			

</note>

		








</section>
<section id="h11006">
<title>
<emphasis id="Answers" effect="bold">

Answers

</emphasis>


</title>





<section id="h21022">
<title>
<emphasis id="answer15" effect="bold">

Answer 15

</emphasis>


</title>




<para id="p1052">
C. -3 2 

</para>




<section id="h31000">
<title>
<emphasis id="strong1008" effect="bold">
Explanation 15

</emphasis>
</title>


<para id="p1053">



<emphasis id="strong1009" effect="bold">
String concatenation

</emphasis>



</para>




<para id="p1054">
This program uses 

<emphasis id="strong1010" effect="bold">
String

</emphasis>
 concatenation, which has not been previously 
discussed in this group of self-assessment modules. 

</para>




<para id="p1055">
In this case, the program executes both an integer divide operation and an 
integer modulus operation, using 

<emphasis id="strong1011" effect="bold">
String

</emphasis>
 concatenation to display both results on 
a single line of output. 

</para>




<para id="p1056">
<emphasis id="strong1012" effect="bold">
Quotient = -3 with a remainder of 2 

</emphasis>
 

</para>




<para id="p1057">
Thus, the displayed result is the integer quotient followed by the remainder.


</para>




<para id="p1058">
<emphasis id="strong1013" effect="bold">
What is String concatenation?

</emphasis>
 

</para>




<para id="p1059">
If either operand of the plus (+) operator is of type 

<emphasis id="strong1014" effect="bold">
String

</emphasis>
, no attempt is 
made to perform arithmetic addition. Rather, the other operand is 
converted to a 

<emphasis id="strong1015" effect="bold">
String

</emphasis>
, and the two strings are concatenated. 

</para>




<para id="p1060">
<emphasis id="strong1016" effect="bold">
A space character, " " 

</emphasis>
 

</para>




<para id="p1061">
The string containing a space character (" ") in this expression appears as 
the right operand of one plus operator and as the left operand of the other plus 
operator. 

</para>




<para id="p1062">
If you already knew about 

<emphasis id="strong1017" effect="bold">
String

</emphasis>
 concatenation, you should have been able to 
figure out the correct answer to the question on the basis of the answers to 
earlier questions in this module. 

</para>




<para id="p1063">
<link id="a1090" target-id="question15">

Back to Question 15

</link>

 

</para>





</section>
</section>
<section id="h21023">
<title>
<emphasis id="answer14" effect="bold">

Answer 14

</emphasis>


</title>




<para id="p1064">
D. NaN 

</para>




<section id="h31001">
<title>
<emphasis id="strong1018" effect="bold">
Explanation 14

</emphasis>
</title>


<para id="p1065">



<emphasis id="strong1019" effect="bold">
Floating modulus operation involves floating divide


</emphasis>



</para>




<para id="p1066">
The modulus operation with floating operands and 0.0 as the right operand 
produces 

<emphasis id="strong1020" effect="bold">
NaN

</emphasis>
, which stands for 

<emphasis id="em1002" effect="italics">
Not a Number

</emphasis>
. 

</para>




<para id="p1067">
<emphasis id="strong1021" effect="bold">
What is the actual value of Not a Number? 

</emphasis>
 

</para>




<para id="p1068">
A symbolic constant that is accessible as 

<emphasis id="strong1022" effect="bold">
Double.NaN

</emphasis>
 specifies the value that 
is returned in this case. 

</para>




<para id="p1069">
Be careful what you try to do with it. It has some peculiar behavior of 
its own. 

</para>




<para id="p1070">
<link id="a1091" target-id="question14">

Back to Question 14

</link>

 

</para>





</section>
</section>
<section id="h21024">
<title>
<emphasis id="answer13" effect="bold">

Answer 13

</emphasis>


</title>




<para id="p1071">
D. 1.5499999999999996 

</para>




<section id="h31002">
<title>
<emphasis id="strong1023" effect="bold">
Explanation 13

</emphasis>
</title>


<para id="p1072">



<emphasis id="strong1024" effect="bold">
A totally incorrect result


</emphasis>



</para>




<para id="p1073">
Unfortunately, due to floating arithmetic inaccuracy, the modulus operation 
in this program produces an entirely incorrect result. 

</para>




<para id="p1074">
The result should be 0.0, and that is the result produced by my hand 
calculator. 

</para>




<para id="p1075">
<emphasis id="strong1025" effect="bold">
Terminates one step too early 

</emphasis>
 

</para>




<para id="p1076">
However, this program terminates the repetitive subtraction process one step 
too early and produces an incorrect remainder. 

</para>




<para id="p1077">
<emphasis id="strong1026" effect="bold">
Be careful 

</emphasis>
 

</para>




<para id="p1078">
This program is included here to emphasize the need to be very careful how 
you interpret the result of performing modulus operations on floating operands.


</para>




<para id="p1079">
<link id="a1092" target-id="question13">

Back to Question 13

</link>

 

</para>





</section>
</section>
<section id="h21025">
<title>
<emphasis id="answer12" effect="bold">

Answer 12

</emphasis>


</title>




<para id="p1080">
C. -0.010999999999999996 

</para>




<section id="h31003">
<title>
<emphasis id="strong1027" effect="bold">
Explanation 12

</emphasis>
</title>


<para id="p1081">



<emphasis id="strong1028" effect="bold">
Modulus operator can be used with floating types

</emphasis>



</para>




<para id="p1082">
In this case, the program returns the remainder that would be produced by 
dividing a double value of -0.11 by a double value of 0.033 and terminating the 
divide operation at the beginning of the fractional part of the quotient. 

</para>




<para id="p1083">
<emphasis id="strong1029" effect="bold">
Say that again 

</emphasis>
 

</para>




<para id="p1084">
Stated differently, the result of the modulus operation is the remainder that 
results after 

</para>




<list id="ul1020" list-type="bulleted">

	

<item id="li1097">
subtracting the right operand from the left operand an integral number 
	of times, and

</item>


	

<item id="li1098">
terminating the repetitive subtraction process when the result of the 
	subtraction is less than the right operand

</item>




</list>


<para id="p1085">



<emphasis id="strong1030" effect="bold">
Modulus result is not exact


</emphasis>



</para>




<para id="p1086">
According to my hand calculator, taking into account the fact that the left 
operand is negative, this operation should produce a modulus result of 
-0.011. As you can see, the result produced by the application of the 
modulus operation to floating types is not exact. 

</para>




<para id="p1087">
<link id="a1093" target-id="question12">

Back to Question 12

</link>

 

</para>





</section>
</section>
<section id="h21026">
<title>
<emphasis id="answer11" effect="bold">

Answer 11

</emphasis>


</title>




<para id="p1088">
B. Runtime Error 

</para>




<section id="h31004">
<title>
<emphasis id="strong1031" effect="bold">
Explanation 11

</emphasis>
</title>


<para id="p1089">



<emphasis id="strong1032" effect="bold">
Integer modulus involves integer divide


</emphasis>



</para>




<para id="p1090">
The modulus operation with integer operands involves an integer divide. 

</para>




<para id="p1091">
Therefore, it is subject to the same kind of problem as an ordinary integer 
divide when the right operand has a value of zero. 

</para>




<para id="p1092">
<emphasis id="strong1033" effect="bold">
Program produces a runtime error 

</emphasis>
 

</para>




<para id="p1093">
In this case, the program produced a runtime error that terminated the 
program. The error produced by JDK 1.3 is as follows: 

</para>







	

<table id="table1022" summary="This is a table." pgwide="1000">
<tgroup cols="1">


		

<tbody id="tbody1022">

			

<row id="tr1044">

				

<entry id="td1022">

				

<code id="pre1022" display="block">Exception in thread "main" java.lang.ArithmeticException: / by zero 
        at Worker.doMod(Ap020.java:14) 
        at Ap020.main(Ap020.java:6)</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




<para id="p1094">
<emphasis id="strong1034" effect="bold">
Dealing with the problem 

</emphasis>
 

</para>




<para id="p1095">
As with integer divide, you can either test the right operand for a zero 
value before performing the modulus operation, or you can deal with the problem 
after the fact using try-catch. 

</para>




<para id="p1096">
<link id="a1094" target-id="question11">

Back to Question 11

</link>

 

</para>





</section>
</section>
<section id="h21027">
<title>
<emphasis id="answer10" effect="bold">

Answer 10

</emphasis>


</title>




<para id="p1097">
D. -2 

</para>




<section id="h31005">
<title>
<emphasis id="strong1035" effect="bold">
Explanation 10

</emphasis>
</title>


<para id="p1098">



<emphasis id="strong1036" effect="bold">
What is a modulus operation?


</emphasis>



</para>




<para id="p1099">
In elementary terms, we like to say that the modulus operation returns the 
remainder that results from a divide operation. 

</para>




<para id="p1100">
In general terms, that is true. 

</para>




<para id="p1101">
<emphasis id="strong1037" effect="bold">
Some interesting behavior 

</emphasis>
 

</para>




<para id="p1102">
However, the modulus operation has some interesting behaviors that are 
illustrated in this and the next several questions. 

</para>




<para id="p1103">
This program returns the modulus of -11 and 3, with -11 being the left 
operand. 

</para>




<para id="p1104">
<emphasis id="strong1038" effect="bold">
What is the algebraic sign of the result?

</emphasis>
 

</para>




<para id="p1105">
Here is a rule: 

</para>



	

<para id="p1106">
<emphasis id="em1003" effect="italics">
The result of the modulus operation takes the sign of the left operand, 
	regardless of the sign of the quotient and regardless of the sign of the 
	right operand.
In this program, that produced a result of -2.


</emphasis>
</para>





<para id="p1107">
Changing the sign of the right operand would 

<emphasis id="strong1039" effect="bold">
<emphasis id="em1004" effect="italics">
not

</emphasis>
</emphasis>
 have changed the sign of the 
result. 

</para>




<para id="p1108">
<emphasis id="strong1040" effect="bold">
Exercise care with sign of modulus result 

</emphasis>
 

</para>




<para id="p1109">
Thus, you may need to exercise care as to how you interpret the result when 
you perform a modulus operation having a negative left operand. 

</para>




<para id="p1110">
<link id="a1095" target-id="question10">

Back to Question 10

</link>

 

</para>







</section>
</section>
<section id="h21028">
<title>
<emphasis id="answer09" effect="bold">

Answer 9

</emphasis>

 

</title>




<para id="p1111">
C. Infinity 

</para>




<section id="h31006">
<title>
<emphasis id="strong1041" effect="bold">
Explanation 9

</emphasis>
</title>


<para id="p1112">



<emphasis id="strong1042" effect="bold">
Floating divide by zero

</emphasis>



</para>




<para id="p1113">
This program attempts to divide the 

<emphasis id="strong1043" effect="bold">
double

</emphasis>
 value of 11 by 
the 

<emphasis id="strong1044" effect="bold">
double

</emphasis>
 value of zero. 

</para>




<para id="p1114">
<emphasis id="strong1045" effect="bold">
No runtime error with floating divide by zero 

</emphasis>
</para>




<para id="p1115">
In the case of floating types, an attempt to divide by zero does not produce 
a runtime error. Rather, it returns a value that the 

<emphasis id="strong1046" effect="bold">
println

</emphasis>
 
method interprets and displays as Infinity. 

</para>




<para id="p1116">
<emphasis id="strong1047" effect="bold">
What is the actual value?

</emphasis>
 

</para>




<para id="p1117">
The actual value returned by this program is provided by a 

<emphasis id="strong1048" effect="bold">
static 
final

</emphasis>
 variable in the 

<emphasis id="strong1049" effect="bold">
Double

</emphasis>
 class named 

<emphasis id="strong1050" effect="bold">

POSITIVE_INFINITY

</emphasis>
. 

</para>




<para id="p1118">
<emphasis id="em1005" effect="italics">
(There is also a value for NEGATIVE_INFINITY, which is the value that 
would be returned if one of the operands were a negative value.)

</emphasis>
 

</para>




<para id="p1119">
<emphasis id="strong1051" effect="bold">
Is this a better approach? 

</emphasis>
</para>




<para id="p1120">
Is this a better approach than throwing an exception as is the case for 
integer divide by zero? 

</para>




<para id="p1121">
I will let you be the judge of that. 

</para>




<para id="p1122">
In either case, you can test the right operand before the divide to assure 
that it isn't equal to zero. 

</para>




<para id="p1123">
<emphasis id="strong1052" effect="bold">
Cannot use exception handling in this case

</emphasis>
 

</para>




<para id="p1124">
For floating divide by zero, you cannot handle the problem by using 
try-catch. 

</para>




<para id="p1125">
However, you can test the result following the divide to see if it is equal 
to either of the infinity values mentioned above. 

</para>




<para id="p1126">
<link id="a1096" target-id="question09">

Back to Question 9

</link>

 

</para>





</section>
</section>
<section id="h21029">
<title>
<emphasis id="answer08" effect="bold">

Answer 8

</emphasis>

 

</title>




<para id="p1127">
B. Runtime Error 

</para>




<section id="h31007">
<title>
<emphasis id="strong1053" effect="bold">
Explanation 8

</emphasis>
</title>


<para id="p1128">



<emphasis id="strong1054" effect="bold">
Dividing by zero


</emphasis>



</para>




<para id="p1129">
This program attempts to divide the 

<emphasis id="strong1055" effect="bold">
int

</emphasis>
 value of 11 by the 


<emphasis id="strong1056" effect="bold">
int

</emphasis>
 value of zero.


</para>




<para id="p1130">
<emphasis id="strong1057" effect="bold">
Integer divide by zero is not allowed 

</emphasis>
 

</para>




<para id="p1131">
This produces a runtime error and terminates the program. 

</para>




<para id="p1132">
The runtime error is as follows under JDK 1.3: 

</para>







	

<table id="table1023" summary="This is a table." pgwide="1000">
<tgroup cols="1">


		

<tbody id="tbody1023">

			

<row id="tr1045">

				

<entry id="td1023">

				

<code id="pre1023" display="block">
Exception in thread "main" java.lang.ArithmeticException: / by zero
     at Worker.doMixed(Ap017.java:14)
     at Ap017.main(Ap017.java:6)</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




<para id="p1133">
<emphasis id="strong1058" effect="bold">
Two ways to deal with this sort of problem 

</emphasis>
 

</para>




<para id="p1134">
One way is to test the right operand before each divide operation to assure 
that it isn't equal to zero, and to take appropriate action if it is. 

</para>




<para id="p1135">
A second 

<emphasis id="em1006" effect="italics">
(possibly preferred)

</emphasis>
 way is to use exception handling and surround 
the divide operation with a 

<emphasis id="em1007" effect="italics">
try

</emphasis>
 block, followed by a 

<emphasis id="em1008" effect="italics">
catch

</emphasis>
 block for the type


</para>







	

<table id="table1024" summary="This is a table." pgwide="1000">
<tgroup cols="1">


		

<tbody id="tbody1024">

			

<row id="tr1046">

				

<entry id="td1024">

				

<code id="pre1024" display="block">java.lang.ArithmeticException.</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




<para id="p1136">
The code in the catch block can be designed to deal with the problem if it 
occurs. 

<emphasis id="em1009" effect="italics">
(Exception handling will be discussed in a future module.)


</emphasis>
 

</para>




<para id="p1137">
<link id="a1097" target-id="question08">

Back to Question 8

</link>

 

</para>




</section>
</section>
<section id="h21030">
<title>
<emphasis id="answer07" effect="bold">

Answer 7

</emphasis>

 

</title>




<para id="p1138">
E. 33 

</para>




<section id="h31008">
<title>
<emphasis id="strong1059" effect="bold">
Explanation 7

</emphasis>
</title>


<para id="p1139">



<emphasis id="strong1060" effect="bold">
Integer truncation


</emphasis>



</para>




<para id="p1140">
This program illustrates the integer truncation that results when the 
division operator is applied to operands of the integer types. 

</para>




<para id="p1141">
<emphasis id="strong1061" effect="bold">
The result of simple long division 

</emphasis>
 

</para>




<para id="p1142">
We all know that when we divide 101 by 3, the result is 33.666666 with the 
sixes extending out to the limit of our arithmetic accuracy. 

</para>




<para id="p1143">
<emphasis id="strong1062" effect="bold">
The result of rounding 

</emphasis>
 

</para>




<para id="p1144">
If we round the result to the next closest integer, the result is 34. 

</para>




<para id="p1145">
<emphasis id="strong1063" effect="bold">
Integer division does not round

</emphasis>
 

</para>




<para id="p1146">
However, when division is performed using operands of integer types in Java, 
the fractional part is simply discarded 

<emphasis id="em1010" effect="italics">
(not rounded)

</emphasis>
. 

</para>




<para id="p1147">
The result is the whole number result without regard for the fractional part 
or the remainder. 

</para>




<para id="p1148">
Thus, with integer division, 101/3 produces the integer value 33. 

</para>




<para id="p1149">
<emphasis id="strong1064" effect="bold">
If either operand is a floating type ... 

</emphasis>
 

</para>




<para id="p1150">
If either operand is one of the floating types, 

</para>




<list id="ul1021" list-type="bulleted">

	

<item id="li1099">
the integer operand will be converted to the floating type,

</item>


	

<item id="li1100">
the result will be of the floating type, and

</item>


	

<item id="li1101">
the fractional part of the result will be preserved to some degree of 
	accuracy

</item>




</list>




<para id="p1151">
<link id="a1098" target-id="question07">

Back to Question 7

</link>

 

</para>




</section>
</section>
<section id="h21031">
<title>
<emphasis id="answer06" effect="bold">

Answer 6

</emphasis>


</title>




<para id="p1152">
D. -2147483647 

</para>




<section id="h31009">
<title>
<emphasis id="strong1065" effect="bold">
Explanation 6

</emphasis>
</title>


<para id="p1153">



<emphasis id="strong1066" effect="bold">
Danger, integer overflow ahead! 

</emphasis>



</para>




<para id="p1154">
This program illustrates a very dangerous situation involving arithmetic 
using operands of integer types. This situation involves a condition 
commonly known as 

<emphasis id="em1011" effect="italics">
integer overflow

</emphasis>
. 

</para>




<para id="p1155">
<emphasis id="strong1067" effect="bold">
The good news

</emphasis>
 

</para>




<para id="p1156">
The good news about doing arithmetic using operands of integer types is that 
as long as the result is within the allowable value range for the wider of the 
integer types, the results are exact 

<emphasis id="em1012" effect="italics">
(floating arithmetic often produces results 
that are not exact)

</emphasis>
. 

</para>




<para id="p1157">
<emphasis id="strong1068" effect="bold">
The bad news 

</emphasis>
 

</para>




<para id="p1158">
The bad news about doing arithmetic using operands of integer types is that 
when the result is not within the allowable value range for the wider of the 
integer types, the results are garbage, having no usable relationship to the 
correct result 

<emphasis id="em1013" effect="italics">
(floating arithmetic has a high probability of producing 
approximately correct results, even though the results may not be exact).

</emphasis>
 

</para>




<para id="p1159">
<emphasis id="strong1069" effect="bold">
For this specific case ...

</emphasis>
 

</para>




<para id="p1160">
As you can see by the answer to this question, when a value of 2 was added to 
the largest positive value that can be stored in type 

<emphasis id="strong1070" effect="bold">
int

</emphasis>
, the incorrect result 
was a very large negative value. 

</para>




<para id="p1161">
The result is simply incorrect. 

<emphasis id="em1014" effect="italics">
(If you know how to do binary 
arithmetic, you can figure out how this happens.) 

</emphasis>
 

</para>




<para id="p1162">
<emphasis id="strong1071" effect="bold">
No safety net in this case -- just garbage 

</emphasis>
 

</para>




<para id="p1163">
Furthermore, there was no compiler error and no runtime error. The 
program simply produced an incorrect result with no warning. 

</para>




<para id="p1164">
You need to be especially careful when writing programs that perform 
arithmetic using operands of integer types. Otherwise, your programs may 
produce incorrect results. 

</para>




<para id="p1165">
<link id="a1099" target-id="question06">

Back to Question 6

</link>

 

</para>






</section>
</section>
<section id="h21032">
<title>
<emphasis id="answer05" effect="bold">

Answer 5

</emphasis>


</title>




<para id="p1166">
C. 4.294967294E9 

</para>




<section id="h31010">
<title>
<emphasis id="strong1072" effect="bold">
Explanation 5

</emphasis>
</title>




<para id="p1167">
<emphasis id="strong1073" effect="bold">
Mixed-type arithmetic


</emphasis>



</para>




<para id="p1168">
This program illustrates the use of arithmetic operators with operands of 
different types. 

</para>




<para id="p1169">
<emphasis id="strong1074" effect="bold">
Declare and initialize an int 

</emphasis>
 

</para>




<para id="p1170">
The method named 

<emphasis id="strong1075" effect="bold">
doMixed

</emphasis>
 declares a local variable of type 

int
 named 

<emphasis id="strong1076" effect="bold">
myIntVar

</emphasis>
 
and initializes it with the largest positive value that can be stored in type 


<emphasis id="strong1077" effect="bold">
int

</emphasis>
. 

</para>




<para id="p1171">
<emphasis id="strong1078" effect="bold">
Evaluate an arithmetic expression

</emphasis>
 

</para>




<para id="p1172">
An arithmetic expression involving 

<emphasis id="strong1079" effect="bold">
myIntVar

</emphasis>
 is evaluated and the result is 
passed as a parameter to the 

<emphasis id="strong1080" effect="bold">
println

</emphasis>
 method where it is displayed on the 
computer screen. 

</para>




<para id="p1173">
<emphasis id="strong1081" effect="bold">
Multiply by a literal double value 

</emphasis>
 

</para>




<para id="p1174">
The arithmetic expression uses the multiplication operator (*) to multiply 
the value stored in 

<emphasis id="strong1082" effect="bold">
myIntVar

</emphasis>
 by 2.0 

<emphasis id="em1015" effect="italics">
(this literal operand is type 


<emphasis id="strong1083" effect="bold">
double

</emphasis>
 by 
default)

</emphasis>
. 

</para>




<para id="p1175">
<emphasis id="strong1084" effect="bold">
Automatic conversion to wider type

</emphasis>
 

</para>




<para id="p1176">
When arithmetic is performed using operands of different types, the type of 
the operand of the narrower type is automatically converted to the type of the 
operand of the wider type, and the arithmetic is performed on the basis of the 
wider type. 

</para>




<para id="p1177">
<emphasis id="strong1085" effect="bold">
Result is of the wider type

</emphasis>
 

</para>




<para id="p1178">
The type of the result is the same as the wider type. 

</para>




<para id="p1179">
<emphasis id="strong1086" effect="bold">
In this case ... 

</emphasis>
 

</para>




<para id="p1180">
Because the left operand is type 

<emphasis id="strong1087" effect="bold">
double

</emphasis>
, the 

<emphasis id="strong1088" effect="bold">
int

</emphasis>
 value is 
converted to type 

<emphasis id="strong1089" effect="bold">
double

</emphasis>
 and the arithmetic is performed as type 


<emphasis id="strong1090" effect="bold">
double

</emphasis>
. 

</para>




<para id="p1181">
This produces a result of type 

<emphasis id="strong1091" effect="bold">
double

</emphasis>
, causing the floating value 
4.294967294E9 to be displayed on the computer screen. 

</para>




<para id="p1182">
<link id="a1100" target-id="question05">

Back to Question 5

</link>

 

</para>




</section>
</section>
<section id="h21033">
<title>
<emphasis id="answer04" effect="bold">

Answer 4

</emphasis>

 

</title>




<para id="p1183">
C. 2147483647 

</para>




<section id="h31011">
<title>
<emphasis id="strong1092" effect="bold">
Explanation 4

</emphasis>
</title>


<para id="p1184">



<emphasis id="strong1093" effect="bold">
Uses a cast operator


</emphasis>



</para>




<para id="p1185">
This program, named 

<emphasis id="strong1094" effect="bold">
Ap013.java

</emphasis>
, differs from the earlier program named 


<emphasis id="strong1095" effect="bold">
Ap012.java

</emphasis>
 in one important respect. 

</para>




<para id="p1186">
This program uses a 

<emphasis id="em1016" effect="italics">
cast operator

</emphasis>
 to force the compiler 
to allow a narrowing conversion in order to assign a 

<emphasis id="strong1096" effect="bold">
double

</emphasis>
 value to an 


<emphasis id="strong1097" effect="bold">
int

</emphasis>
 
variable. 

</para>




<para id="p1187">
<emphasis id="strong1098" effect="bold">
The cast operator

</emphasis>
 

</para>




<para id="p1188">
The statement containing the cast operator is shown below for convenient 
viewing. 

</para>







	

<table id="table1025" summary="This is a table." pgwide="1000">
<tgroup cols="1">


		

<tbody id="tbody1025">

			

<row id="tr1047">

				

<entry id="td1025">
<code id="pre1025" display="block">    myIntVar = (int)myDoubleVar;</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1189">
<emphasis id="strong1099" effect="bold">
Syntax of a cast operator 

</emphasis>
 

</para>




<para id="p1190">
The cast operator consists of the name of a type contained within a pair of 
matching parentheses. 

</para>




<para id="p1191">
<emphasis id="strong1100" effect="bold">
A unary operator 

</emphasis>
 

</para>




<para id="p1192">
The cast operator always appears to the left of an expression whose type is 
being converted to the type specified by the cast operator. 

</para>




<para id="p1193">
<emphasis id="strong1101" effect="bold">
Assuming responsibility for potential problems

</emphasis>
 

</para>




<para id="p1194">
When dealing with primitive types, the cast operator is used to notify the 
compiler that the programmer is willing to assume the risk of a possible loss of 
precision in a narrowing conversion. 

</para>




<para id="p1195">
<emphasis id="strong1102" effect="bold">
No loss of precision here

</emphasis>
 

</para>




<para id="p1196">
In this case, there was no loss in precision, but that was only because the 
value stored in the 

<emphasis id="strong1103" effect="bold">
double

</emphasis>
 variable was within the allowable value range for an 


<emphasis id="strong1104" effect="bold">
int

</emphasis>
. 

</para>




<para id="p1197">
In fact, it was the largest positive value that can be stored in the type 


<emphasis id="strong1105" effect="bold">
int

</emphasis>
. Had it been any larger, a loss of precision would have occurred. 

</para>




<para id="p1198">
<emphasis id="strong1106" effect="bold">
More on this later ... 

</emphasis>
 

</para>




<para id="p1199">
I will have quite a bit more to say about the cast operator in future 
modules. I will also have more to say about the use of the assignment 
operator in conjunction with the non-primitive types. 

</para>



	


<para id="p1200">
<link id="a1101" target-id="question04">

Back to Question 4

</link>

 

</para>




</section>
</section>
<section id="h21034">
<title>
<emphasis id="answer03" effect="bold">

Answer 3

</emphasis>

 

</title>




<para id="p1201">
A. Compiler Error 

</para>




<section id="h31012">
<title>
<emphasis id="strong1107" effect="bold">
Explanation 3

</emphasis>
</title>


<para id="p1202">



<emphasis id="strong1108" effect="bold">
Conversion from double to int is not automatic


</emphasis>



</para>




<para id="p1203">
This program attempts to assign a value of type 

<emphasis id="strong1109" effect="bold">
double

</emphasis>
 to a variable of type 


<emphasis id="strong1110" effect="bold">
int

</emphasis>
. 

</para>




<para id="p1204">
Even though we know that the specific double value involved would fit in the 


<emphasis id="strong1111" effect="bold">
int

</emphasis>
 variable with no loss of precision, the conversion from 


<emphasis id="strong1112" effect="bold">
double

</emphasis>
 to 

<emphasis id="strong1113" effect="bold">
int

</emphasis>
 is not 
a 

<emphasis id="em1017" effect="italics">
widening

</emphasis>
 conversion. 

</para>




<para id="p1205">
<emphasis id="strong1114" effect="bold">
This is a narrowing conversion 

</emphasis>
 

</para>




<para id="p1206">
In fact, it is a 

<emphasis id="em1018" effect="italics">
narrowing

</emphasis>
 conversion because the allowable value range for 
an 

<emphasis id="strong1115" effect="bold">
int

</emphasis>
 is less than the allowable value range for a 

<emphasis id="strong1116" effect="bold">
double

</emphasis>
. 

</para>




<para id="p1207">
The conversion is not allowed by the compiler. The following compiler 
error occurs under JDK 1.3: 

</para>







	

<table id="table1026" summary="This is a table." pgwide="1000">
<tgroup cols="1">


		

<tbody id="tbody1026">

			

<row id="tr1048">

				

<entry id="td1026">

				

<code id="pre1026" display="block">Ap012.java:16: possible loss of precision 
found   : double 
required: int 
    myIntVar = myDoubleVar    myIntVar = myDoubleVar; </code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




<para id="p1208">
<link id="a1102" target-id="question03">

Back to Question 3

</link>

 

</para>




</section>
</section>
<section id="h21035">
<title>
<emphasis id="answer02" effect="bold">

Answer 2

</emphasis>


</title>




<para id="p1209">
C. 2.147483647E9 

</para>




<section id="h31013">
<title>
<emphasis id="strong1117" effect="bold">
Explanation 2

</emphasis>
</title>




<para id="p1210">
<emphasis id="strong1118" effect="bold">
Declare a double

</emphasis>



</para>




<para id="p1211">
The method named 

<emphasis id="strong1119" effect="bold">
doAsg

</emphasis>
 first declares a local variable of type 


<emphasis id="strong1120" effect="bold">
double

</emphasis>
 named 

<emphasis id="strong1121" effect="bold">
myDoubleVar

</emphasis>
 without providing an initial value. 

</para>




<para id="p1212">
<emphasis id="strong1122" effect="bold">
Declare and initialize an int 

</emphasis>
 

</para>




<para id="p1213">
Then it declares an 

<emphasis id="strong1123" effect="bold">
int

</emphasis>
 variable named 

<emphasis id="strong1124" effect="bold">
myIntVar

</emphasis>
 and initializes its value to 
the integer value 2147483647 

<emphasis id="em1019" effect="italics">
(you learned about Integer.MAX_VALUE in an earlier 
module)

</emphasis>
. 

</para>




<para id="p1214">
<emphasis id="strong1125" effect="bold">
Assign the int to the double 

</emphasis>
 

</para>




<para id="p1215">
Following this, the method assigns contents of the 

<emphasis id="strong1126" effect="bold">
int

</emphasis>
 variable to the 


<emphasis id="strong1127" effect="bold">
double

</emphasis>
 variable.


</para>




<para id="p1216">
<emphasis id="strong1128" effect="bold">
An assignment compatible conversion

</emphasis>
 

</para>




<para id="p1217">
This is an 

<emphasis id="em1020" effect="italics">
assignment compatible

</emphasis>
 conversion. In particular, the integer 
value of 2147483647 is automatically converted to a 

<emphasis id="strong1129" effect="bold">
double

</emphasis>
 value and stored in 
the 

<emphasis id="strong1130" effect="bold">
double

</emphasis>
 variable. 

</para>




<para id="p1218">
The 

<emphasis id="strong1131" effect="bold">
double

</emphasis>
 representation of that value is what appears on the screen later 
when the value of 

<emphasis id="strong1132" effect="bold">
myDoubleVar

</emphasis>
 is displayed. 

</para>




<para id="p1219">
<emphasis id="strong1133" effect="bold">
What is an assignment compatible conversion? 

</emphasis>
 

</para>




<para id="p1220">
An assignment compatible conversion for the primitive types occurs when the 
required conversion is a 

<emphasis id="em1021" effect="italics">
widening

</emphasis>
 conversion. 

</para>




<para id="p1221">
<emphasis id="strong1134" effect="bold">
What is a widening conversion? 

</emphasis>
 

</para>




<para id="p1222">
A widening conversion occurs when the allowable value range of the type of 
the left operand of the assignment operator is greater than the allowable value 
range of the right operand of the assignment operator. 

</para>




<para id="p1223">
<emphasis id="strong1135" effect="bold">
A double is wider than an int

</emphasis>
 

</para>




<para id="p1224">
Since the allowable value range of type 

<emphasis id="strong1136" effect="bold">
double

</emphasis>
 is greater than the allowable 
value range of type 

<emphasis id="strong1137" effect="bold">
int

</emphasis>
, assignment of an 

<emphasis id="strong1138" effect="bold">
int

</emphasis>
 value to a 


<emphasis id="strong1139" effect="bold">
double

</emphasis>
 variable is 
allowed, with conversion from 

<emphasis id="strong1140" effect="bold">
int

</emphasis>
 to 

<emphasis id="strong1141" effect="bold">
double

</emphasis>
 occurring automatically. 

</para>




<para id="p1225">
<emphasis id="strong1142" effect="bold">
A safe conversion 

</emphasis>
 

</para>




<para id="p1226">
It is also significant to note that there is no loss in precision when 
converting from an 

<emphasis id="strong1143" effect="bold">
int

</emphasis>
 to a 

<emphasis id="strong1144" effect="bold">
double

</emphasis>
. 

</para>




<para id="p1227">
<emphasis id="strong1145" effect="bold">
An unsafe but allowable conversion 

</emphasis>
 

</para>




<para id="p1228">
However, a loss of precision may occur when an 

<emphasis id="strong1146" effect="bold">
int

</emphasis>
 is assigned to a 


<emphasis id="strong1147" effect="bold">
float

</emphasis>
, or 
when a 

<emphasis id="strong1148" effect="bold">
long

</emphasis>
 is assigned to a 

<emphasis id="strong1149" effect="bold">
double

</emphasis>
. 

</para>




<para id="p1229">
<emphasis id="strong1150" effect="bold">
<emphasis id="What_would_a_float_produce" effect="bold">

What would a float produce

</emphasis>

?

</emphasis>
 

</para>




<para id="p1230">
The value of 2.14748365E9 shown for selection D is what you would see for 
this program if you were to change the 

<emphasis id="strong1151" effect="bold">
double

</emphasis>
 variable to a 


<emphasis id="strong1152" effect="bold">
float

</emphasis>
 variable. 


<emphasis id="em1022" effect="italics">
(Contrast this with 2147483647 to see the loss of precision.) 

</emphasis>
 

</para>




<para id="p1231">
<emphasis id="strong1153" effect="bold">
Widening is no guarantee that precision will be preserved 

</emphasis>
 

</para>




<para id="p1232">
The fact that a type conversion is a widening conversion does not guarantee 
that there will be no loss of precision in the conversion. It simply 
guarantees that the conversion will be allowed by the compiler. In some 
cases, such as that shown 

<link id="a1103" target-id="What_would_a_float_produce">

above

</link>

, an assignment compatible conversion can result 
in a loss of precision, so you always need to be aware of what you are doing.


</para>




<para id="p1233">
<link id="a1104" target-id="question02">

Back to Question 2

</link>

 

</para>






</section>
</section>
<section id="h21036">
<title>
<emphasis id="answer01" effect="bold">

Answer 1

</emphasis>

 

</title>




<para id="p1234">
E. 7.0 

</para>




<section id="h31014">
<title>
<emphasis id="strong1154" effect="bold">
Explanation 1

</emphasis>
</title>


<para id="p1235">



<emphasis id="strong1155" effect="bold">
Declare but don't initialize a double variable


</emphasis>



</para>




<para id="p1236">
The method named 

<emphasis id="strong1156" effect="bold">
doAsg

</emphasis>
 begins by declaring a 

<emphasis id="strong1157" effect="bold">
double

</emphasis>
 variable named


<emphasis id="strong1158" effect="bold">
myVar

</emphasis>
 
without initializing it. 

</para>




<para id="p1237">
<emphasis id="strong1159" effect="bold">
Use the simple assignment operator 

</emphasis>
 

</para>




<para id="p1238">
The simple assignment operator (=) is then used to assign the 


<emphasis id="strong1160" effect="bold">
double

</emphasis>
 
value 3.0 to the variable. Following the execution of that statement, the 
variable contains the value 3.0. 

</para>




<para id="p1239">
<emphasis id="strong1161" effect="bold">
Use the arithmetic/assignment operator 

</emphasis>
 

</para>




<para id="p1240">
The next statement uses the combined arithmetic/assignment operator (+=) 
to add the value 4.0 to the value of 3.0 previously assigned to the variable. 
The following two statements are functionally equivalent: 

</para>







	

<table id="table1027" summary="This is a table." pgwide="1000">
<tgroup cols="1">


		

<tbody id="tbody1027">

			

<row id="tr1049">

				

<entry id="td1027">
<code id="pre1027" display="block">
myVar += 4.0;

myVar = myVar + 4.0;</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




<para id="p1241">
<emphasis id="strong1162" effect="bold">
Two statements are equivalent 

</emphasis>
 

</para>




<para id="p1242">
This program uses the first statement listed above. If you were to 
replace the first statement with the second statement, the result would be the 
same. 

</para>




<para id="p1243">
In this case, either statement would add the value 4.0 to the value of 3.0 
that was previously assigned to the variable named 

<emphasis id="strong1163" effect="bold">
myVar

</emphasis>
, producing the sum of 
7.0. Then it would assign the sum of 7.0 back to the variable. When 
the contents of the variable are then displayed, the result is that 7.0 appears 
on the computer screen. 

</para>




<para id="p1244">
<emphasis id="strong1164" effect="bold">
No particular benefit

</emphasis>
 

</para>




<para id="p1245">
To the knowledge of this author, there is no particular benefit to using the 
combined arithmetic/assignment notation other than to reduce the amount of 
typing required to produce the source code. However, if you ever plan to 
interview for a job as a Java programmer, you need to know how to use the 
combined version.

</para>




<para id="p1246">
<emphasis id="strong1165" effect="bold">
Four other similar operators

</emphasis>
</para>




<para id="p1247">
Java support several combined operators. Some involve arithmetic and some 
involve other operations such as bit shifting. Five of the combined operators 
are shown below. These five all involve arithmetic.

</para>




<list id="ul1022" list-type="bulleted">

	

<item id="li1102">
+=

</item>


	

<item id="li1103">
-=

</item>


	

<item id="li1104">
*=

</item>


	

<item id="li1105">
/=

</item>


	

<item id="li1106">
%=

</item>




</list>


<para id="p1248">

In all five cases, you can construct a functionally equivalent arithmetic and 
assignment statement in the same way that I constructed the functionally 
equivalent statement for += above.


</para>




<para id="p1249">
<link id="a1105" target-id="question01">

Back to Question 1

</link>

 

</para>




<para id="p1250">
-end- 

</para>






</section>
</section>
</section>
</content>




</document>