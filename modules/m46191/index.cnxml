<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Java4110: The Comparator Interface, Part 3</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m46191</md:content-id>
  <md:title>Java4110: The Comparator Interface, Part 3</md:title>
  <md:abstract>The module shows you how to use a Comparator to cause a TreeSet collection to be sorted in descending order while preserving the impact of differences in case.</md:abstract>
  <md:uuid>f6577895-f16b-4336-9f6d-074e5c89df4b</md:uuid>
</metadata>

<content>






<para id="p1000">
Revised: Thu Apr 07 11:52:29 CDT 2016

</para>




<para id="p1001">
<emphasis id="em1000" effect="italics">
This page is included in the following Books:

</emphasis>
</para>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">

	

<link id="a1000" url="http://cnx.org/contents/dzOvxPFw">


<emphasis id="em1001" effect="italics">
ITSE 2321 - Object-Oriented Programming (Java)

</emphasis>
</link>


</item>


	

<item id="li1001">

	

<link id="a1001" url="http://cnx.org/contents/-2RmHFs_">


<emphasis id="em1002" effect="italics">
Object-Oriented Programming (OOP) with Java 
	

</emphasis>
 
	

</link>

 

</item>




</list>















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1001" list-type="bulleted">

	

<item id="li1002">
<link id="a1002" target-id="Preface">

Preface

</link>


	

<list id="ul1002" list-type="bulleted">

		

<item id="li1003">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1003" list-type="bulleted">

			

<item id="li1004">
<link id="a1004" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1005">
<link id="a1005" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1006">
<link id="a1006" target-id="Generics">

Generics

</link>


</item>


	

<item id="li1007">
<link id="a1007" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


<list id="ul1004" list-type="bulleted">



<item id="li1008">
<link id="a1008" target-id="Beginning_with_a_quiz_">

Beginning with a quiz

</link>

 


<list id="ul1005" list-type="bulleted">

	

<item id="li1009">
<link id="a1009" target-id="Similar_to_previous_programs_">

Similar to previous programs

</link>


</item>


	

<item id="li1010">
<link id="a1010" target-id="A_new_TreeSet_object_with_a_Comparator">

A new TreeSet object with a Comparator

</link>


</item>


	

<item id="li1011">
<link id="a1011" target-id="Populating_the_TreeSet_collection_">

Populating the TreeSet collection
	

</link>




</item>


	

<item id="li1012">
<link id="a1012" target-id="Display_the_contents_of_the_TreeSet_collection_">

Display the contents of the TreeSet collection

</link>


</item>




</list>




</item>




<item id="li1013">
<link id="a1013" target-id="Analyzing_the_contents_of_the_TreeSet_collection_">

Analyzing the contents of the TreeSet collection

</link>


<list id="ul1006" list-type="bulleted">

	

<item id="li1014">
<link id="a1014" target-id="Method_used_to_populate_the_collection_">

Method used to populate the collection

</link>


</item>


	

<item id="li1015">
<link id="a1015" target-id="Implementing_the_Comparator_interface_">

Implementing the Comparator interface
	

</link>


</item>


	

<item id="li1016">
<link id="a1016" target-id="The_interesting_code_">

The interesting code

</link>


</item>


	

<item id="li1017">
<link id="a1017" target-id="Converting_to_reverse_natural_order_">

Converting to reverse natural order
	

</link>


</item>




</list>




</item>



	

</list>


	

</item>


	

<item id="li1018">
<link id="a1018" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1019">
<link id="a1019" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1020">
<link id="a1020" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1021">
<link id="a1021" target-id="Miscellaneous">

Miscellaneous

</link>


</item>




</list>




</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>




<para id="p1002">
This module is one of a series of modules designed to teach you about 
Object-Oriented Programming (OOP) in general and the Java Collections 
framework in particular.

</para>





<para id="p1003">
The module shows you how to use a 

<emphasis id="strong1000" effect="bold">
Comparator

</emphasis>
 to cause a


<emphasis id="strong1001" effect="bold">
TreeSet

</emphasis>
 collection to be sorted in 

<emphasis id="em1003" effect="italics">
descending

</emphasis>
 order 
while preserving the impact of differences in case.

</para>





<para id="p1004">
In addition to studying these modules, I strongly recommend that you study 
the 

<link id="a1022" url="http://docs.oracle.com/javase/tutorial/collections/index.html">


Collections Trail

</link>

 in


<link id="a1023" url="http://docs.oracle.com/javase/tutorial/index.html">

Oracle's Java 
Tutorials

</link>

. The modules in this collection are intended to supplement and not 
to replace those tutorials.

</para>





<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>




<para id="p1005">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the listings while you are reading about them.

</para>





<section id="h31000">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<list id="ul1007" list-type="bulleted">

	

<item id="li1022">
<link id="a1024" target-id="Listing_1">

Listing 1

</link>

. The program named Comparator04. 

</item>


	

<item id="li1023">
<link id="a1025" target-id="Listing_2">

Listing 2

</link>

. A new TreeSet object with a Comparator.

</item>


	

<item id="li1024">
<link id="a1026" target-id="Listing_3">

Listing 3

</link>

. The fillIt method. 

</item>


	

<item id="li1025">
<link id="a1027" target-id="Listing_4">

Listing 4

</link>

. Beginning of the class named TheComparator. 

</item>


	

<item id="li1026">
<link id="a1028" target-id="Listing_5">

Listing 5

</link>

. The most interesting code. 

</item>




</list>




</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>




<para id="p1006">
In this module, I will teach you how to use a 

<emphasis id="strong1002" effect="bold">
Comparator

</emphasis>
 to cause a 

<emphasis id="strong1003" effect="bold">

TreeSet

</emphasis>
 collection to be sorted in descending order while preserving the 
impact of differences in case. We might refer to this as 

<emphasis id="em1004" effect="italics">
reverse natural 
order.

</emphasis>
 In other words, the sorting order is the same as the 

<emphasis id="em1005" effect="italics">
natural 
order

</emphasis>
 except that the order is descending instead of ascending. 

</para>





</section>
<section id="h11003">
<title>
<emphasis id="Generics" effect="bold">

Generics

</emphasis>


</title>




<para id="p1007">
The code in this series of modules is written with no thought given to


<link id="a1029" url="http://docs.oracle.com/javase/tutorial/java/generics/index.html">


Generics

</link>

. As a result, if you copy and compile the code, you will probably 
get warnings about 

<emphasis id="em1006" effect="italics">
unchecked or unsafe operations

</emphasis>
.

</para>





<para id="p1008">
While you will ultimately need to understand how to use Generics, that is a 
very complex topic. An understanding of Generics is beyond the scope of this 
course. Therefore, for purposes of this course, you can simply ignore those 
warnings.

</para>





</section>
<section id="h11004">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>




<section id="h21001">
<title>
<emphasis id="Beginning_with_a_quiz_" effect="bold">

Beginning with a quiz 

</emphasis>


</title>




<para id="p1009">
Let's begin with a quiz to test your prior knowledge of the 
Collections Framework. 

</para>





<para id="p1010">
What output is produced by the program shown in 

<link id="a1030" target-id="Listing_1">

Listing 1

</link>

? 

</para>





<list id="ul1008" list-type="bulleted">

	

<item id="li1027">
A. Compiler Error

</item>


	

<item id="li1028">
B. Runtime Error

</item>


	

<item id="li1029">
C. BILL Bill JOE Joe TOM Tom

</item>


	

<item id="li1030">
D. Tom TOM Joe JOE Bill BILL

</item>


	

<item id="li1031">
E. Joe Bill Tom

</item>


	

<item id="li1032">
F. None of the above.

</item>




</list>










<table id="table1000" summary="A table." pgwide="0">
<tgroup cols="1">





<thead id="thead1000">



<row id="tr1000">



<entry id="th1000">



<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. 

<emphasis id="strong1004" effect="bold">
The program named Comparator04.

</emphasis>



</entry>



</row>



</thead>





<tbody id="tbody1000">



<row id="tr1001">



<entry id="td1000">



<code id="pre1000" display="block">//File Comparator04.java
//Copyright 2001, R.G.Baldwin

import java.util.*;
import java.io.Serializable;

public class Comparator04{
  public static void main(String args[]){
    new Worker().doIt();
  }//end main()
}//end class Comparator04

class Worker{
  public void doIt(){
    Iterator iter;
    Collection ref;

    ref = new TreeSet(new TheComparator());
    Populator.fillIt(ref);
    iter = ref.iterator();
    while(iter.hasNext()){
      System.out.print(iter.next() + " ");
    }//end while loop
    System.out.println();

  }//end doIt()
}// end class Worker

class Populator{
  public static void fillIt(Collection ref){
    ref.add("Joe");
    ref.add("Bill");
    ref.add("Tom");
    ref.add("JOE");
    ref.add("BILL");
    ref.add("TOM");
  }//end fillIt()
}//end class Populator

class TheComparator implements Comparator,Serializable{

  public int compare(Object o1,Object o2){
    if(!(o1 instanceof String))
        throw new ClassCastException();
    if(!(o2 instanceof String))
        throw new ClassCastException();

    int result = ((String)o1).compareTo(((String)o2));
    return result*(-1);
  }//end compare()

  public boolean equals(Object o){
    if(!(o instanceof TheComparator))
        return false;
    else return true;
  }//end overridden equals()
}//end class TheComparator
</code>





</entry>



</row>



</tbody>





</tgroup>
</table>




<para id="p1011">
If you selected the following, you are correct: 

</para>





<para id="p1012">
<emphasis id="strong1005" effect="bold">
D. Tom TOM Joe JOE Bill BILL

</emphasis>
 

</para>





<section id="h31001">
<title>
<emphasis id="Similar_to_previous_programs_" effect="bold">

Similar to previous programs 

</emphasis>




</title>




<para id="p1013">
The overall structure of this program is very similar to programs that I have 
discussed in previous modules. Therefore, I will concentrate on those 
aspects of this program that differentiate it from the programs in previous 
modules. 

</para>





</section>
<section id="h31002">
<title>
<emphasis id="A_new_TreeSet_object_with_a_Comparator" effect="bold">

A new TreeSet object with a 
Comparator

</emphasis>

 

</title>




<para id="p1014">
The code in 

<link id="a1031" target-id="Listing_2">

Listing 2

</link>

 instantiates a new 

<emphasis id="strong1006" effect="bold">
TreeSet

</emphasis>
 object, by providing 
a reference to an anonymous object that implements the 

<emphasis id="strong1007" effect="bold">
Comparator

</emphasis>
 
interface. That object is instantiated from the class named 

<emphasis id="strong1008" effect="bold">

TheComparator

</emphasis>
. It is the 

<emphasis id="strong1009" effect="bold">
Comparator

</emphasis>
 object that will be of most 
interest to us in this module. 

</para>





	

<table id="table1001" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. A new TreeSet object with a Comparator.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">

				

<code id="pre1001" display="block">    Collection ref;

    ref = new TreeSet(new TheComparator());
    Populator.fillIt(ref);

    iter = ref.iterator();
    while(iter.hasNext()){
      System.out.print(iter.next() + " ");
    }//end while loop
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>






</section>
<section id="h31003">
<title>
<emphasis id="Populating_the_TreeSet_collection_" effect="bold">

Populating the TreeSet collection 


</emphasis>

 

</title>




<para id="p1015">
After the 

<emphasis id="strong1010" effect="bold">
TreeSet

</emphasis>
 object is instantiated, it is passed to a method 
named 

<emphasis id="strong1011" effect="bold">
fillIt

</emphasis>
 where the 

<emphasis id="strong1012" effect="bold">
TreeSet

</emphasis>
 collection is populated with the 
names of several people. 

</para>





</section>
<section id="h31004">
<title>
<emphasis id="Display_the_contents_of_the_TreeSet_collection_" effect="bold">

Display the contents of the TreeSet collection


</emphasis>

 

</title>




<para id="p1016">
As shown by the code in 

<link id="a1032" target-id="Listing_2">

Listing 2

</link>

, after the 

<emphasis id="strong1013" effect="bold">
TreeSet

</emphasis>
 collection is 
populated, an 

<emphasis id="strong1014" effect="bold">
Iterator

</emphasis>
 is obtained for that collection and used to 
display the contents of the collection. The output produced by the program 
is 

<emphasis id="shown_below" effect="bold">

shown below

</emphasis>

: 

</para>





<para id="p1017">
<emphasis id="strong1015" effect="bold">
Tom TOM Joe JOE Bill BILL

</emphasis>
 

</para>





</section>
</section>
<section id="h21002">
<title>
<emphasis id="Analyzing_the_contents_of_the_TreeSet_collection_" effect="bold">

Analyzing the 
contents of the TreeSet collection 

</emphasis>

 

</title>




<para id="p1018">
We will need to compare this output with the names used to populate the 
collection to appreciate the true significance of the use of the 

<emphasis id="strong1016" effect="bold">
Comparator

</emphasis>
 
object. 

</para>





<para id="p1019">
At this point, it is worth pointing out that the six names contained in the 
collection are returned by the iterator in 

<emphasis id="em1007" effect="italics">
descending order

</emphasis>
, taking the 
significance of upper and lower case into account. In other words, names 
beginning with letters that are high in the alphabet occur before names 
beginning with letters that are lower in the alphabet. In addition, names 
containing lower case characters appear before the same names containing only 
upper case characters. 

</para>





<section id="h31005">
<title>
<emphasis id="Method_used_to_populate_the_collection_" effect="bold">

Method used to populate the collection


</emphasis>

 

</title>




<para id="p1020">
<link id="a1033" target-id="Listing_3">

Listing 3

</link>

 shows the method named 

<emphasis id="strong1017" effect="bold">
fillIt

</emphasis>
 that was used to populate the 
collection with references to six 

<emphasis id="strong1018" effect="bold">
String

</emphasis>
 objects. As you can see, 
the names weren't added in any particular order. 

</para>





<para id="p1021">
As you can also see by comparing 

<link id="a1034" target-id="Listing_3">

Listing 3

</link>

 with the output 


<link id="a1035" target-id="shown_below">

shown above

</link>

, all 
six names that were added to the collection were displayed in the output, but in 
a different order from the order in which they were added. 

<emphasis id="em1008" effect="italics">
(Names with the 
same spelling but different case were not considered to be duplicates insofar as 
the contract for the set was concerned.)

</emphasis>
 

</para>





	

<table id="table1002" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. The fillIt 
				method.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">

				

<code id="pre1002" display="block">  public static void fillIt(Collection ref){
    ref.add("Joe");
    ref.add("Bill");
    ref.add("Tom");
    ref.add("JOE");
    ref.add("BILL");
    ref.add("TOM");
  }//end fillIt()
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>





</section>
<section id="h31006">
<title>
<emphasis id="Implementing_the_Comparator_interface_" effect="bold">

Implementing the Comparator interface


</emphasis>

 

</title>




<para id="p1022">
That brings us to the class from which the 

<emphasis id="strong1019" effect="bold">
Comparator

</emphasis>
 object was 
instantiated. The beginning portion of that class is shown in 

<link id="a1036" target-id="Listing_4">

Listing 4

</link>

. 

</para>





	

<table id="table1003" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. Beginning of 
				the class named TheComparator.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">

				

<code id="pre1003" display="block">class TheComparator implements Comparator,Serializable{
				
  public int compare(Object o1,Object o2){
    if(!(o1 instanceof String))
        throw new ClassCastException();
    if(!(o2 instanceof String))
        throw new ClassCastException();
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>





<para id="p1023">
The code in 

<link id="a1037" target-id="Listing_4">

Listing 4

</link>

 isn't particularly interesting. That code simply 
throws an exception if either of the references passed to the 

<emphasis id="strong1020" effect="bold">
compare

</emphasis>
 
method refer to an object of some type other than 

<emphasis id="strong1021" effect="bold">
String

</emphasis>
. 

</para>





</section>
<section id="h31007">
<title>
<emphasis id="The_interesting_code_" effect="bold">

The interesting code 

</emphasis>

 

</title>




<para id="p1024">
The most interesting code is shown in 

<link id="a1038" target-id="Listing_5">

Listing 5

</link>

. The first statement in 


<link id="a1039" target-id="Listing_5">

Listing 5

</link>

 uses the 

<emphasis id="strong1022" effect="bold">
compareTo

</emphasis>
 method of the 

<emphasis id="strong1023" effect="bold">
String

</emphasis>
 class to compare the 
two objects in an 

<emphasis id="strong1024" effect="bold">
ascending

</emphasis>
 

<emphasis id="em1009" effect="italics">
natural ordering

</emphasis>
 sense. The 
behavior of this method is more formally described as follows: 

</para>





<quote id="blockquote1000" display="block">

	

<emphasis id="em1010" effect="italics">
"Returns: the value 0 if the argument is a string lexicographically 
	equal to this string; a value less than 0 if the argument is a string 
	lexicographically greater than this string; and a value greater than 0 if 
	the argument is a string lexicographically less than this string."

</emphasis>
</quote>




	

<table id="table1004" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

. The most 
				interesting code.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">

				

<code id="pre1004" display="block">    int result = ((String)o1).compareTo(((String)o2));

    return result*(-1);
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>





</section>
<section id="h31008">
<title>
<emphasis id="Converting_to_reverse_natural_order_" effect="bold">

Converting to reverse natural order


</emphasis>

 

</title>




<para id="p1025">
The most interesting line of code in this entire program is the 

<emphasis id="strong1025" effect="bold">
return

</emphasis>
 
statement shown in 

<link id="a1040" target-id="Listing_5">

Listing 5

</link>

. This line of code changes the sign on the 
value returned by the 

<emphasis id="strong1026" effect="bold">
compareTo

</emphasis>
 method before returning it as the return 
value for the 

<emphasis id="strong1027" effect="bold">
compare

</emphasis>
 method. 

</para>





<para id="p1026">
The effect of changing the sign is to 
return a value that causes the 

<emphasis id="strong1028" effect="bold">
TreeSet

</emphasis>
 collection to arrange the elements 
in 

<emphasis id="strong1029" effect="bold">
reverse

</emphasis>
 

<emphasis id="em1011" effect="italics">
natural order 

</emphasis>
instead of the normal 

<emphasis id="strong1030" effect="bold">
ascending

</emphasis>
 

<emphasis id="em1012" effect="italics">

natural order.

</emphasis>
 

</para>





<para id="p1027">
As a result, the use of an iterator to access and display the contents of the 
collection produces the following output:

</para>





<para id="p1028">
<emphasis id="strong1031" effect="bold">
Tom TOM Joe JOE Bill BILL

</emphasis>
 

</para>





<para id="p1029">
For comparison, if the names were arranged in 

<emphasis id="strong1032" effect="bold">
ascending

</emphasis>
 

<emphasis id="em1013" effect="italics">
natural 
order, 

</emphasis>
the output would be as shown below: 

</para>





<para id="p1030">
<emphasis id="strong1033" effect="bold">
BILL Bill JOE Joe TOM Tom

</emphasis>
 

</para>





</section>
</section>
</section>
<section id="h11005">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>




<para id="p1031">
I encourage you to copy the code from 

<link id="a1041" target-id="Listing_1">

Listing 1

</link>

 and 
paste it into your Java 
text editor. Then 
compile and execute it.

</para>





<para id="p1032">
Run the program 
and observe the results. Experiment with the code. Make changes, run the program again, and observe the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>





</section>
<section id="h11006">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1033">
In this module, I taught you how to use a 

<emphasis id="strong1034" effect="bold">
Comparator

</emphasis>
 to cause a 

<emphasis id="strong1035" effect="bold">

TreeSet

</emphasis>
 collection to be sorted in 

<emphasis id="em1014" effect="italics">
reverse natural order.

</emphasis>
 In other 
words, the sorting order is the same as the 

<emphasis id="em1015" effect="italics">
natural order

</emphasis>
 except that the 
order is descending instead of ascending. 

</para>





</section>
<section id="h11007">
<title>
<emphasis id="Whats_next" effect="bold">

What's next?

</emphasis>


</title>




<para id="p1034">
In the next module, I will show you how to use a 

<emphasis id="strong1036" effect="bold">
Comparator

</emphasis>
 object to 
sort the contents of an array. 

</para>





</section>
<section id="h11008">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>




<para id="p1035">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1037" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1009" list-type="bulleted">

					

<item id="li1033">
Module name:Java4110: The Comparator Interface, Part 3

</item>


					

<item id="li1034">
File: Java4110.htm


</item>


					

<item id="li1035">
Published: 05/07/13

</item>



				

</list>


				

</note>

			


		









	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1038" effect="bold">
Disclaimers:

</emphasis>
<para id="p1036">
<emphasis id="strong1039" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>



				

<para id="p1037">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>



				

<para id="p1038">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>



				

<para id="p1039">
<emphasis id="strong1040" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>



				

</note>

			


		









<para id="p1040">
-end- 

</para>







</section>
</content>




</document>