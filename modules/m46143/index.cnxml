<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Java4080: The Comparable Interface, Part 2</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m46143</md:content-id>
  <md:title>Java4080: The Comparable Interface, Part 2</md:title>
  <md:abstract>This module explains why the elements stored in a TreeSet collection must be references to objects instantiated from a class that implements the Comparable interface. The module also briefly discusses an alternative approach using the Comparator interface. The module shows you how to implement the Comparable interface for a new class definition, explains the "natural ordering of the elements" for a class, and discusses the "consistent with equals" requirement. Finally, the module shows you how to define a new class whose objects are eligible for inclusion in a TreeSet collection.</md:abstract>
  <md:uuid>c2e67731-f948-41fe-83ef-2efa169aad30</md:uuid>
</metadata>

<content>






<para id="p1000">
Revised: Wed Apr 06 22:21:03 CDT 2016

</para>




<para id="p1001">
<emphasis id="em1000" effect="italics">
This page is included in the following Books:

</emphasis>
</para>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">

	

<link id="a1000" url="http://cnx.org/contents/dzOvxPFw">


<emphasis id="em1001" effect="italics">
ITSE 2321 - Object-Oriented Programming (Java)

</emphasis>
</link>


</item>


	

<item id="li1001">

	

<link id="a1001" url="http://cnx.org/contents/-2RmHFs_">


<emphasis id="em1002" effect="italics">
Object-Oriented Programming (OOP) with Java 
	

</emphasis>
 
	

</link>

 

</item>




</list>















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1001" list-type="bulleted">

	

<item id="li1002">
<link id="a1002" target-id="Preface">

Preface

</link>


	

<list id="ul1002" list-type="bulleted">

		

<item id="li1003">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1003" list-type="bulleted">

			

<item id="li1004">
<link id="a1004" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1005">
<link id="a1005" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1006">
<link id="a1006" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


<list id="ul1004" list-type="bulleted">



<item id="li1007">
<link id="a1007" target-id="Generics">

Generics

</link>


</item>




<item id="li1008">
<link id="a1008" target-id="Begin_with_a_quiz_">

Begin with a quiz

</link>

 

<list id="ul1005" list-type="bulleted">



<item id="li1009">
<link id="a1009" target-id="What_caused_the_runtime_error_">

What caused the runtime error?

</link>


</item>


	

<item id="li1010">
<link id="a1010" target-id="Why_did_this_code_produce_a_runtime_error">

Why did this code produce a runtime error?

</link>


</item>


	

<item id="li1011">
<link id="a1011" target-id="What_does_this_mean_">

What does this mean?

</link>


</item>


	

<item id="li1012">
<link id="a1012" target-id="The_compareTo_method">

The compareTo method 

</link>


</item>


	

<item id="li1013">
<link id="a1013" target-id="A_possible_exception">

A possible exception 

</link>


</item>


	

<item id="li1014">
<link id="a1014" target-id="The_SortedSet_interface_">

The SortedSet interface

</link>


</item>


	

<item id="li1015">
<link id="a1015" target-id="Natural_ordering_of_the_elements_">

Natural ordering of the elements

</link>


</item>


	

<item id="li1016">
<link id="a1016" target-id="Conclusion_">

Conclusion regarding traversal

</link>


</item>


	

<item id="li1017">
<link id="a1017" target-id="The_bottom_line_">

The bottom line

</link>


</item>




</list>




</item>




<item id="li1018">
<link id="a1018" target-id="The_solution">

The solution

</link>


<list id="ul1006" list-type="bulleted">

	

<item id="li1019">
<link id="a1019" target-id="The_corrected_code_">

The corrected code 

</link>


</item>


	

<item id="li1020">
<link id="a1020" target-id="ThecompareTomethod01">

The compareTo method

</link>


</item>


	

<item id="li1021">
<link id="a1021" target-id="Consistent_with_equals_">

Consistent with equals 

</link>

 

</item>


	

<item id="li1022">
<link id="a1022" target-id="Meeting_the_consistent_with_equals_requirement_">

Meeting the consistent with equals requirement 
	

</link>

 

</item>


	

<item id="li1023">
<link id="a1023" target-id="The_program_output_">

The program output

</link>


</item>




</list>




</item>


		

	

</list>


	

</item>


	

<item id="li1024">
<link id="a1024" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1025">
<link id="a1025" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1026">
<link id="a1026" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1027">
<link id="a1027" target-id="Miscellaneous">

Miscellaneous

</link>


</item>




</list>




</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>




<para id="p1002">
This module is one of a series of modules designed to teach you about 
Object-Oriented Programming (OOP) in general and the Java Collections 
framework in particular.

</para>





<para id="p1003">
This module explains why the elements stored in a 

<emphasis id="strong1000" effect="bold">
TreeSet

</emphasis>
 collection 
must be references to objects instantiated from a class that implements the 


<emphasis id="strong1001" effect="bold">
Comparable

</emphasis>
 interface. The module also briefly discusses an alternative approach using the 


<emphasis id="strong1002" effect="bold">
Comparator

</emphasis>
 interface.  

</para>





<para id="p1004">
The module shows you how to implement the 

<emphasis id="strong1003" effect="bold">
Comparable

</emphasis>
 interface for a new class definition, explains the "natural ordering of the elements" for a class, and discusses the "consistent with equals" requirement.  Finally, 
the module shows you how to define a new class whose objects are eligible for inclusion in a 


<emphasis id="strong1004" effect="bold">
TreeSet

</emphasis>
 collection.

</para>





<para id="p1005">
In addition to studying these modules, I strongly recommend that you study 
the 

<link id="a1028" url="http://docs.oracle.com/javase/tutorial/collections/index.html">


Collections Trail

</link>

 in


<link id="a1029" url="http://docs.oracle.com/javase/tutorial/index.html">

Oracle's Java 
Tutorials

</link>

. The modules in this collection are intended to supplement and not 
to replace those tutorials.

</para>





<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>




<para id="p1006">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the listings while you are reading about them.

</para>





<section id="h31000">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<list id="ul1007" list-type="bulleted">

	

<item id="li1028">
<link id="a1030" target-id="Listing_1">

Listing 1

</link>

. The program named Comparable04. 

</item>


	

<item id="li1029">
<link id="a1031" target-id="Listing_2">

Listing 2

</link>

. The code with the problem. 

</item>


	

<item id="li1030">
<link id="a1032" target-id="Listing_3">

Listing 3

</link>

. The program named Comparable05. 

</item>


	

<item id="li1031">
<link id="a1033" target-id="Listing_4">

Listing 4

</link>

. Beginning of the class named MyClass. 

</item>


	

<item id="li1032">
<link id="a1034" target-id="Listing_5">

Listing 5

</link>

. The compareTo method. 

</item>


	

<item id="li1033">
<link id="a1035" target-id="Listing_6">

Listing 6

</link>

. The overridden equals method. 

</item>




</list>




</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>




<para id="p1007">
In this module, I will teach you why the elements stored in a 

<emphasis id="strong1005" effect="bold">
TreeSet

</emphasis>
 
collection must be references to objects instantiated from a class that 
implements the 

<emphasis id="strong1006" effect="bold">
Comparable

</emphasis>
 interface. (

<emphasis id="em1003" effect="italics">
In a subsequent module, I 
will teach you about an alternative approach that makes use of the 

<emphasis id="strong1007" effect="bold">
Comparator

</emphasis>
 
interface.)

</emphasis>
 

</para>





<para id="p1008">
I will provide an example of implementing the 

<emphasis id="strong1008" effect="bold">
Comparable

</emphasis>
 interface for 
a new class definition, and will teach you about the 

<emphasis id="em1004" effect="italics">
natural ordering of the 
elements

</emphasis>
 for a class. 

</para>





<para id="p1009">
I will teach you the meaning of the 

<emphasis id="em1005" effect="italics">
consistent with equals

</emphasis>
 requirement 
and show you how to satisfy that requirement for a new class definition. 

</para>





<para id="p1010">
Finally, I will show you how to define a new class whose objects are eligible 
for inclusion in a 

<emphasis id="strong1009" effect="bold">
TreeSet

</emphasis>
 collection. 

</para>





</section>
<section id="h11003">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>




<section id="h21001">
<title>
<emphasis id="Generics" effect="bold">

Generics

</emphasis>


</title>




<para id="p1011">
The code in this module is written with no thought given to


<link id="a1036" url="http://docs.oracle.com/javase/tutorial/java/generics/index.html">


Generics

</link>

. As a result, if you copy and compile this code, you will probably 
get a warning about 

<emphasis id="em1006" effect="italics">
unchecked or unsafe operations

</emphasis>
.

</para>





<para id="p1012">
While you will ultimately need to understand how to use Generics, that is a 
very complex topic. An understanding of Generics is beyond the scope of this 
course. Therefore, for purposes of this course, you can simply ignore those 
warnings.

</para>





</section>
<section id="h21002">
<title>
<emphasis id="Begin_with_a_quiz_" effect="bold">

Begin with a quiz 

</emphasis>


</title>




<para id="p1013">
Let's begin with a quiz to test your prior knowledge of the 
Collections Framework. 

</para>





<para id="p1014">
What output is produced by the program shown in 

<link id="a1037" target-id="Listing_1">

Listing 1

</link>

? 

</para>





<list id="ul1008" list-type="bulleted">

	

<item id="li1034">
A. Compiler Error

</item>


	

<item id="li1035">
B. Runtime Error

</item>


	

<item id="li1036">
C. 44321

</item>


	

<item id="li1037">
D. 4321

</item>


	

<item id="li1038">
E. 1234

</item>


	

<item id="li1039">
F. 12344

</item>


	

<item id="li1040">
G. None of the above.

</item>




</list>










<table id="table1000" summary="A table." pgwide="0">
<tgroup cols="1">





<thead id="thead1000">



<row id="tr1000">



<entry id="th1000">



<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. 

<emphasis id="strong1010" effect="bold">
The program named Comparable04.

</emphasis>



</entry>



</row>



</thead>





<tbody id="tbody1000">



<row id="tr1001">



<entry id="td1000">



<code id="pre1000" display="block">//File Comparable04.java

import java.util.*;

public class Comparable04{
  public static void main(String args[]){
    new Worker().doIt();
  }//end main()
}//end class Comparable04

class Worker{
  public void doIt(){
    Iterator iter;
    Collection ref;

    ref = new TreeSet();
    Populator.fillIt(ref);
    iter = ref.iterator();
    while(iter.hasNext()){
      System.out.print(iter.next());
    }//end while loop
    System.out.println();

  }//end doIt()
}// end class Worker

class Populator{
  public static void fillIt(Collection ref){
    ref.add(new MyClass(4));
    ref.add(new MyClass(4));
    ref.add(new MyClass(3));
    ref.add(new MyClass(2));
    ref.add(new MyClass(1));
  }//end fillIt()
}//end class Populator

class MyClass{
  int data;

  MyClass(){
    data = 0;
  }//end noarg constructor

  MyClass(int data){
    this.data = data;
  }//end parameterized constructor

  public String toString(){
    return "" + data;
  }//end overridden toString()

}//end MyClass
</code>





</entry>



</row>



</tbody>





</tgroup>
</table>




<para id="p1015">
If your answer was 

<emphasis id="strong1011" effect="bold">
B. Runtime Error

</emphasis>
, you were correct. 

</para>





<section id="h31001">
<title>
<emphasis id="What_caused_the_runtime_error_" effect="bold">

What caused the runtime error? 

</emphasis>




</title>




<para id="p1016">
The runtime error was caused by the code shown in 

<link id="a1038" target-id="Listing_2">

Listing 2

</link>

. 

</para>





	

<table id="table1001" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. The code with 
				the problem.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">

				

<code id="pre1001" display="block">class Populator{
  public static void fillIt(Collection ref){
    ref.add(new MyClass(4));
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>





</section>
<section id="h31002">
<title>
<emphasis id="Why_did_this_code_produce_a_runtime_error" effect="bold">

Why did this code produce a runtime error?

</emphasis>


</title>




<para id="p1017">
This code produced a runtime error for the following reasons. 

</para>





<para id="p1018">
The incoming parameter of the 

<emphasis id="strong1012" effect="bold">
fillIt

</emphasis>
 method is a reference to an 
object of type 

<emphasis id="strong1013" effect="bold">
TreeSet

</emphasis>
 but it is received as type 

<emphasis id="strong1014" effect="bold">
Collection

</emphasis>
. The 

<emphasis id="strong1015" effect="bold">
TreeSet

</emphasis>
 class implements the 

<emphasis id="strong1016" effect="bold">

Collection

</emphasis>
, 

<emphasis id="strong1017" effect="bold">
Set

</emphasis>
, and 

<emphasis id="strong1018" effect="bold">
SortedSet

</emphasis>
 interfaces. 

<emphasis id="em1007" effect="italics">
(In this 
module, we will be primarily interested in the 

</emphasis>
 

<emphasis id="strong1019" effect="bold">
<emphasis id="em1008" effect="italics">
Set

</emphasis>
</emphasis>
<emphasis id="em1009" effect="italics">
 and 


</emphasis>
 

<emphasis id="strong1020" effect="bold">
<emphasis id="em1010" effect="italics">
SortedSet

</emphasis>
</emphasis>
<emphasis id="em1011" effect="italics">
 
interfaces.)

</emphasis>
 

</para>





<para id="p1019">
The contract for the 

<emphasis id="strong1021" effect="bold">
add

</emphasis>
 method of the 

<emphasis id="strong1022" effect="bold">
Set

</emphasis>
 interface reads 
partially as follows:

</para>





<quote id="blockquote1000" display="block">

	

<emphasis id="em1012" effect="italics">
"Adds the specified element to this set if it is not already present ... 
	If this set already contains the specified element, the call leaves this set 
	unchanged and returns false. ... this ensures that sets never contain 
	duplicate elements."

</emphasis>
</quote>




</section>
<section id="h31003">
<title>
<emphasis id="What_does_this_mean_" effect="bold">

What does this mean? 

</emphasis>

 

</title>




<para id="p1020">
This means that whenever the 

<emphasis id="strong1023" effect="bold">
add

</emphasis>
 method is called on a 

<emphasis id="strong1024" effect="bold">
Set

</emphasis>
 
object, the 

<emphasis id="strong1025" effect="bold">
add

</emphasis>
 method must have a way of determining if the element 
being added is a duplicate of an element that already exists in the collection. 
This means that it must be possible for the 

<emphasis id="strong1026" effect="bold">
add

</emphasis>
 method to 

<emphasis id="em1013" effect="italics">
compare

</emphasis>
 
the new element with all of the existing elements to determine if the new 
element is a duplicate of any of the existing elements. 

</para>





</section>
<section id="h31004">
<title>
<emphasis id="The_compareTo_method" effect="bold">

The compareTo method

</emphasis>

 

</title>




<para id="p1021">
The documentation for the 

<emphasis id="strong1027" effect="bold">
TreeSet

</emphasis>
 class states the following:

</para>





<quote id="blockquote1001" display="block">

	

<emphasis id="em1014" effect="italics">
"... the 

<emphasis id="strong1028" effect="bold">
Set

</emphasis>
 interface is defined in terms of the equals operation, but a 
	

<emphasis id="strong1029" effect="bold">
TreeSet

</emphasis>
 instance performs all key comparisons using its 

<emphasis id="strong1030" effect="bold">
compareTo

</emphasis>
 (or 
	

<emphasis id="strong1031" effect="bold">
compare

</emphasis>
) method ..."

</emphasis>
</quote>




<para id="p1022">
What this means is that insofar as the handling of duplicate elements is 
concerned, 

<emphasis id="em1015" effect="italics">
(with the possible exception given below involving a 

<emphasis id="strong1032" effect="bold">
Comparator

</emphasis>
),

</emphasis>
 
in order for a reference to an object to be included in a 

<emphasis id="strong1033" effect="bold">
TreeSet

</emphasis>
 
collection, the class from which that object is instantiated must implement the


<emphasis id="strong1034" effect="bold">
Comparable

</emphasis>
 interface. 

</para>





</section>
<section id="h31005">
<title>
<emphasis id="A_possible_exception" effect="bold">

A possible exception

</emphasis>

 

</title>




<para id="p1023">
Note that one of the constructors for the 

<emphasis id="strong1035" effect="bold">
TreeSet

</emphasis>
 class makes it 
possible to instantiate a new object by passing a parameter that is a reference 
to an object that implements the 

<emphasis id="strong1036" effect="bold">
Comparator

</emphasis>
 interface. 

</para>





<para id="p1024">
The 

<emphasis id="strong1037" effect="bold">
Comparator

</emphasis>
 interface declares a method named 

<emphasis id="strong1038" effect="bold">
compare

</emphasis>
, which 
compares its two arguments for order. The text in the above excerpt from 
the Oracle documentation suggests that when this parameterized constructor is used, 
it may not be necessary for the objects included in the 

<emphasis id="strong1039" effect="bold">
TreeSet

</emphasis>
 
collection to implement the 

<emphasis id="strong1040" effect="bold">
Comparable

</emphasis>
 interface. 

</para>





<para id="p1025">
I won't discuss that possibility in this module, but I will discuss it in a 
future module that discusses the use of the 

<emphasis id="strong1041" effect="bold">
Comparator

</emphasis>
 interface. 
For purposes of this module, I will concentrate on the use of a 

<emphasis id="strong1042" effect="bold">
TreeSet

</emphasis>
 
collection that does not receive a reference to a 

<emphasis id="strong1043" effect="bold">
Comparator

</emphasis>
 object when 
it is instantiated. 

</para>





</section>
<section id="h31006">
<title>
<emphasis id="The_SortedSet_interface_" effect="bold">

The SortedSet interface 

</emphasis>

 

</title>




<para id="p1026">
The 

<emphasis id="strong1044" effect="bold">
TreeSet

</emphasis>
 class also implements the 

<emphasis id="strong1045" effect="bold">
SortedSet

</emphasis>
 interface. 
The documentation for the 

<emphasis id="strong1046" effect="bold">
SortedSet

</emphasis>
 interface states the following:

</para>





<quote id="blockquote1002" display="block">

	

<emphasis id="em1016" effect="italics">
"A set that further guarantees that its iterator will traverse the set in 
	ascending element order, sorted according to the natural ordering of its 
	elements (see 

<emphasis id="strong1047" effect="bold">
Comparable

</emphasis>
), or by a 

<emphasis id="strong1048" effect="bold">
Comparator

</emphasis>
 provided at sorted set 
	creation time."

</emphasis>
</quote>




</section>
<section id="h31007">
<title>
<emphasis id="Natural_ordering_of_the_elements_" effect="bold">

Natural ordering of the elements


</emphasis>

 

</title>




<para id="p1027">
The key term to note in the above quotation is the term 

<emphasis id="em1017" effect="italics">
natural ordering 
of its elements

</emphasis>
. This takes us back to the 

<emphasis id="strong1049" effect="bold">
Comparable

</emphasis>
 
interface, for which the documentation states:

</para>





<quote id="blockquote1003" display="block">

	

<emphasis id="em1018" effect="italics">
"This interface imposes a total ordering on the objects of each class 
	that implements it. This ordering is referred to as the class's natural 
	ordering, and the class's 

<emphasis id="strong1050" effect="bold">
compareTo

</emphasis>
 method is referred to as its natural 
	comparison method."

</emphasis>
</quote>




</section>
<section id="h31008">
<title>
<emphasis id="Conclusion_" effect="bold">

Conclusion regarding traversal

</emphasis>

 

</title>




<para id="p1028">
The conclusion is, in order for the iterator to be able to traverse the set 
according to the 

<emphasis id="em1019" effect="italics">
natural ordering of its elements,

</emphasis>
 the elements stored in 
an object that implements the 

<emphasis id="strong1051" effect="bold">
SortedSet

</emphasis>
 interface must be instantiated 
from a class that implements the 

<emphasis id="strong1052" effect="bold">
Comparable

</emphasis>
 interface 

<emphasis id="em1020" effect="italics">
(unless a 


<emphasis id="strong1053" effect="bold">
Comparator

</emphasis>
 is provided when the 

<emphasis id="strong1054" effect="bold">
SortedSet

</emphasis>
 object is instantiated.)

</emphasis>
 

</para>





</section>
<section id="h31009">
<title>
<emphasis id="The_bottom_line_" effect="bold">

The bottom line 

</emphasis>

 

</title>




<para id="p1029">
The bottom line is, because the class named 

<emphasis id="strong1055" effect="bold">
MyClass

</emphasis>
 in 

<link id="a1039" target-id="Listing_1">

Listing 1

</link>

 does 
not implement the 

<emphasis id="strong1056" effect="bold">
Comparable

</emphasis>
 interface, objects of that class are not 
eligible for use with a 

<emphasis id="strong1057" effect="bold">
TreeSet

</emphasis>
 collection 

<emphasis id="em1021" effect="italics">
(unless a 

<emphasis id="strong1058" effect="bold">
Comparator

</emphasis>
 is 
provided when the 

<emphasis id="strong1059" effect="bold">
TreeSet

</emphasis>
 object is instantiated).

</emphasis>
 

</para>





<para id="p1030">
A 

<emphasis id="strong1060" effect="bold">
Comparator

</emphasis>
 was not provided when the 

<emphasis id="strong1061" effect="bold">
TreeSet

</emphasis>
 object was 
instantiated in 

<link id="a1040" target-id="Listing_1">

Listing 1

</link>

. Therefore, the attempt in 

<link id="a1041" target-id="Listing_2">

Listing 2

</link>

, to add a 

<emphasis id="strong1062" effect="bold">
MyClass

</emphasis>
 object to the 

<emphasis id="strong1063" effect="bold">

TreeSet

</emphasis>
 collection resulted in a 

<emphasis id="strong1064" effect="bold">
ClassCastException

</emphasis>
 being thrown at 
runtime. The runtime error reads partially as follows:

</para>





<quote id="blockquote1004" display="block">
"Exception ... java.lang.ClassCastException: MyClass cannot be cast
to java.lang.Comparable"

</quote>




</section>
</section>
<section id="h21003">
<title>
<emphasis id="The_solution" effect="bold">

The solution

</emphasis>

 

</title>




<para id="p1031">
To solve this problem, we must modify the definition of the class named 

<emphasis id="strong1065" effect="bold">

MyClass 

</emphasis>
to make it implement the 

<emphasis id="strong1066" effect="bold">
Comparable

</emphasis>
 interface 

<emphasis id="em1022" effect="italics">
(assuming 
that we don't provide a 

<emphasis id="strong1067" effect="bold">
Comparator

</emphasis>
 when the 

<emphasis id="strong1068" effect="bold">
TreeSet

</emphasis>
 object is instantiated).

</emphasis>



</para>





<para id="p1032">
This is accomplished in the modified version of the program shown in 


<link id="a1042" target-id="Listing_3">

Listing 
3

</link>

. 

</para>










<table id="table1002" summary="A table." pgwide="0">
<tgroup cols="1">





<thead id="thead1002">



<row id="tr1004">



<entry id="th1002">



<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. 

<emphasis id="strong1069" effect="bold">
The program named Comparable05.

</emphasis>



</entry>



</row>



</thead>





<tbody id="tbody1002">



<row id="tr1005">



<entry id="td1002">



<code id="pre1002" display="block">//File Comparable05.java
import java.util.*;

public class Comparable05{
  public static void main(String args[]){
    new Worker().doIt();
  }//end main()
}//end class Comparable05

class Worker{
  public void doIt(){
    Iterator iter;
    Collection ref;

    ref = new TreeSet();
    Populator.fillIt(ref);
    iter = ref.iterator();
    while(iter.hasNext()){
      System.out.print(iter.next());
    }//end while loop
    System.out.println();

  }//end doIt()
}// end class Worker

class Populator{
  public static void fillIt(Collection ref){
    ref.add(new MyClass(4));
    ref.add(new MyClass(4));
    ref.add(new MyClass(3));
    ref.add(new MyClass(2));
    ref.add(new MyClass(1));
  }//end fillIt()
}//end class Populator

class MyClass implements Comparable{
  int data;

  MyClass(){
    data = 0;
  }//end noarg constructor

  MyClass(int data){
    this.data = data;
  }//end parameterized constructor

  public String toString(){
    return "" + data;
  }//end overridden toString()

  public int compareTo(Object o){
    if(!(o instanceof MyClass))
        throw new ClassCastException();
    if(((MyClass)o).data &lt; data)
      return 1;
    if(((MyClass)o).data &gt; data)
      return -1;
    else return 0;
  }//end compareTo()

  public boolean equals(Object o){
    if(!(o instanceof MyClass))
        return false;
    if(((MyClass)o).data == data)
      return true;
    else return false;
  }//end overridden equals()
}//end MyClass
</code>





</entry>



</row>



</tbody>





</tgroup>
</table>






<section id="h31010">
<title>
<emphasis id="The_corrected_code_" effect="bold">

The corrected code 

</emphasis>

 

</title>




<para id="p1033">
The important code to note in this modified version of the program is the new 
definition of the class named 

<emphasis id="strong1070" effect="bold">
MyClass

</emphasis>
. The other code in the 
program is essentially the same as in the previous version of the program. 

</para>





<para id="p1034">
The beginning portion of the new definition for 

<emphasis id="strong1071" effect="bold">
MyClass

</emphasis>
 is shown in 


<link id="a1043" target-id="Listing_4">

Listing 4

</link>

.

</para>






	

<table id="table1003" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. Beginning of 
				the class named MyClass.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">

				

<code id="pre1003" display="block">class MyClass implements Comparable{
  int data;

  MyClass(){
    data = 0;
  }//end noarg constructor

  MyClass(int data){
    this.data = data;
  }//end parameterized constructor

  public String toString(){
    return "" + data;
  }//end overridden toString()
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>





<para id="p1035">
The code shown in 

<link id="a1044" target-id="Listing_4">

Listing 4

</link>

 is identical to the code in the previous version 
with one major exception. This version of the class definition implements 
the 

<emphasis id="strong1072" effect="bold">
Comparable

</emphasis>
 interface. That means that this class must provide a 
concrete definition for the following method, which is the only method declared 
in the 

<emphasis id="strong1073" effect="bold">
Comparable

</emphasis>
 interface: 

</para>





<para id="p1036">
<emphasis id="strong1074" effect="bold">
public int compareTo(Object o)

</emphasis>
 

</para>





</section>
<section id="h31011">
<title>
<emphasis id="ThecompareTomethod01" effect="bold">

The compareTo method

</emphasis>

 

</title>




<para id="p1037">
The description of the 

<emphasis id="strong1075" effect="bold">
compareTo

</emphasis>
 method in the Oracle documentation 
begins as follows: 

</para>





<quote id="blockquote1005" display="block">
<emphasis id="em1023" effect="italics">
"Compares this object with the specified object for order. Returns a 
negative integer, zero, or a positive integer as this object is less than, equal 
to, or greater than the specified object."

</emphasis>
 

</quote>




<para id="p1038">
Beyond this, there are a number of additional stipulations that I won't 
repeat here. You can view them in the Oracle documentation if you are 
interested in that level of detail. 

</para>





<para id="p1039">
<link id="a1045" target-id="Listing_5">

Listing 5

</link>

 shows my implementation of the 

<emphasis id="strong1076" effect="bold">
compareTo

</emphasis>
 
method. Although this implementation satisfies the general description given 
above, I haven't taken the time to test it fully to confirm that it meets all of 
the additional stipulations provided by Oracle.

</para>



	

<table id="table1004" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

. The compareTo 
				method.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">

				

<code id="pre1004" display="block">  public int compareTo(Object o){
    if(!(o instanceof MyClass))
        throw new ClassCastException();
    if(((MyClass)o).data &lt; data)
      return 1;
    if(((MyClass)o).data &gt; data)
      return -1;
    else return 0;
  }//end compareTo()
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>





</section>
<section id="h31012">
<title>
<emphasis id="Consistent_with_equals_" effect="bold">

Consistent with equals 

</emphasis>

 

</title>




<para id="p1040">
The Oracle documentation strongly emphasizes the need to make certain that a 
class' natural ordering is 

<emphasis id="em1024" effect="italics">
consistent with equals,

</emphasis>
 and provides the rules 
for meeting that requirement. 

</para>





<para id="p1041">
Further, the documentation for the 

<emphasis id="strong1077" effect="bold">
TreeSet

</emphasis>
 class reads partially as 
follows:

</para>





<quote id="blockquote1006" display="block">

	

<emphasis id="em1025" effect="italics">
"Note that the ordering maintained by a set (whether or not an explicit 
	comparator is provided) must be 

<emphasis id="strong1078" effect="bold">
consistent with equals

</emphasis>
 if it is to 
	correctly implement the Set interface. ..."

</emphasis>
</quote>




</section>
<section id="h31013">
<title>
<emphasis id="Meeting_the_consistent_with_equals_requirement_" effect="bold">

Meeting the consistent with equals requirement


</emphasis>

 

</title>




<para id="p1042">
In order to satisfy the rules and to cause the 

<emphasis id="em1026" effect="italics">
natural ordering

</emphasis>
 of the


<emphasis id="strong1079" effect="bold">
MyClass

</emphasis>
 class to be 

<emphasis id="em1027" effect="italics">
consistent with equals

</emphasis>
, it was necessary to 
override the 

<emphasis id="strong1080" effect="bold">
equals

</emphasis>
 method inherited from the 

<emphasis id="strong1081" effect="bold">
Object

</emphasis>
 class. 
My overridden version of the 

<emphasis id="strong1082" effect="bold">
equals

</emphasis>
 method is shown in 


<link id="a1046" target-id="Listing_6">

Listing 6

</link>

. 

</para>





	

<table id="table1005" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

. The overridden 
				equals method.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">

				

<code id="pre1005" display="block">  public boolean equals(Object o){
    if(!(o instanceof MyClass))
        return false;
    if(((MyClass)o).data == data)
      return true;
    else return false;
  }//end overridden equals()
}//end MyClass
</code>


				

</entry>

			

</row>

		

</tbody>




</tgroup>
</table>





<para id="p1043">
As was the case in defining the 

<emphasis id="strong1083" effect="bold">
compareTo

</emphasis>
 method, there are also a 
large number of stipulations involved in properly overriding the 

<emphasis id="strong1084" effect="bold">
equals

</emphasis>
 
method. I will simply refer you to the Oracle documentation if you are 
interested in reading about those stipulations. 

</para>





</section>
<section id="h31014">
<title>
<emphasis id="The_program_output_" effect="bold">

The program output 

</emphasis>

 

</title>




<para id="p1044">
Given all of the above, this program compiles and executes correctly, 
producing the following output. 

</para>





<para id="p1045">
<emphasis id="strong1085" effect="bold">
1234 

</emphasis>
 

</para>





<para id="p1046">
Note that duplicate elements were eliminated, and the iterator traversed the 
set in ascending element order, sorted according to the natural ordering of the 
elements, as required for a 

<emphasis id="strong1086" effect="bold">
SortedSet

</emphasis>
 collection. 

</para>





</section>
</section>
</section>
<section id="h11004">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>




<para id="p1047">
I encourage you to copy the code from 

<link id="a1047" target-id="Listing_1">

Listing 1

</link>

 and


<link id="a1048" target-id="Listing_3">

Listing 3

</link>

. Paste the code into your Java editor. Then 
compile and execute it.

</para>





<para id="p1048">
Run the program 
and observe the results. Experiment with the code. Make changes, run the program again, and observe the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>





</section>
<section id="h11005">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1049">
I explained why the elements stored in a 

<emphasis id="strong1087" effect="bold">
TreeSet

</emphasis>
 collection must be 
references to objects instantiated from a class that implements the 

<emphasis id="strong1088" effect="bold">

Comparable

</emphasis>
 interface. (

<emphasis id="em1028" effect="italics">
In a future module, I will teach you 
about an alternative approach that makes use of the 

<emphasis id="strong1089" effect="bold">
Comparator

</emphasis>
 interface.)

</emphasis>



</para>





<para id="p1050">
I provided an example of implementing the 

<emphasis id="strong1090" effect="bold">
Comparable

</emphasis>
 interface for a 
new class definition, and I taught you about the 

<emphasis id="em1029" effect="italics">
natural ordering of the 
elements

</emphasis>
 for a class. 

</para>





<para id="p1051">
I taught you the meaning of the 

<emphasis id="em1030" effect="italics">
consistent with equals

</emphasis>
 requirement and 
showed you how to satisfy that requirement for a new class definition. 

</para>





<para id="p1052">
I showed you how to define a new class whose objects are eligible for 
inclusion in a 

<emphasis id="strong1091" effect="bold">
TreeSet

</emphasis>
 collection. 

</para>





</section>
<section id="h11006">
<title>
<emphasis id="Whats_next" effect="bold">

What's next?

</emphasis>


</title>




<para id="p1053">
In the next module, I will discuss the use of the 

<emphasis id="strong1092" effect="bold">
Comparator

</emphasis>
 interface 
in order to achieve a sorting order that is different from the 

<emphasis id="em1031" effect="italics">
natural 
ordering

</emphasis>
 of the elements in a sorted collection. 

</para>





</section>
<section id="h11007">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>




<para id="p1054">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1093" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1009" list-type="bulleted">

					

<item id="li1041">
Module name: Java4080: The Comparable Interface, Part 2

</item>


					

<item id="li1042">
File: Java4080.htm


</item>


					

<item id="li1043">
Published: 04/19/13

</item>



				

</list>


				

</note>

			


		









	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1094" effect="bold">
Disclaimers:

</emphasis>
<para id="p1055">
<emphasis id="strong1095" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>



				

<para id="p1056">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>



				

<para id="p1057">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>



				

<para id="p1058">
<emphasis id="strong1096" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>



				

</note>

			


		









<para id="p1059">
</para>





<para id="p1060">
-end- 

</para>








</section>
</content>




</document>