<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Java1618: Polymorphism and Interfaces, Part 2</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m44196</md:content-id>
  <md:title>Java1618: Polymorphism and Interfaces, Part 2</md:title>
  <md:abstract>Baldwin uses a sample program to illustrate (in a very basic way) some of the things that you can do with interfaces, along with some of the things that you cannot do with interfaces.</md:abstract>
  <md:uuid>5210f26d-d8dd-4fc5-838d-c4e7c3d512c2</md:uuid>
</metadata>

<content>






<para id="p1000">
Revised: Thu Aug 11 21:36:45 CDT 2016

</para>




<para id="p1001">
<emphasis id="em1000" effect="italics">
This page is included in the following Books:

</emphasis>
</para>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">

	

<link id="a1000" url="http://cnx.org/contents/dzOvxPFw">


<emphasis id="em1001" effect="italics">
ITSE 2321 - Object-Oriented Programming (Java)

</emphasis>
</link>


</item>


	

<item id="li1001">

	

<link id="a1001" url="http://cnx.org/contents/-2RmHFs_">


<emphasis id="em1002" effect="italics">
Object-Oriented Programming (OOP) with Java 
	

</emphasis>
 
	

</link>

 

</item>




</list>














<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1001" list-type="bulleted">

	

<item id="li1002">
<link id="a1002" target-id="Preface">

Preface

</link>


	

<list id="ul1002" list-type="bulleted">

		

<item id="li1003">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1003" list-type="bulleted">

			

<item id="li1004">
<link id="a1004" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1005">
<link id="a1005" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1006">
<link id="a1006" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


</item>


	

<item id="li1007">
<link id="a1007" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1008">
<link id="a1008" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1009">
<link id="a1009" target-id="Miscellaneous">

Miscellaneous

</link>


</item>


	

<item id="li1010">
<link id="a1010" target-id="Complete_program_listing">

Complete program listing

</link>


</item>




</list>


	
	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	
	

<para id="p1002">
This module is one of a series of modules designed to teach you about Object-Oriented Programming (OOP) using Java.

</para>



	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1003">
I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the listings while you are reading about them.. 

</para>



	

<section id="h31000">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1004" list-type="bulleted">

		

<item id="li1011">
<link id="a1011" target-id="Listing_1">

Listing 1

</link>

. Definition of the interfaces named I1 and I2.

</item>


		

<item id="li1012">
<link id="a1012" target-id="Listing_2">

Listing 2

</link>

. Definition of the class named A. 

</item>


		

<item id="li1013">
<link id="a1013" target-id="Listing_3">

Listing 3

</link>

. Definition of the class named B. 

</item>


		

<item id="li1014">
<link id="a1014" target-id="Listing_4">

Listing 4

</link>

. Definition of the class named C. 

</item>


		

<item id="li1015">
<link id="a1015" target-id="Listing_5">

Listing 5

</link>

. Beginning of the class named Poly06.

</item>


		

<item id="li1016">
<link id="a1016" target-id="Listing_6">

Listing 6

</link>

. Try unsuccessfully to call the method named q.

</item>


		

<item id="li1017">
<link id="a1017" target-id="Listing_7">

Listing 7

</link>

. Successfully call the method named q.

</item>


		

<item id="li1018">
<link id="a1018" target-id="Listing_8">

Listing 8

</link>

. Instantiate a new object of the class B.

</item>


		

<item id="li1019">
<link id="a1019" target-id="Listing_9">

Listing 9

</link>

. Try unsuccessfully to call the method named x.

</item>


		

<item id="li1020">
<link id="a1020" target-id="Listing_10">

Listing 10

</link>

. Successfully call the method named x.

</item>


		

<item id="li1021">
<link id="a1021" target-id="Listing_11">

Listing 11

</link>

. Call the toString method.

</item>


		

<item id="li1022">
<link id="a1022" target-id="Listing_12">

Listing 12

</link>

. Try unsuccessfully to call the method named p.

</item>


		

<item id="li1023">
<link id="a1023" target-id="Listing_13">

Listing 13

</link>

. Successfully call the method named p.

</item>


		

<item id="li1024">
<link id="a1024" target-id="Listing_14">

Listing 14

</link>

. A walk in the park.

</item>


		

<item id="li1025">
<link id="a1025" target-id="Listing_15">

Listing 15

</link>

. Complete program listing.

</item>


	

</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>


	

<para id="p1004">
<emphasis id="strong1000" effect="bold">
Method overloading



</emphasis>
 

</para>





<para id="p1005">
I covered method overloading as one form of polymorphism 

<emphasis id="em1003" effect="italics">
(compile-time polymorphism)

</emphasis>
 in a previous module.



</para>





<para id="p1006">
<emphasis id="strong1001" effect="bold">
Method overriding and class inheritance



</emphasis>
 

</para>





<para id="p1007">
I discussed 

<emphasis id="em1004" effect="italics">
runtime polymorphism

</emphasis>
 implemented through method overriding and class inheritance in more than one previous module.



</para>





<para id="p1008">
<emphasis id="strong1002" effect="bold">
Using the Java interface



</emphasis>
 

</para>





<para id="p1009">
In this and the previous module, I am explaining runtime polymorphism as implemented using method overriding and the Java interface.



</para>





<para id="p1010">
<emphasis id="strong1003" effect="bold">
A very important concept



</emphasis>
 

</para>





<para id="p1011">
In my opinion, this is one of the most important concepts in Java OOP, and the one that seems to give students the greatest amount of difficulty.  Therefore, I am trying to take it slow and easy.  As usual, I am illustrating the concept using sample programs.



</para>





<para id="p1012">
<emphasis id="strong1004" effect="bold">
A skeleton program



</emphasis>
 

</para>





<para id="p1013">
In the previous module, I presented a simple skeleton program that illustrated many of the important aspects of polymorphic behavior based on the Java interface.



</para>





<para id="p1014">
<emphasis id="strong1005" effect="bold">
Multiple inheritance and the cardinal rule



</emphasis>
 

</para>





<para id="p1015">
I explained how the implementation of interfaces in Java is similar to multiple inheritance.

I explained the cardinal rule of interface implementation.



</para>





<para id="p1016">
<emphasis id="strong1006" effect="bold">
A new relationship



</emphasis>
 

</para>





<para id="p1017">
I explained that objects instantiated from classes that implement the same interface have a new relationship that goes beyond the relationship imposed by the standard class hierarchy.



</para>





<para id="p1018">
<emphasis id="strong1007" effect="bold">
One object, many types



</emphasis>
 

</para>





<para id="p1019">
I explained that due to the combination of the class hierarchy and the fact that a class can implement many different interfaces, a single object in Java can be treated as many different types.  However, for any given type, there are restrictions on the methods that can be called on the object.



</para>





<para id="p1020">
<emphasis id="strong1008" effect="bold">
Many classes, one type



</emphasis>
 

</para>





<para id="p1021">
I explained that because different classes can implement the same interface, objects instantiated from different classes can be treated as a common interface type.



</para>





<para id="p1022">
<emphasis id="strong1009" effect="bold">
Interfaces are critical to Java programming

</emphasis>
 

</para>





<para id="p1023">
I suggested that there is little if anything useful that can be done in Java without understanding and using interfaces.

In support of this suggestion, I discussed several real-world examples of the use of the Java interface, including the Delegation Event Model and 
the Model View Control paradigm.



</para>





<para id="p1024">
<emphasis id="strong1010" effect="bold">
Another sample program



</emphasis>
 

</para>





<para id="p1025">
In this module, I will present another sample program that will take you deeper into the world of polymorphism as implemented using the Java interface.



</para>





<para id="p1026">
The sample program that I will discuss in this module will illustrate 

<emphasis id="em1005" effect="italics">
(in a very basic form)

</emphasis>
 some of the things that you can do with interfaces, along with some of the things that you cannot do with interfaces.  In order to write programs that do something worthwhile, you will need to extend the concepts illustrated by this sample program into real-world requirements. 

</para>



	
	

</section>
<section id="h11003">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	
	

<para id="p1027">
Now, let's take a look at a sample program named 

<emphasis id="strong1011" effect="bold">
Poly06

</emphasis>
 that is much simpler than any of the real-world examples 
	that you will see in future modules.



</para>





<para id="p1028">
This program is designed to be very simple, while still illustrating runtime polymorphism using interfaces, class inheritance, and overridden methods.



</para>





<para id="p1029">
You can view a complete listing of the program in 

<link id="a1026" target-id="Listing_15">

Listing 15

</link>

 near the end of the module.



</para>





<para id="p1030">
<emphasis id="strong1012" effect="bold">
Same structure as before



</emphasis>
 

</para>





<para id="p1031">
Note that this program has the same structure as 

<emphasis id="strong1013" effect="bold">
Poly05

</emphasis>
 discussed in the 


<link id="a1027" url="http://cnx.org/contents/dzOvxPFw:LAUK4UwQ">

previous module

</link>

.  


<emphasis id="em1006" effect="italics">
(I strongly recommend that you study the previous module before continuing with this module.)

</emphasis>
  However, unlike the program in the previous module, the methods in this version of the program are not empty.  When a method is called in this version, something happens.  


<emphasis id="em1007" effect="italics">
(Admittedly not much happens.  Text is displayed on the computer screen, but that is something.)

</emphasis>
 

</para>





<para id="p1032">
<emphasis id="strong1014" effect="bold">
The interface definitions



</emphasis>




</para>





<para id="p1033">
<link id="a1028" target-id="Listing_1">

Listing 1

</link>

 shows the definition of the two interfaces named 


<emphasis id="strong1015" effect="bold">
I1

</emphasis>
 and 

<emphasis id="strong1016" effect="bold">
I2

</emphasis>
. 

</para>



	

<table id="table1000" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. Definition of the interfaces named I1 and I2.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">

				

<code id="pre1000" display="block">interface I1{
  public void p();
}//end interface I1

//===================================//

interface I2 extends I1{
  public void q();
}//end interface I2</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1034">
Since the methods declared in an interface are not allowed to have a body, these interface definitions are identical to those shown in the program from the previous module.



</para>





<para id="p1035">
<emphasis id="strong1017" effect="bold">
The class named A

</emphasis>
 

</para>





<para id="p1036">
Similarly, 

<link id="a1029" target-id="Listing_2">

Listing 2

</link>

 shows the definition of the class named 


<emphasis id="strong1018" effect="bold">
A

</emphasis>
 along with the definition of the method named 

<emphasis id="strong1019" effect="bold">
x

</emphasis>
, and the overridden method named 


<emphasis id="strong1020" effect="bold">
toString

</emphasis>
. 

</para>



	

<table id="table1001" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. Definition of the class named A.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">

				

<code id="pre1001" display="block">class A extends Object{
  
  public String toString(){
    return "toString in A";
  }//end toString()
  //---------------------------------//
  
  public String x(){
    return "x in A";
  }//end x()
  //---------------------------------//
}//end class A</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1037">
These two methods were also fully defined in the program from the previous module, so there is no change here either.



</para>





<para id="p1038">
<emphasis id="strong1021" effect="bold">
The method named B

</emphasis>
 

</para>





<para id="p1039">
<link id="a1030" target-id="Listing_3">

Listing 3

</link>

 defines the class named 

<emphasis id="strong1022" effect="bold">
B

</emphasis>
, which extends 


<emphasis id="strong1023" effect="bold">
A

</emphasis>
, and implements 

<emphasis id="strong1024" effect="bold">
I2

</emphasis>
. 

</para>



	

<table id="table1002" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. Definition of the class 
				named B.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">

				

<code id="pre1002" display="block">class B extends A implements I2{
  public void p(){
    System.out.println("p in B");
  }//end p()
  //---------------------------------//
  
  public void q(){
    System.out.println("q in B");
  }//end q();
  //---------------------------------//
}//end class B</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1040">
<emphasis id="strong1025" effect="bold">
Actually implements two interfaces



</emphasis>
 

</para>





<para id="p1041">
Although it isn't obvious from an examination of 

<link id="a1031" target-id="Listing_3">

Listing 3

</link>

 alone, the class named 


<emphasis id="strong1026" effect="bold">
B

</emphasis>
 actually implements both 

<emphasis id="strong1027" effect="bold">
I2

</emphasis>
 and 

<emphasis id="strong1028" effect="bold">
I1

</emphasis>
.  This is because the interface named 


<emphasis id="strong1029" effect="bold">
I2

</emphasis>
 extends 

<emphasis id="strong1030" effect="bold">
I1

</emphasis>
.  Thus, the class named 

<emphasis id="strong1031" effect="bold">
B

</emphasis>
 implements 


<emphasis id="strong1032" effect="bold">
I2

</emphasis>
 directly, and implements 

<emphasis id="strong1033" effect="bold">
I1

</emphasis>
 through interface inheritance. 

</para>





<para id="p1042">
<emphasis id="strong1034" effect="bold">
The cardinal rule



</emphasis>




</para>





<para id="p1043">
In case you have forgotten it, the cardinal rule for implementing interfaces is:

    

</para>





<para id="p1044">
<emphasis id="em1008" effect="italics">
If a class implements an interface, it must provide a concrete definition for all the methods declared by that interface, and all the methods inherited by that interface.  Otherwise, the class must be declared abstract and the definitions must be provided by a class that extends the abstract class.



</emphasis>
 

</para>





<para id="p1045">
<emphasis id="strong1035" effect="bold">
Must define two methods



</emphasis>
 

</para>





<para id="p1046">
As a result, the class named 

<emphasis id="strong1036" effect="bold">
B

</emphasis>
 must provide concrete definitions for the methods 


<emphasis id="strong1037" effect="bold">
p

</emphasis>
 and 

<emphasis id="strong1038" effect="bold">
q

</emphasis>
.  

<emphasis id="em1009" effect="italics">
(The method named 

<emphasis id="strong1039" effect="bold">
p

</emphasis>
 is declared in interface 


<emphasis id="strong1040" effect="bold">
I1

</emphasis>
 and the method named 

<emphasis id="strong1041" effect="bold">
q

</emphasis>
 is declared in interface 


<emphasis id="strong1042" effect="bold">
I2

</emphasis>
.)

</emphasis>
 

</para>





<para id="p1047">
As you can see from 

<link id="a1032" target-id="Listing_3">

Listing 3

</link>

, the behavior of each of these methods is to display a message indicating that it has been executed.  This will be useful later to tell us exactly which method is executed when we exercise the objects in the 


<emphasis id="strong1043" effect="bold">
main

</emphasis>
 method of the driver class. 

</para>





<para id="p1048">
<emphasis id="strong1044" effect="bold">
The class named C



</emphasis>
 

</para>





<para id="p1049">
<link id="a1033" target-id="Listing_4">

Listing 4

</link>

 shows the upgraded version of the class named 


<emphasis id="strong1045" effect="bold">
C

</emphasis>
. 

</para>



	

<table id="table1003" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. Definition of the class 
				named C.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">

				

<code id="pre1003" display="block">class C extends Object implements I2{
  public void p(){
    System.out.println("p in C");
  }//end p()
  //---------------------------------//
  
  public void q(){
    System.out.println("q in C");
  }//end q();
  //---------------------------------//
}//end class C</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1050">
In this upgraded version, the methods named 

<emphasis id="strong1046" effect="bold">
p

</emphasis>
 and 
	

<emphasis id="strong1047" effect="bold">
q

</emphasis>
 each display a message indicating that they have been executed.  Again, this will be useful later to let us know exactly which version of the methods named 
	

<emphasis id="strong1048" effect="bold">
p

</emphasis>
 and 

<emphasis id="strong1049" effect="bold">
q

</emphasis>
 get executed when we exercise the objects. 

</para>





<para id="p1051">
<emphasis id="strong1050" effect="bold">
The driver class

</emphasis>
 

</para>





<para id="p1052">
<link id="a1034" target-id="Listing_5">

Listing 5

</link>

 shows the beginning of the class named 


<emphasis id="strong1051" effect="bold">
Poly06

</emphasis>
.  The 

<emphasis id="strong1052" effect="bold">
main

</emphasis>
 method in this class instantiates objects of the classes named 


<emphasis id="strong1053" effect="bold">
B

</emphasis>
 and 

<emphasis id="strong1054" effect="bold">
C

</emphasis>
, and exercises them to illustrate what can, and what cannot be done with them. 

</para>



	

<table id="table1004" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

. Beginning of the class 
				named Poly06.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">

				

<code id="pre1004" display="block">public class Poly06{
  public static void main(
                        String[] args){
    I1 var1 = new B();
    var1.p();//OK </code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1053">
<emphasis id="strong1055" effect="bold">
A new data type

</emphasis>
 

</para>





<para id="p1054">
As explained in the previous module, when you define a new interface, you create a new data type.



</para>





<para id="p1055">
You can store the reference to any object instantiated from any class that implements the interface in a reference variable of that type.



</para>





<para id="p1056">
<emphasis id="strong1056" effect="bold">
A new object of the class B

</emphasis>
 

</para>





<para id="p1057">
The code shown in 

<link id="a1035" target-id="Listing_5">

Listing 5

</link>

 instantiates a new object of the class 


<emphasis id="strong1057" effect="bold">
B

</emphasis>
. 

</para>





<para id="p1058">
<emphasis id="strong1058" effect="bold">
Important: stored as type I1



</emphasis>
 

</para>





<para id="p1059">
It is important to note that the code in 

<link id="a1036" target-id="Listing_5">

Listing 5

</link>

 stores the object's reference in a reference variable of the interface type 


<emphasis id="strong1059" effect="bold">
I1

</emphasis>
 

<emphasis id="em1010" effect="italics">
(not as the class type 

<emphasis id="strong1060" effect="bold">
B

</emphasis>
)

</emphasis>
. 

</para>





<para id="p1060">
<emphasis id="strong1061" effect="bold">
Call an interface method



</emphasis>
 

</para>





<para id="p1061">
Following this, the code in 

<link id="a1037" target-id="Listing_5">

Listing 5

</link>

 successfully calls the method named 


<emphasis id="strong1062" effect="bold">
p

</emphasis>
 on the reference, producing the following output on the computer screen: 

</para>





<code id="pre1005" display="block">p in B </code>




<para id="p1062">
<emphasis id="strong1063" effect="bold">
Why is this allowed?

</emphasis>
 

</para>





<para id="p1063">
This is allowable because the method named 

<emphasis id="strong1064" effect="bold">
p

</emphasis>
 is declared in the interface named 


<emphasis id="strong1065" effect="bold">
I1

</emphasis>
. 

</para>





<para id="p1064">
<emphasis id="strong1066" effect="bold">
Which version of the method was executed?



</emphasis>
 

</para>





<para id="p1065">
It is also important to note, 

<emphasis id="em1011" effect="italics">
(by observing the output)

</emphasis>
, that the version of the method defined in the class named 


<emphasis id="strong1067" effect="bold">
B

</emphasis>
 

<emphasis id="em1012" effect="italics">
(and not the version defined in the class named 

<emphasis id="strong1068" effect="bold">
C

</emphasis>
)

</emphasis>
 was actually executed. 

</para>





<para id="p1066">
<emphasis id="strong1069" effect="bold">
Attempt unsuccessfully to call q



</emphasis>
 

</para>





<para id="p1067">
Next, the code in 

<link id="a1038" target-id="Listing_6">

Listing 6

</link>

 attempts, unsuccessfully, to call the method named 


<emphasis id="strong1070" effect="bold">
q

</emphasis>
 on the same reference variable of type 

<emphasis id="strong1071" effect="bold">
I1

</emphasis>
. 

</para>



	
	

<table id="table1005" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

. Try unsuccessfully to call the method 
				named q.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">

				

<code id="pre1006" display="block">     var1.q();//won't compile</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1068">
<emphasis id="strong1072" effect="bold">
Why did it fail?

</emphasis>
 

</para>





<para id="p1069">
Even though the class named 

<emphasis id="strong1073" effect="bold">
B

</emphasis>
, from which the object was instantiated, defines the method named 


<emphasis id="strong1074" effect="bold">
q

</emphasis>
, that method is neither declared nor inherited into the interface named 


<emphasis id="strong1075" effect="bold">
I1

</emphasis>
. 

</para>





<para id="p1070">
Therefore, a reference of type 

<emphasis id="strong1076" effect="bold">
I1

</emphasis>
 cannot be used to call the method named 


<emphasis id="strong1077" effect="bold">
q

</emphasis>
.



</para>





<para id="p1071">
<emphasis id="strong1078" effect="bold">
The solution is a type conversion



</emphasis>
 

</para>





<para id="p1072">
<link id="a1039" target-id="Listing_7">

Listing 7

</link>

 shows the solution to the problem presented by 


<link id="a1040" target-id="Listing_6">

Listing 6

</link>

. 

</para>



	

<table id="table1006" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

. Successfully call the 
				method named q.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">

				

<code id="pre1007" display="block">    ((I2)var1).q();//OK</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1073">
As in the case of polymorphism involving class inheritance, the solution is to change the type of the reference to a type that either declares or inherits the method named 
	

<emphasis id="strong1079" effect="bold">
q

</emphasis>
. 

</para>





<para id="p1074">
In this case, this takes the form of using a cast operator to temporarilhy convert the type of the reference from type 


<emphasis id="strong1080" effect="bold">
I1

</emphasis>
, to type 

<emphasis id="strong1081" effect="bold">
I2

</emphasis>
, and then calling the method named 


<emphasis id="strong1082" effect="bold">
q

</emphasis>
 on that reference of a new type. 

</para>





<para id="p1075">
This produces the following output:



</para>





<code id="pre1008" display="block">q in B </code>




<para id="p1076">
<emphasis id="strong1083" effect="bold">
Using type I2 directly

</emphasis>
 

</para>





<para id="p1077">
<link id="a1041" target-id="Listing_8">

Listing 8 

</link>

instantiates a new object of the class 


<emphasis id="strong1084" effect="bold">
B

</emphasis>
 and stores the object's reference in a reference variable of the interface type 


<emphasis id="strong1085" effect="bold">
I2

</emphasis>
. 

</para>



	

<table id="table1007" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Listing_8" effect="bold">

Listing 8

</emphasis>

. Instantiate a new object 
				of the class B.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">

				

<code id="pre1009" display="block">
    I2 var2 = new B();
    var2.p();//OK
    var2.q();//OK</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1078">
<emphasis id="strong1086" effect="bold">
Call both methods successfully



</emphasis>




</para>





<para id="p1079">
Then the code successfully calls both the methods 

<emphasis id="strong1087" effect="bold">
p

</emphasis>
 and 


<emphasis id="strong1088" effect="bold">
q

</emphasis>
 on that reference, producing the following output:



</para>





<code id="pre1010" display="block">p in B 
q in B </code>




<para id="p1080">
<emphasis id="strong1089" effect="bold">
Why does this work?

</emphasis>



</para>





<para id="p1081">
This works because:

    

</para>





<list id="ul1005" list-type="bulleted">

	

<item id="li1026">
The interface named 

<emphasis id="strong1090" effect="bold">
I2

</emphasis>
 declares the method named 
	

<emphasis id="strong1091" effect="bold">
q

</emphasis>
 

</item>


	

<item id="li1027">
The interface named 

<emphasis id="strong1092" effect="bold">
I2

</emphasis>
 inherits the declaration of the method named 
	

<emphasis id="strong1093" effect="bold">
p

</emphasis>
 

</item>


	

<item id="li1028">
The class named 

<emphasis id="strong1094" effect="bold">
B

</emphasis>
 implements the interface named 
	

<emphasis id="strong1095" effect="bold">
I2

</emphasis>
 and provides concrete definitions of both the methods 
	

<emphasis id="strong1096" effect="bold">
p

</emphasis>
 and 

<emphasis id="strong1097" effect="bold">
q

</emphasis>
. 

</item>




</list>




<para id="p1082">
<emphasis id="strong1098" effect="bold">
Attempt, unsuccessfully, to call x on var2



</emphasis>



</para>





<para id="p1083">
Following this, the code in 

<link id="a1042" target-id="Listing_9">

Listing 9

</link>

 attempts, unsuccessfully, to call the method named 


<emphasis id="strong1099" effect="bold">
x

</emphasis>
 on the reference variable named 

<emphasis id="strong1100" effect="bold">
var2

</emphasis>
 of type 


<emphasis id="strong1101" effect="bold">
I2

</emphasis>
.  This code produces a compiler error.


</para>



	

<table id="table1008" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1008">

			

<row id="tr1016">

				

<entry id="th1008">
<emphasis id="Listing_9" effect="bold">

Listing 9

</emphasis>

. Try unsuccessfully to 
				call the method named x.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1008">

			

<row id="tr1017">

				

<entry id="td1008">

				

<code id="pre1011" display="block">    String var3 = var2.x();</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1084">
<emphasis id="strong1102" effect="bold">
The object of class B has a method named x



</emphasis>
 

</para>





<para id="p1085">
At this point, the reference variable named 

<emphasis id="strong1103" effect="bold">
var2

</emphasis>
 contains a reference to an object instantiated from the class named 


<emphasis id="strong1104" effect="bold">
B

</emphasis>
. 

</para>





<para id="p1086">
Furthermore, the class named 

<emphasis id="strong1105" effect="bold">
B

</emphasis>
 inherits the method named 


<emphasis id="strong1106" effect="bold">
x

</emphasis>
 from the class named 

<emphasis id="strong1107" effect="bold">
A

</emphasis>
. 

</para>





<para id="p1087">
<emphasis id="strong1108" effect="bold">
Necessary, but not sufficient



</emphasis>
 

</para>





<para id="p1088">
However, the fact that the object contains the method is not sufficient to make it executable in this case.



</para>





<para id="p1089">
<emphasis id="strong1109" effect="bold">
Same song, different verse



</emphasis>
 

</para>





<para id="p1090">
The interface named 

<emphasis id="strong1110" effect="bold">
I2

</emphasis>
 neither declares nor inherits the method named 


<emphasis id="strong1111" effect="bold">
x

</emphasis>
. 

</para>





<para id="p1091">
Therefore, the method named 

<emphasis id="strong1112" effect="bold">
x

</emphasis>
 cannot be called using the reference stored in the variable named 


<emphasis id="strong1113" effect="bold">
var2

</emphasis>
 unless the reference is converted either to type 

<emphasis id="strong1114" effect="bold">
A

</emphasis>



<emphasis id="em1013" effect="italics">
(where the method named 

</emphasis>
<emphasis id="strong1115" effect="bold">
<emphasis id="em1014" effect="italics">
x

</emphasis>
</emphasis>
<emphasis id="em1015" effect="italics">
 is defined)

</emphasis>
 or type 


<emphasis id="strong1116" effect="bold">
B

</emphasis>
 

<emphasis id="em1016" effect="italics">
(where the method named x is inherited)

</emphasis>
. 

</para>





<para id="p1092">
<emphasis id="strong1117" effect="bold">
Do the type conversion

</emphasis>




</para>





<para id="p1093">
The required type conversion is accomplished in 

<link id="a1043" target-id="Listing_10">

Listing 10

</link>

 where the reference is temporarily converted to type 


<emphasis id="strong1118" effect="bold">
A

</emphasis>
 using a cast operator. 

<emphasis id="em1017" effect="italics">
(It would also work to cast it to type 


<emphasis id="strong1119" effect="bold">
B

</emphasis>
.) 

</emphasis>
 

</para>



	

<table id="table1009" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1009">

			

<row id="tr1018">

				

<entry id="th1009">
<emphasis id="Listing_10" effect="bold">

Listing 10

</emphasis>

. Successfully call the 
				method named x.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1009">

			

<row id="tr1019">

				

<entry id="td1009">

				

<code id="pre1012" display="block">    String var3 = ((A)var2).x();//OK
    System.out.println(var3);</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1094">
The String produced by the first statement in 

<link id="a1044" target-id="Listing_10">

Listing 10

</link>

 is passed to the 
	

<emphasis id="strong1120" effect="bold">
println

</emphasis>
 method causing the following text to be displayed on the computer screen:



</para>





<code id="pre1013" display="block">x in A </code>




<para id="p1095">
<emphasis id="strong1121" effect="bold">
Get ready for a surprise



</emphasis>
</para>





<para id="p1096">
If you have now caught onto the general scheme of things, the next thing that I am going to show you may result in a little surprise.



</para>





<para id="p1097">
<emphasis id="strong1122" effect="bold">
Successfully call the toString method on var2

</emphasis>
 

</para>





<para id="p1098">
The first statement in 

<link id="a1045" target-id="Listing_11">

Listing 11

</link>

 successfully calls the 


<emphasis id="strong1123" effect="bold">
toString

</emphasis>
 method on the object of the class 

<emphasis id="strong1124" effect="bold">
B

</emphasis>
 whose reference is stored as type 


<emphasis id="strong1125" effect="bold">
I2

</emphasis>
. 

</para>




	
	

<table id="table1010" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1010">

			

<row id="tr1020">

				

<entry id="th1010">
<emphasis id="Listing_11" effect="bold">

Listing 11

</emphasis>

. Call the toString 
				method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1010">

			

<row id="tr1021">

				

<entry id="td1010">

				

<code id="pre1014" display="block">
    var3 = var2.toString();//OK
    System.out.println(var3);</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1099">
<emphasis id="strong1126" effect="bold">
How can this work?



</emphasis>
 

</para>





<para id="p1100">
How can this work when the interface named 

<emphasis id="strong1127" effect="bold">
I2

</emphasis>
 neither declares nor inherits a method named 


<emphasis id="strong1128" effect="bold">
toString

</emphasis>
. 

</para>





<para id="p1101">
<emphasis id="strong1129" effect="bold">
A subtle difference in behavior

</emphasis>
 

</para>





<para id="p1102">
I am unable to point you to any Oracle documentation to verify the following.


<emphasis id="em1018" effect="italics">
(I also admit that I haven't spent a large amount of time searching for such documentation).


</emphasis>
 

</para>





<para id="p1103">
With respect to the eleven methods declared in the 

<emphasis id="strong1130" effect="bold">
Object

</emphasis>



<emphasis id="em1019" effect="italics">
class (listed in an earlier module)

</emphasis>
, a reference of an interface type acts like it is also of type 


<emphasis id="strong1131" effect="bold">
Object

</emphasis>
. 

</para>





<para id="p1104">
<emphasis id="strong1132" effect="bold">
And the end result is ...

</emphasis>
 

</para>





<para id="p1105">
This allows the methods declared in the 

<emphasis id="strong1133" effect="bold">
Object

</emphasis>
 class to be called on references held as interface types without a requirement to cast the references to type 


<emphasis id="strong1134" effect="bold">
Object

</emphasis>
. 

<emphasis id="em1020" effect="italics">
(Later, I will show you that the reverse is not true.)


</emphasis>
 

</para>





<para id="p1106">
<emphasis id="strong1135" effect="bold">
The output



</emphasis>
 

</para>





<para id="p1107">
Therefore, the two statements shown in 

<link id="a1046" target-id="Listing_11">

Listing 11

</link>

 cause the following to be displayed on the computer screen: 

</para>





<code id="pre1015" display="block">toString in A </code>




<para id="p1108">
<emphasis id="strong1136" effect="bold">
Polymorphism applies

</emphasis>
 

</para>





<para id="p1109">
Note that the object whose reference is held in 

<emphasis id="strong1137" effect="bold">
var2

</emphasis>
 was instantiated from the class named 


<emphasis id="strong1138" effect="bold">
B

</emphasis>
, which extends the class named 

<emphasis id="strong1139" effect="bold">
A

</emphasis>
. 

</para>





<para id="p1110">
Due to polymorphism, the 

<emphasis id="strong1140" effect="bold">
toString

</emphasis>
 method that was actually executed in 


<link id="a1047" target-id="Listing_11">

Listing 11

</link>

 was the overridden version defined in class 


<emphasis id="strong1141" effect="bold">
A

</emphasis>
, and not the default version defined in the 

<emphasis id="strong1142" effect="bold">
Object

</emphasis>
 class.  The overridden version in class 


<emphasis id="strong1143" effect="bold">
A

</emphasis>
 was inherited into class 

<emphasis id="strong1144" effect="bold">
B

</emphasis>
. 

</para>





<para id="p1111">
<emphasis id="strong1145" effect="bold">
The reverse is not true



</emphasis>
</para>





<para id="p1112">
While a reference of an interface type also acts like type 

<emphasis id="strong1146" effect="bold">
Object

</emphasis>
, a reference of type 


<emphasis id="strong1147" effect="bold">
Object

</emphasis>
 does not act like an interface type. 

</para>





<para id="p1113">
<emphasis id="strong1148" effect="bold">
Store a reference as type Object



</emphasis>
</para>





<para id="p1114">
The code in 

<link id="a1048" target-id="Listing_12">

Listing 12

</link>

 instantiates a new object of type 


<emphasis id="strong1149" effect="bold">
B

</emphasis>
 and stores it in a reference of type 

<emphasis id="strong1150" effect="bold">
Object

</emphasis>
.


</para>





<para id="p1115">
<emphasis id="strong1151" effect="bold">
Attempt unsuccessfully to call p

</emphasis>
 

</para>





<para id="p1116">
Then it attempts, unsuccessfully, to call the method named 

<emphasis id="strong1152" effect="bold">
p

</emphasis>
 on the reference.


</para>




	
	

<table id="table1011" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1011">

			

<row id="tr1022">

				

<entry id="th1011">
<emphasis id="Listing_12" effect="bold">

Listing 12

</emphasis>

. Try unsuccessfully to 
				call the method named p.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1011">

			

<row id="tr1023">

				

<entry id="td1011">

				

<code id="pre1016" display="block">
    Object var4 = new B();
    var4.p();//won't compile</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1117">
<emphasis id="strong1153" effect="bold">
Same song, an even different verse



</emphasis>
 

</para>





<para id="p1118">
The code in 

<link id="a1049" target-id="Listing_12">

Listing 12

</link>

 won't compile, because the 


<emphasis id="strong1154" effect="bold">
Object

</emphasis>
 class neither defines nor inherits the method named 


<emphasis id="strong1155" effect="bold">
p

</emphasis>
. 

</para>





<para id="p1119">
In order to call the method named 

<emphasis id="strong1156" effect="bold">
p

</emphasis>
 on the reference of type 


<emphasis id="strong1157" effect="bold">
Object

</emphasis>
, the type of the reference must be changed to either: 

</para>





<list id="ul1006" list-type="bulleted">

	

<item id="li1029">
The class in which the method is defined
    

</item>


	

<item id="li1030">
An interface that declares the method, which is implemented by the class in which the method is defined
    

</item>


	

<item id="li1031">
A couple of other possibilities involving subclasses or sub-interfaces
	

</item>




</list>




<para id="p1120">
<emphasis id="strong1158" effect="bold">
Convert reference to type I1

</emphasis>
 

</para>





<para id="p1121">
The code in 

<link id="a1050" target-id="Listing_13">

Listing 13

</link>

 uses a cast operator to 
temporarily convert the reference from type 


<emphasis id="strong1159" effect="bold">
Object

</emphasis>
 to type 

<emphasis id="strong1160" effect="bold">
I1

</emphasis>
, and calls the method named 


<emphasis id="strong1161" effect="bold">
p

</emphasis>
 on the converted reference. 

</para>




	
	

<table id="table1012" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1012">

			

<row id="tr1024">

				

<entry id="th1012">
<emphasis id="Listing_13" effect="bold">

Listing 13

</emphasis>

. Successfully call the 
				method named p.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1012">

			

<row id="tr1025">

				

<entry id="td1012">

				

<code id="pre1017" display="block">       ((I1)var4).p();//OK</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1122">
<emphasis id="strong1162" effect="bold">
The output



</emphasis>




</para>





<para id="p1123">
The code in 

<link id="a1051" target-id="Listing_13">

Listing 13

</link>

 compiles and executes successfully, producing the following text on the computer screen:



</para>





<code id="pre1018" display="block">p in B </code>




<para id="p1124">
<emphasis id="strong1163" effect="bold">
A walk in the park



</emphasis>
</para>





<para id="p1125">
If you understand all of the above, understanding the code in 


<link id="a1052" target-id="Listing_14">

Listing 14

</link>

 should be like a walk in the park on a sunny day.


</para>




	
	

<table id="table1013" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1013">

			

<row id="tr1026">

				

<entry id="th1013">
<emphasis id="Listing_14" effect="bold">

Listing 14. 

</emphasis>

A walk in the park.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1013">

			

<row id="tr1027">

				

<entry id="td1013">

				

<code id="pre1019" display="block">
    var2 = new C();
    var2.p();//OK
    var2.q();//OK</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1126">
<emphasis id="strong1164" effect="bold">
Class C implements I2

</emphasis>




</para>





<para id="p1127">
Recall that the class named 

<emphasis id="strong1165" effect="bold">
C

</emphasis>
 also implements the interface named 


<emphasis id="strong1166" effect="bold">
I2

</emphasis>
.



</para>





<para id="p1128">
The code in 

<link id="a1053" target-id="Listing_14">

Listing 14

</link>

 instantiates a new object of the class named 


<emphasis id="strong1167" effect="bold">
C

</emphasis>
, and stores the object's reference in the existing reference variable named 


<emphasis id="strong1168" effect="bold">
var2

</emphasis>
 of type 

<emphasis id="strong1169" effect="bold">
I2

</emphasis>
.



</para>





<para id="p1129">
Then it calls the methods named 

<emphasis id="strong1170" effect="bold">
p

</emphasis>
 and 

<emphasis id="strong1171" effect="bold">
q

</emphasis>
 on that reference, causing the following text to be displayed on the computer screen:



</para>





<code id="pre1020" display="block">p in C 
q in C </code>




<para id="p1130">
<emphasis id="strong1172" effect="bold">
Which methods were executed?

</emphasis>
 

</para>





<para id="p1131">
This confirms that the methods that were actually executed were the versions defined in the class named 


<emphasis id="strong1173" effect="bold">
C

</emphasis>
 (

<emphasis id="em1021" effect="italics">
and not the versions defined in the class named 

<emphasis id="strong1174" effect="bold">
B

</emphasis>
)

</emphasis>
. 

</para>





<para id="p1132">
<emphasis id="strong1175" effect="bold">
Same method name, different behavior



</emphasis>
 

</para>





<para id="p1133">
It is important to note that the behavior of the methods named 

<emphasis id="strong1176" effect="bold">
p

</emphasis>
 and 


<emphasis id="strong1177" effect="bold">
q

</emphasis>
, as defined in the class named 

<emphasis id="strong1178" effect="bold">
C

</emphasis>
, is different from the behavior of the methods having the same signatures defined in the class named 


<emphasis id="strong1179" effect="bold">
B

</emphasis>
.  Therein lies much of the power of the Java interface. 

</para>





<para id="p1134">
<emphasis id="strong1180" effect="bold">
The power of the Java interface



</emphasis>
 

</para>





<para id="p1135">
Using interface types, it is possible to collect many objects instantiated from many different classes 


<emphasis id="em1022" effect="italics">
(provided all the classes implement a common interface)

</emphasis>
, and store each of the references in some kind of collection as the interface type. 

</para>





<para id="p1136">
<emphasis id="strong1181" effect="bold">
Appropriate behavior

</emphasis>
 

</para>





<para id="p1137">
Then it is possible to call any of the interface methods on any of the objects whose references are stored in the collection.



</para>





<para id="p1138">
To use the current jargon, when a given interface method is called on a given reference, the behavior that results will be 


<emphasis id="em1023" effect="italics">
appropriate

</emphasis>
 to the class from which that particular object was instantiated. 

</para>





<para id="p1139">
This is runtime polymorphism based on interfaces and overridden methods. 

</para>




	
	

</section>
<section id="h11004">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1140">
<emphasis id="strong1182" effect="bold">
If you don't understand interfaces ...



</emphasis>
 

</para>





<para id="p1141">
If you don't understand interfaces, you don't understand Java, and it is highly unlikely that you will be successful as a Java programmer.



</para>





<para id="p1142">
<emphasis id="strong1183" effect="bold">
Interfaces are indispensable in Java 

</emphasis>
 

</para>





<para id="p1143">
Beyond writing "Hello World" programs, there is little if anything that can be accomplished using Java without understanding and using interfaces.



</para>





<para id="p1144">
<emphasis id="strong1184" effect="bold">
What can you do with interfaces?

</emphasis>
 

</para>





<para id="p1145">
The sample program that I discussed in this module has illustrated 

<emphasis id="em1024" effect="italics">
(in a very basic form)

</emphasis>
 some of the things that you can do with interfaces, along with some of the things that you cannot do with interfaces.  

</para>





<para id="p1146">
In order to write programs that do something worthwhile, you will need to extend the concepts illustrated by this sample program into real-world requirements. 

</para>





</section>
<section id="h11005">
<title>
<emphasis id="Whats_next" effect="bold">

What's next?

</emphasis>


</title>




<para id="p1147">
Java supports the use of 

<emphasis id="strong1185" effect="bold">
static

</emphasis>
 member variables and 

<emphasis id="strong1186" effect="bold">
static

</emphasis>
 methods in class definitions. 

</para>





<para id="p1148">
While 

<emphasis id="strong1187" effect="bold">
static

</emphasis>
 members can be useful in some situations, the existence of 


<emphasis id="strong1188" effect="bold">
static

</emphasis>
 members tends to complicate the overall object-oriented structure of Java. 

</para>





<para id="p1149">
Furthermore, the overuse of 

<emphasis id="strong1189" effect="bold">
static

</emphasis>
 members can lead to problems similar to those experienced in languages like C and C++ that support global variables and global functions. 

</para>





<para id="p1150">
The use of static members will be discussed in the next module. 

</para>



	

</section>
<section id="h11006">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1151">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1190" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1007" list-type="bulleted">

					

<item id="li1032">
Module name: Java OOP: Polymorphism and Interfaces, Part 2

</item>


					

<item id="li1033">
File: Java1618.htm


</item>


					

<item id="li1034">
Published: 04/10/02

</item>



				

</list>


				

</note>

			


		



	





	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1191" effect="bold">
Disclaimers:

</emphasis>
<para id="p1152">
<emphasis id="strong1192" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>



				

<para id="p1153">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>



				

<para id="p1154">
In the past, unknown individuals have misappropriated copies 
				of my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				receive no compensation for those sales and don't know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a bootleg copy of a module that is freely 
				available on cnx.org.

</para>



				

<para id="p1155">
<emphasis id="strong1193" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>



				

</note>

			


		



	





</section>
<section id="h11007">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1156">
A complete listing of the sample program is shown in 

<link id="a1054" target-id="Listing_15">

Listing 15

</link>

 below. 

</para>









<table id="table1014" summary="A table." pgwide="0">
<tgroup cols="1">





<thead id="thead1014">



<row id="tr1028">



<entry id="th1014">



<emphasis id="Listing_15" effect="bold">

Listing 15

</emphasis>

. 

<emphasis id="strong1194" effect="bold">
<emphasis id="Listing_15x0" effect="bold">

Complete 
program listing.

</emphasis>


</emphasis>



</entry>



</row>



</thead>





<tbody id="tbody1014">



<row id="tr1029">



<entry id="td1014">



<code id="pre1021" display="block">/*File Poly06.java
Copyright 2002, R.G.Baldwin

This program illustrates polymorphic 
behavior using interfaces in addition
to class inheritance.

The program output is:
p in B
q in B

p in B
q in B
x in A
toString in A

p in B

p in C
q in C
**************************************/

interface I1{
  public void p();
}//end interface I1
//===================================//

interface I2 extends I1{
  public void q();
}//end interface I2
//===================================//

class A extends Object{
  
  public String toString(){
    return "toString in A";
  }//end toString()
  //---------------------------------//
  
  public String x(){
    return "x in A";
  }//end x()
  //---------------------------------//
}//end class A
//===================================//

class B extends A implements I2{
  public void p(){
    System.out.println("p in B");
  }//end p()
  //---------------------------------//
  
  public void q(){
    System.out.println("q in B");
  }//end q();
  //---------------------------------//
}//end class B
//===================================//

class C extends Object implements I2{
  public void p(){
    System.out.println("p in C");
  }//end p()
  //---------------------------------//
  
  public void q(){
    System.out.println("q in C");
  }//end q();
  //---------------------------------//
}//end class B
//===================================//

public class Poly06{
  public static void main(
                        String[] args){
    I1 var1 = new B();
    var1.p();//OK
    //var1.q();//won't compile
    ((I2)var1).q();//OK
    System.out.println("");//blank line
    
    I2 var2 = new B();
    var2.p();//OK
    var2.q();//OK
    //Following won't compile
    //String var3 = var2.x();
    String var3 = ((A)var2).x();//OK
    System.out.println(var3);
    var3 = var2.toString();//OK
    System.out.println(var3);
    System.out.println("");//blank line
    
    Object var4 = new B();
    //var4.p();//won't compile
    ((I1)var4).p();//OK
    System.out.println("");//blank line
    
    var2 = new C();
    var2.p();//OK
    var2.q();//OK
    System.out.println("");//blank line
  }//end main
}//end class Poly06</code>





</entry>



</row>



</tbody>





</tgroup>
</table>




<para id="p1157">
-end- 

</para>







</section>
</content>




</document>