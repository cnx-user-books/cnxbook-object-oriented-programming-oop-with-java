<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Java1606: Inheritance, Part 2</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m44156</md:content-id>
  <md:title>Java1606: Inheritance, Part 2</md:title>
  <md:abstract>Baldwin shows you how to use method overriding to cause the behavior of a method inherited into a subclass to be appropriate for an object instantiated from the subclass.</md:abstract>
  <md:uuid>d7f2941b-9e06-4788-a227-346c51e51869</md:uuid>
</metadata>

<content>






<para id="p1000">
Revised: Thu Aug 11 14:45:15 CDT 2016

</para>




<para id="p1001">
<emphasis id="em1000" effect="italics">
This page is included in the following Books:

</emphasis>
</para>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">

	

<link id="a1000" url="http://cnx.org/contents/dzOvxPFw">


<emphasis id="em1001" effect="italics">
ITSE 2321 - Object-Oriented Programming (Java)

</emphasis>
</link>


</item>


	

<item id="li1001">

	

<link id="a1001" url="http://cnx.org/contents/-2RmHFs_">


<emphasis id="em1002" effect="italics">
Object-Oriented Programming (OOP) with Java 
	

</emphasis>
 
	

</link>

 

</item>




</list>














<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1001" list-type="bulleted">

	

<item id="li1002">
<link id="a1002" target-id="Preface">

Preface

</link>


	

<list id="ul1002" list-type="bulleted">

		

<item id="li1003">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1003" list-type="bulleted">

			

<item id="li1004">
<link id="a1004" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1005">
<link id="a1005" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1006">
<link id="a1006" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1007">
<link id="a1007" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


</item>


	

<item id="li1008">
<link id="a1008" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1009">
<link id="a1009" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1010">
<link id="a1010" target-id="Miscellaneous">

Miscellaneous

</link>


</item>


	

<item id="li1011">
<link id="a1011" target-id="Complete_program_listing">

Complete program listing

</link>


</item>




</list>


	
	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	
	

<para id="p1002">
This module is one of a series of modules designed to teach you about the essence of Object-Oriented Programming (OOP) using Java. 

</para>



	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1003">
I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the Figures 
and Listings while you are reading about them.

</para>



	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1004" list-type="bulleted">

		

<item id="li1012">
<link id="a1012" target-id="Figure_1">

Figure 1

</link>

. Program output. 

</item>


	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1005" list-type="bulleted">

		

<item id="li1013">
<link id="a1013" target-id="Listing_1">

Listing 1

</link>

. The class named Radio.

</item>


		

<item id="li1014">
<link id="a1014" target-id="Listing_2">

Listing 2

</link>

. Beginning of the Combo class. 

</item>


		

<item id="li1015">
<link id="a1015" target-id="Listing_3">

Listing 3

</link>

. The overridden playStation method. 

</item>


		

<item id="li1016">
<link id="a1016" target-id="Listing_4">

Listing 4

</link>

. The driver class. 

</item>


		

<item id="li1017">
<link id="a1017" target-id="Listing_5">

Listing 5

</link>

. The program named Radio03.

</item>


	

</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>


	

<para id="p1004">
This module builds on the 
	

<link id="a1018" url="http://cnx.org/contents/dzOvxPFw:ZMA3cfBy">

previous module

</link>

. It is recommended that you study that module before embarking on this module.

</para>





<para id="p1005">
The program discussed in this module extends a 

<emphasis id="strong1000" effect="bold">
Radio

</emphasis>
 class to produce a new class that simulates an upgraded car radio containing a tape player.

</para>





<para id="p1006">
Method overriding is used to modify the behavior of a method of the 

<emphasis id="strong1001" effect="bold">
Radio

</emphasis>
 class named 


<emphasis id="strong1002" effect="bold">
playStation

</emphasis>
, to cause that method to behave appropriately when a tape has been inserted into the tape player. 

</para>



	
	

</section>
<section id="h11003">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	
	

<para id="p1007">
<emphasis id="strong1003" effect="bold">
Inheriting methods and variables

</emphasis>
</para>





<para id="p1008">
When you define a class that extends another class, an object instantiated from your new class will contain all of the methods and all of the variables defined in your new class. The object will also contain all of the methods and all of the variables defined in all of the superclasses of your new class.

</para>





<para id="p1009">
<emphasis id="strong1004" effect="bold">
The behavior of the methods

</emphasis>
</para>





<para id="p1010">
The behavior of the methods defined in a superclass and inherited into your new class may, or may not, be appropriate for an object instantiated from your new class. If those methods are appropriate, you can simply leave them alone.

</para>





<para id="p1011">
<emphasis id="strong1005" effect="bold">
Overriding to change behavior

</emphasis>
</para>





<para id="p1012">
If the behavior of one or more methods defined in a superclass and inherited into your new class is not appropriate for an object of your new class, you can change that behavior by 


<emphasis id="em1003" effect="italics">
overriding

</emphasis>
 the method in your new class. 

</para>



	

<para id="p1013">
<emphasis id="strong1006" effect="bold">
How do you override a method?

</emphasis>
</para>





<para id="p1014">
To override a method in your new class, simply reproduce the name, argument list, and return type of the original method in a new method definition in your new class. Then provide a body for the new method. Write code in that body to cause the behavior of the overridden method to be appropriate for an object of your new class.

</para>





<para id="p1015">
Here is a more precise description of method overriding taken from the excellent book entitled 


<emphasis id="em1004" effect="italics">
The Complete Java 2 Certification Study Guide

</emphasis>
, by Roberts, Heller, and Ernest:

</para>





<para id="p1016">
<emphasis id="em1005" effect="italics">
"A valid override has identical argument types and order, identical return type, and is not less accessible than the original method. The overriding method must not throw any checked exceptions that were not declared for the original method."

</emphasis>
</para>





<para id="p1017">
Any method that is not declared 

<emphasis id="strong1007" effect="bold">
final

</emphasis>
 can be overridden in a subclass. 

</para>



	

<para id="p1018">
<emphasis id="strong1008" effect="bold">
Overriding versus overloading

</emphasis>
</para>





<para id="p1019">
Don't confuse method 

<emphasis id="em1006" effect="italics">
overriding

</emphasis>
 with method 

<emphasis id="em1007" effect="italics">
overloading

</emphasis>
. Here is what Roberts, Heller, and Ernest have to say about overloading methods:

</para>





<para id="p1020">
<emphasis id="em1008" effect="italics">
"A valid overload differs in the number or type of its arguments. Differences in argument names are not significant. A different return type is permitted, but is not sufficient by itself to distinguish an overloading method."

</emphasis>
</para>





<para id="p1021">
<emphasis id="strong1009" effect="bold">
Car radios with built-in tape players

</emphasis>
</para>





<para id="p1022">
This module presents a sample program that duplicates the functionality of the program named 


<emphasis id="strong1010" effect="bold">
Radio02

</emphasis>
 discussed in the previous module. A class named 

<emphasis id="strong1011" effect="bold">
Radio

</emphasis>
 is used to define the specifics of objects intended to simulate car radios.

</para>





<para id="p1023">
A class named 

<emphasis id="strong1012" effect="bold">
Combo

</emphasis>
 extends the 

<emphasis id="strong1013" effect="bold">
Radio

</emphasis>
 class to define the specifics of objects intended to simulate improved car radios having built-in tape players. 

</para>



	

<para id="p1024">
<emphasis id="strong1014" effect="bold">
Modification of the superclass

</emphasis>
</para>





<para id="p1025">
In the program named 

<emphasis id="strong1015" effect="bold">
Radio02

</emphasis>
 in the previous module, it was necessary to modify the superclass before extending it to provide the desired functionality. 


<emphasis id="em1009" effect="italics">
(The requirement to modify the superclass before extending it seriously detracts from the benefits of inheritance.)

</emphasis>
</para>





<para id="p1026">
<emphasis id="strong1016" effect="bold">
No superclass modification in this module

</emphasis>
</para>





<para id="p1027">
The sample program 

<emphasis id="em1010" effect="italics">
(named 

<emphasis id="strong1017" effect="bold">
Radio03

</emphasis>
)

</emphasis>
 in this module uses method overriding to provide the same functionality as the previous program named 


<emphasis id="strong1018" effect="bold">
Radio02

</emphasis>
, without any requirement to modify the superclass before extending it. 


<emphasis id="em1011" effect="italics">
(Thus this program is more representative of the benefits available through inheritance than was the program in the previous module.)

</emphasis>
 

</para>



	

<para id="p1028">
<emphasis id="strong1019" effect="bold">
Overridden playStation method

</emphasis>
</para>





<para id="p1029">
In particular, a method named 

<emphasis id="strong1020" effect="bold">
playStation

</emphasis>
, defined in the superclass named 


<emphasis id="strong1021" effect="bold">
Radio

</emphasis>
, is overridden in the subclass named 

<emphasis id="strong1022" effect="bold">
Combo

</emphasis>
.

</para>





<para id="p1030">
The original version of 

<emphasis id="strong1023" effect="bold">
playStation

</emphasis>
 in the superclass supports only radio operations. The overridden version of 


<emphasis id="strong1024" effect="bold">
playStation

</emphasis>
 defined in the subclass supports both radio operations and tape operations.

</para>





<para id="p1031">
<emphasis id="em1012" effect="italics">
(The behavior of the version of 

<emphasis id="strong1025" effect="bold">
playStation

</emphasis>
 defined in the 


<emphasis id="strong1026" effect="bold">
Radio

</emphasis>
 class is not appropriate for an object of the 

<emphasis id="strong1027" effect="bold">
Combo

</emphasis>
 class. Therefore, the method was overridden in the 


<emphasis id="strong1028" effect="bold">
Combo

</emphasis>
 class to cause its behavior to be appropriate for objects instantiated from the 


<emphasis id="strong1029" effect="bold">
Combo

</emphasis>
 class.)

</emphasis>
</para>





<para id="p1032">
A complete listing of the program is shown in 

<link id="a1019" target-id="Listing_5">

Listing 5

</link>

 near the end of this module. 

</para>



	

<para id="p1033">
<emphasis id="strong1030" effect="bold">
The class named Radio

</emphasis>
</para>





<para id="p1034">
As usual, I will discuss the program in fragments.

</para>





<para id="p1035">
<link id="a1020" target-id="Listing_1">

Listing 1

</link>

 shows the superclass named 

<emphasis id="strong1031" effect="bold">
Radio

</emphasis>
. This code is shown here for easy referral. It is identical to the code for the same class used in the program named 


<emphasis id="strong1032" effect="bold">
Radio01

</emphasis>
 discussed in an earlier module. 

</para>



	

<table id="table1000" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. The class named Radio.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">

				

<code id="pre1000" display="block">class Radio{
  protected double[] stationNumber = 
                         new double[5];
                            
  public void setStationNumber(
                int index,double freq){
    stationNumber[index] = freq;
  }//end method setStationNumber

  public void playStation(int index){
    System.out.println(
            "Playing the station at " 
               + stationNumber[index]
               + " Mhz");
  }//end method playStation
  
}//end class Radio</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1036">
<emphasis id="strong1033" effect="bold">
Will override playStation

</emphasis>
</para>





<para id="p1037">
The class named 

<emphasis id="strong1034" effect="bold">
Combo

</emphasis>
 

<emphasis id="em1013" effect="italics">
(discussed below)

</emphasis>
 will extend 
the class named 

<emphasis id="strong1035" effect="bold">
Radio

</emphasis>
. The method named 

<emphasis id="strong1036" effect="bold">
playStation

</emphasis>
, shown in 

<link id="a1021" target-id="Listing_1">

Listing 1

</link>

, will be overridden in the class named 


<emphasis id="strong1037" effect="bold">
Combo

</emphasis>
.

</para>





<para id="p1038">
If you examine the code for the 

<emphasis id="strong1038" effect="bold">
playStation

</emphasis>
 method in 

<link id="a1022" target-id="Listing_1">

Listing 1

</link>

, you will see that it assumes radio operations only and doesn't support tape operations. That is the reason that it needs to be overridden. 


<emphasis id="em1014" effect="italics">
(For example, it doesn't know that it should refuse to play a radio station when a tape is being played.)

</emphasis>
</para>





<para id="p1039">
<emphasis id="strong1039" effect="bold">
The Combo class

</emphasis>
</para>





<para id="p1040">
<link id="a1023" target-id="Listing_2">

Listing 2

</link>

 shows the beginning of the class definition for the class named 


<emphasis id="strong1040" effect="bold">
Combo

</emphasis>
. The 

<emphasis id="strong1041" effect="bold">
Combo

</emphasis>
 class extends the class named 


<emphasis id="strong1042" effect="bold">
Radio

</emphasis>
. 

</para>



	

<table id="table1001" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. Beginning of the Combo class.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">

				

<code id="pre1001" display="block">class Combo extends Radio{
  
  private boolean tapeIn = false;
  //---------------------------------//
  
  public Combo(){//constructor
    System.out.println(
           "Combo object constructed");
  }//end constructor
  //---------------------------------//</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1041">
<emphasis id="strong1043" effect="bold">
The tapeIn variable

</emphasis>
</para>





<para id="p1042">
The most important thing about the code in 

<link id="a1024" target-id="Listing_2">

Listing 2

</link>

 is the declaration of the instance variable named


<emphasis id="strong1044" effect="bold">
tapeIn

</emphasis>
.

</para>





<para id="p1043">
<emphasis id="em1015" effect="italics">
(In the program named Radio02 in the previous module, this variable was declared in the class named 


<emphasis id="strong1045" effect="bold">
Radio

</emphasis>
 and inherited into the class named 

<emphasis id="strong1046" effect="bold">
Combo

</emphasis>
. That was one of the undesirable changes required for the class named 


<emphasis id="strong1047" effect="bold">
Radio

</emphasis>
 in that module.)

</emphasis>
</para>





<para id="p1044">
In this version of the program, the variable named 

<emphasis id="strong1048" effect="bold">
tapeIn

</emphasis>
 is declared in the subclass instead of in the superclass. Thus, it is not necessary to modify the superclass before extending it.

</para>





<para id="p1045">
<emphasis id="strong1049" effect="bold">
The constructor

</emphasis>
</para>





<para id="p1046">
The constructor in 

<link id="a1025" target-id="Listing_2">

Listing 2

</link>

 is the same as in the previous program named 


<emphasis id="strong1050" effect="bold">
Radio02

</emphasis>
, so I won't discuss it further. 

</para>





<para id="p1047">
<emphasis id="strong1051" effect="bold">
The overridden playStation method

</emphasis>
</para>





<para id="p1048">
The overridden version of the method named 

<emphasis id="strong1052" effect="bold">
playStation

</emphasis>
 is shown in 


<link id="a1026" target-id="Listing_3">

Listing 3

</link>

.

As you can see, this version of the method duplicates the signature of the 


<emphasis id="strong1053" effect="bold">
playStation

</emphasis>
 method in the superclass named 

<emphasis id="strong1054" effect="bold">
Radio

</emphasis>
, but provides a different body. 

</para>



	

<table id="table1002" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. The overridden playStation method.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">

				

<code id="pre1002" display="block">  public void playStation(int index){
    System.out.println("Play Radio");
    if(!tapeIn){//tapeIn is false
      System.out.println(
          "  Playing the station at " 
               + stationNumber[index]
               + " Mhz");
    }else{//tapeIn is true
      System.out.println(
            "  Remove the tape first");
    }//end if/else
  }//end method playStation</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1049">
<emphasis id="strong1055" effect="bold">
Aware of the tape system

</emphasis>
</para>





<para id="p1050">
This overridden version of the 

<emphasis id="strong1056" effect="bold">
playStation

</emphasis>
 method in 


<link id="a1027" target-id="Listing_3">

Listing 3

</link>

 is aware of the existence of the tape system and behaves accordingly.

</para>





<para id="p1051">
Depending on the value of the variable named 

<emphasis id="strong1057" effect="bold">
tapeIn

</emphasis>
, this method will either

</para>





<list id="ul1006" list-type="bulleted">

	

<item id="li1018">
tune and play a radio station, or 

</item>


	

<item id="li1019">
display a message instructing the user to remove the tape.

</item>




</list>




<para id="p1052">
<emphasis id="strong1058" effect="bold">
Which version of playStation is executed?

</emphasis>
</para>





<para id="p1053">
When the 

<emphasis id="strong1059" effect="bold">
playStation

</emphasis>
 method is called on an object of the 


<emphasis id="strong1060" effect="bold">
Combo

</emphasis>
 class, the overridden version of the method 

<emphasis id="em1016" effect="italics">
(and not the original version defined in the superclass named 


<emphasis id="strong1061" effect="bold">
Radio

</emphasis>
)

</emphasis>
 is the version that is actually executed.

</para>





<para id="p1054">
Although not particularly obvious in this example, this is one of the important characteristics of 


<emphasis id="em1017" effect="italics">
runtime polymorphism

</emphasis>
. When a method is called on a reference to an object, it is the type of the object 


<emphasis id="em1018" effect="italics">
(and not the type of the variable containing the reference to the object)

</emphasis>
 that is used to determine which version of the method is actually 
executed.

</para>





<para id="p1055">
<emphasis id="strong1062" effect="bold">
Three other instance methods

</emphasis>
</para>





<para id="p1056">
The subclass named 

<emphasis id="strong1063" effect="bold">
Combo

</emphasis>
 defines three other instance methods:

</para>





<list id="ul1007" list-type="bulleted">

	

<item id="li1020">
insertTape

</item>


	

<item id="li1021">
removeTape

</item>


	

<item id="li1022">
playTape

</item>




</list>




<para id="p1057">
The code in these three methods is identical to the code in the methods having the same names in the program named 


<emphasis id="strong1064" effect="bold">
Radio02

</emphasis>
 in the previous module. I discussed that code in the previous module and won't repeat that discussion here. You can view those methods in the complete listing of the program shown in 


<link id="a1028" target-id="Listing_5">

Listing 5

</link>

 near the end of this module.

</para>





<para id="p1058">
<emphasis id="strong1065" effect="bold">
The driver class

</emphasis>
</para>





<para id="p1059">
<link id="a1029" target-id="Listing_4">

Listing 4

</link>

 shows the code for the driver class named Radio03. 

</para>



	

<table id="table1003" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. The driver class.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">

				

<code id="pre1003" display="block">public class Radio03{
  //This class simulates the 
  // manufacturer and the human user
  public static void main(
                        String[] args){
    Combo myObjRef = new Combo();
    myObjRef.setStationNumber(3,93.5);
    myObjRef.playStation(3);
    myObjRef.insertTape();
    myObjRef.playStation(3);
    myObjRef.removeTape();
    myObjRef.playStation(3);
    myObjRef.playTape();
    myObjRef.insertTape();
    myObjRef.playTape();
    myObjRef.removeTape();
    myObjRef.playStation(3);
  }//end main
}//end class Radio03</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1060">
The code in 

<link id="a1030" target-id="Listing_4">

Listing 4

</link>

 is also identical to the code in the program named 
	

<emphasis id="strong1066" effect="bold">
Radio02

</emphasis>
 discussed in the previous module. Therefore, I won't discuss it in detail here.

</para>





<para id="p1061">
<emphasis id="strong1067" effect="bold">
A new object of the Combo class

</emphasis>
</para>





<para id="p1062">
I present this code here solely to emphasize that this code instantiates a new object of the 


<emphasis id="strong1068" effect="bold">
Combo

</emphasis>
 class. This assures that the overridden version of the method named 


<emphasis id="strong1069" effect="bold">
playStation

</emphasis>
 will be executed by the statements in 

<link id="a1031" target-id="Listing_4">

Listing 4

</link>

 that 
call the 

<emphasis id="strong1070" effect="bold">
playStation

</emphasis>
 method.

</para>





<para id="p1063">
<emphasis id="em1019" effect="italics">
(Although it is not the case in 

</emphasis>
<link id="a1032" target-id="Listing_4">


<emphasis id="em1020" effect="italics">
Listing 4

</emphasis>
</link>


<emphasis id="em1021" effect="italics">
, even if the reference to the object of type 


<emphasis id="strong1071" effect="bold">
Combo

</emphasis>
 had been stored in a reference variable of type 

<emphasis id="strong1072" effect="bold">
Radio

</emphasis>
, instead of a reference variable of type 


<emphasis id="strong1073" effect="bold">
Combo

</emphasis>
, calling the 

<emphasis id="strong1074" effect="bold">
playStation

</emphasis>
 method on that reference would have caused the overridden version of the method to have been executed. That is the essence of runtime polymorphism based on overridden methods in Java.)

</emphasis>
</para>





<para id="p1064">
<emphasis id="strong1075" effect="bold">
Program output

</emphasis>
</para>





<para id="p1065">
This program produces the output shown in 

<link id="a1033" target-id="Figure_1">

Figure 1

</link>

 on 
the computer screen.

</para>



	

<table id="table1004" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Figure_1" effect="bold">

Figure 1

</emphasis>

. Program output.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">


							

<code id="pre1004" display="block">Combo object constructed
Play Radio
  Playing the station at 93.5 Mhz
Insert Tape
  Tape is in
  Radio is off
Play Radio
  Remove the tape first
Remove Tape
  Tape is out
  Radio is on
Play Radio
  Playing the station at 93.5 Mhz
Play Tape
  Insert the tape first
Insert Tape
  Tape is in
  Radio is off
Play Tape
  Tape is playing
Remove Tape
  Tape is out
  Radio is on
Play Radio
  Playing the station at 93.5 Mhz</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1066">
I will leave it as an exercise for the student to compare this output with the messages sent to the object by the code in 
	

<link id="a1034" target-id="Listing_4">

Listing 4

</link>

. 

</para>



	

</section>
<section id="h11004">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1067">
An object instantiated from a class that extends another class will contain all of the methods and all of the variables defined in the subclass, plus all of the methods and all of the variables inherited into the subclass.

</para>





<para id="p1068">
The behavior of methods inherited into the subclass may not be appropriate for an object instantiated from the subclass. You can change that behavior by overriding the method in the definition of the subclass.

</para>





<para id="p1069">
To override a method in the subclass, reproduce the name, argument list, and return type of the original method in a new method definition in the subclass. Make sure that the overridden method is not less accessible than the original method. Also, make sure that it doesn't throw any checked exceptions that were not declared for the original method.

</para>





<para id="p1070">
Provide a body for the overridden method, causing the behavior of the overridden method to be appropriate for an object of the subclass.

Any method that is not declared 

<emphasis id="strong1076" effect="bold">
final

</emphasis>
 can be overridden in a subclass.

The program discussed in this module extends a 

<emphasis id="strong1077" effect="bold">
Radio

</emphasis>
 class to produce a subclass that simulates an upgraded car radio containing a tape player.

</para>





<para id="p1071">
Method overriding is used to modify the behavior of an inherited method named 


<emphasis id="strong1078" effect="bold">
playStation

</emphasis>
 to cause that method to behave appropriately when a tape has been inserted into the radio.

</para>





<para id="p1072">
Method 

<emphasis id="em1022" effect="italics">
overriding

</emphasis>
 is different from method 

<emphasis id="em1023" effect="italics">
overloading

</emphasis>
. Method 

<emphasis id="em1024" effect="italics">
overloading

</emphasis>
 will be discussed in the next module. 

</para>





</section>
<section id="h11005">
<title>
<emphasis id="Whats_next" effect="bold">

What's next?

</emphasis>


</title>




<para id="p1073">
In the next module, I will explain the use of overloaded methods for the purpose of achieving compile-time polymorphism.

</para>



	

</section>
<section id="h11006">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1074">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1079" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1008" list-type="bulleted">

					

<item id="li1023">
Module name: Java OOP: Inheritance, Part 2

</item>


					

<item id="li1024">
File: Java1606.htm


</item>


					

<item id="li1025">
Published: 01/28/02

</item>



				

</list>


				

</note>

			


		



	





	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1080" effect="bold">
Disclaimers:

</emphasis>
<para id="p1075">
<emphasis id="strong1081" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>



				

<para id="p1076">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>



				

<para id="p1077">
In the past, unknown individuals have misappropriated copies 
				of my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				receive no compensation for those sales and don't know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a bootleg copy of a module that is freely 
				available on cnx.org.

</para>



				

<para id="p1078">
<emphasis id="strong1082" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>



				

</note>

			


		



	





</section>
<section id="h11007">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1079">
A complete listing of the program is shown in 

<link id="a1035" target-id="Listing_5">

Listing 5

</link>

 below. 

</para>









<table id="table1005" summary="A table." pgwide="0">
<tgroup cols="1">





<thead id="thead1005">



<row id="tr1010">



<entry id="th1005">



<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

. 

<emphasis id="strong1083" effect="bold">
The program named Radio03.

</emphasis>



</entry>



</row>



</thead>





<tbody id="tbody1005">



<row id="tr1011">



<entry id="td1005">



<code id="pre1005" display="block">Copyright 2002, R.G.Baldwin
Simulates the manufacture and use of a 
combination car radio and tape player.
Uses method overriding to avoid 
modifying the class named Radio.

This program produces the following
output on the computer screen:
  
Combo object constructed
Play Radio
  Playing the station at 93.5 Mhz
Insert Tape
  Tape is in
  Radio is off
Play Radio
  Remove the tape first
Remove Tape
  Tape is out
  Radio is on
Play Radio
  Playing the station at 93.5 Mhz
Play Tape
  Insert the tape first
Insert Tape
  Tape is in
  Radio is off
Play Tape
  Tape is playing
Remove Tape
  Tape is out
  Radio is on
Play Radio
  Playing the station at 93.5 Mhz
**************************************/

public class Radio03{
  //This class simulates the 
  // manufacturer and the human user
  public static void main(
                        String[] args){
    Combo myObjRef = new Combo();
    myObjRef.setStationNumber(3,93.5);
    myObjRef.playStation(3);
    myObjRef.insertTape();
    myObjRef.playStation(3);
    myObjRef.removeTape();
    myObjRef.playStation(3);
    myObjRef.playTape();
    myObjRef.insertTape();
    myObjRef.playTape();
    myObjRef.removeTape();
    myObjRef.playStation(3);
  }//end main
}//end class Radio03
//===================================//

class Radio{
  //This class simulates the plans from
  // which the radio object is created.
  // This code is the same as in the
  // program named Radio01.
  protected double[] stationNumber = 
                         new double[5];
                            
  public void setStationNumber(
                int index,double freq){
    stationNumber[index] = freq;
  }//end method setStationNumber
  
  //This version of playStation doesn't
  // accommodate tape operations.
  public void playStation(int index){
    System.out.println(
            "Playing the station at " 
               + stationNumber[index]
               + " Mhz");
  }//end method playStation
  
}//end class Radio
//===================================//

class Combo extends Radio{
  
  private boolean tapeIn = false;
  //---------------------------------//
  
  public Combo(){//constructor
    System.out.println(
           "Combo object constructed");
  }//end constructor
  //---------------------------------//
  
  //Overridden playStation method. This
  // overridden version accommodates
  // tape operations.
  public void playStation(int index){
    System.out.println("Play Radio");
    if(!tapeIn){
      System.out.println(
          "  Playing the station at " 
               + stationNumber[index]
               + " Mhz");
    }else{
      System.out.println(
            "  Remove the tape first");
    }//end if/else
  }//end method playStation
  //---------------------------------//
  
  public void insertTape(){
    System.out.println("Insert Tape");
    tapeIn = true;
    System.out.println(
                       "  Tape is in");
    System.out.println(
                     "  Radio is off");
  }//end insertTape method
  //---------------------------------//
  
  public void removeTape(){
    System.out.println("Remove Tape");
    tapeIn = false;
    System.out.println(
                      "  Tape is out");
    System.out.println(
                      "  Radio is on");
  }//end removeTape method
  //---------------------------------//
  
  public void playTape(){
    System.out.println("Play Tape");
    if(!tapeIn){
      System.out.println(
            "  Insert the tape first");
    }else{
      System.out.println(
                  "  Tape is playing");
    }//end if/else
  }//end playTape
}//end class combo</code>





</entry>



</row>



</tbody>





</tgroup>
</table>








<para id="p1080">
-end- 

</para>







</section>
</content>




</document>