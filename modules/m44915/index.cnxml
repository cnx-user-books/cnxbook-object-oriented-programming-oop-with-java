<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Java3120 Java OOP Controlling Image Rotation with a Slider and Affine Transforms</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m44915</md:content-id>
  <md:title>Java3120 Java OOP Controlling Image Rotation with a Slider and Affine Transforms</md:title>
  <md:abstract>Learn to use a JSlider object along with Affine Transforms to control the rotation of an image.</md:abstract>
  <md:uuid>85f83b0f-cedb-4e1f-83dc-c8208657e4ed</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1002">
<link id="a1002" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1003">
<link id="a1003" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1004">
<link id="a1004" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1005">
<link id="a1005" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


</item>


	

<item id="li1006">
<link id="a1006" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1007">
<link id="a1007" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1008">
<link id="a1008" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1009">
<link id="a1009" target-id="Miscellaneous">

Miscellaneous

</link>


</item>


	

<item id="li1010">
<link id="a1010" target-id="Complete_program_listing">

Complete program listing

</link>


</item>




</list>


	

	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	

	

<para id="p1000">
This module is one of a series of modules designed to teach you about Object-Oriented Programming (OOP) using Java.

</para>




<para id="p1001">
The program described in this module requires the use of the Guzdial-Ericson 
multimedia class library. You will find download, installation, and usage 
instructions for the library at 

<link id="a1011" url="http://cnx.org/content/m44148/latest/">

Java OOP: The Guzdial-Ericson Multimedia Class Library

</link>

. 

</para>


	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1002">
I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.

</para>


	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1003" list-type="bulleted">

		

<item id="li1011">
<link id="a1012" target-id="Figure_1">

Figure 1

</link>

. Program output at startup.

</item>


		

<item id="li1012">
<link id="a1013" target-id="Figure_2">

Figure 2

</link>

. Program output for slider at zero.

</item>


		

<item id="li1013">
<link id="a1014" target-id="Figure_3">

Figure 3

</link>

. Program output for slider at 240.

</item>


	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1004" list-type="bulleted">

		

<item id="li1014">
<link id="a1015" target-id="Listing_1">

Listing 1

</link>

. Beginning of the class named Prob10Runner. 

</item>


		

<item id="li1015">
<link id="a1016" target-id="Listing_2">

Listing 2

</link>

. Beginning of the constructor for the Prob10Runner class. 

</item>


		

<item id="li1016">
<link id="a1017" target-id="Listing_3">

Listing 3

</link>

. Construct the GUI for the slider. 

</item>


		

<item id="li1017">
<link id="a1018" target-id="Listing_4">

Listing 4

</link>

. Rotate and display the butterfly. 

</item>


		

<item id="li1018">
<link id="a1019" target-id="Listing_5">

Listing 5

</link>

. Register a ChangeListener on the slider. 

</item>


		

<item id="li1019">
<link id="a1020" target-id="Listing_6">

Listing 6

</link>

. Beginning of the rotatePicture method. 

</item>


		

<item id="li1020">
<link id="a1021" target-id="Listing_7">

Listing 7

</link>

. Set up the translation transform. 

</item>


		

<item id="li1021">
<link id="a1022" target-id="Listing_8">

Listing 8

</link>

. Concatenate the transforms. 

</item>


		

<item id="li1022">
<link id="a1023" target-id="Listing_9">

Listing 9

</link>

. Transform and draw the butterfly image. 

</item>


		

<item id="li1023">
<link id="a1024" target-id="Listing_10">

Listing 10

</link>

. Complete program listing. 

</item>


	

</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>


	

<para id="p1003">
In this lecture, I will explain a program that uses 

<emphasis id="strong1000" effect="bold">
Affine Transforms
	

</emphasis>
to rotate an image by a specified angle around a specified anchor point.

</para>




<para id="p1004">
Then the program translates the image so as to center it in a 

<emphasis id="strong1001" effect="bold">
JFrame

</emphasis>
 object.

</para>




<para id="p1005">
<emphasis id="strong1002" effect="bold">
Specification of the rotation angle 

</emphasis>
</para>




<para id="p1006">
A 

<emphasis id="strong1003" effect="bold">
JSlider

</emphasis>
 is used to specify the rotation angle.

</para>




<para id="p1007">
The range of the slider is from 0 to 360 degrees.

</para>




<para id="p1008">
The position of the thumb on the slider specifies a counter-clockwise rotation angle in degrees.

</para>




<para id="p1009">
<emphasis id="strong1004" effect="bold">
Program output at startup

</emphasis>
 

</para>




<para id="p1010">
The thumb on the slider is at 45 degrees when the program starts running.

</para>




<para id="p1011">
This causes the initial rotation angle of the butterfly image to be 45 degrees counter-clockwise as shown in 


<link id="a1025" target-id="Figure_1">

Figure 1

</link>

.

</para>





<para id="p1012">
<emphasis id="strong1005" effect="bold">
<emphasis id="Figure_1" effect="bold">

Figure 1

</emphasis>

 - Program output at startup.

</emphasis>
</para>




<para id="p1013">
<media id="media1000" alt="Missing image." display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/image-a-729b.jpg" width="414" height="552"/>
</media>


</para>


	



<para id="p1014">
<emphasis id="strong1006" effect="bold">
Corners barely graze inner-edges of the frame's borders

</emphasis>
</para>




<para id="p1015">
Note that for the initial rotation angle shown in


<link id="a1026" target-id="Figure_1">

Figure 1

</link>

, the corners of the image almost touch the inner-edges of the borders on the frame.

</para>




<para id="p1016">
If you run the program and rotate the image, you will see that the size of the frame is such that the corners of the image barely graze the inner-edges for those cases where the diagonals of the image are horizontal and 
	vertical.

</para>




<para id="p1017">
<emphasis id="strong1007" effect="bold">
Program output for slider at zero degrees 

</emphasis>
</para>




<para id="p1018">
<link id="a1027" target-id="Figure_2">

Figure 2

</link>

 shows the program output when the 
thumb on the slider has been moved to zero degrees at the far-left end of the 
slider.

</para>





<para id="p1019">
<emphasis id="strong1008" effect="bold">
<emphasis id="Figure_2" effect="bold">

Figure 2

</emphasis>

 - Program output for slider at zero.

</emphasis>
</para>




<para id="p1020">
<media id="media1001" alt="Missing image." display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/image-b-330d.jpg" width="413" height="551"/>
</media>


</para>


	



<para id="p1021">
<emphasis id="strong1009" effect="bold">
Program output for slider at 240 degrees 

</emphasis>
</para>




<para id="p1022">
<link id="a1028" target-id="Figure_3">

Figure 3

</link>

 shows the result of positioning 
the thumb on the slider at 240 degrees.

</para>





<para id="p1023">
<emphasis id="strong1010" effect="bold">
<emphasis id="Figure_3" effect="bold">

Figure 3

</emphasis>

 - Program output for slider at 240.

</emphasis>
</para>




<para id="p1024">
<media id="media1002" alt="Missing image." display="block">
<image id="img1002" mime-type="image/jpeg" src="../../media/image-c-373d.jpg" width="413" height="552"/>
</media>


</para>


	



<para id="p1025">
<emphasis id="strong1011" effect="bold">
Brief program specifications 

</emphasis>
</para>




<para id="p1026">
Write a program named 

<emphasis id="strong1012" effect="bold">
Prob10 

</emphasis>
that uses the 

<emphasis id="strong1013" effect="bold">
Prob10

</emphasis>
 class definition shown in
	

<link id="a1029" target-id="Listing_10">

Listing 10

</link>

 and Ericson's media library along with the image file named 


<link id="a1030" url="Prob10.jpg">

Prob10.jpg

</link>

 to produce the graphic output images shown in 


<link id="a1031" target-id="Figure_1">

Figure 1

</link>

 through
	

<link id="a1032" target-id="Figure_3">

Figure 3

</link>

.

</para>




<para id="p1027">
The butterfly image rotates smoothly around its center as you move the slider 
back and forth.

</para>




<para id="p1028">
The program must terminate and return control to the operating system when you click the large X in the upper-right corner of the GUI containing the slider.

</para>




<para id="p1029">
<emphasis id="strong1014" effect="bold">
General background information 

</emphasis>
</para>




<para id="p1030">
The overall structure of this program is very similar to programs that I 
explained in earlier lectures titled

</para>




<list id="ul1005" list-type="bulleted">

	

<item id="li1024">
<link id="a1033" url="http://cnx.org/content/m44913/latest">

Controlling an Edge 
	Detector with a Slider

</link>

, and

</item>


	

<item id="li1025">
<link id="a1034" url="http://cnx.org/content/m44914/latest">

Controlling an 
	Image-Scaling Program with a Slider

</link>

. 

</item>




</list>




<para id="p1031">
<emphasis id="strong1015" effect="bold">
The most significant difference... 

</emphasis>
</para>




<para id="p1032">
Is the code that is executed when the slider fires a 

<emphasis id="strong1016" effect="bold">
ChangeEvent

</emphasis>
. 
There are a few other differences as well.

</para>




<para id="p1033">
<emphasis id="strong1017" effect="bold">
New and different code

</emphasis>
</para>




<para id="p1034">
I will explain the code that is new and different in this program.

</para>




<para id="p1035">
I will refer you back to the earlier lectures for an explanation of the 
remainder of the code.

</para>




<para id="p1036">
You can view the entire program in 

<link id="a1035" target-id="Listing_10">

Listing 10

</link>

.

</para>


	

	

</section>
<section id="h11003">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	

	

<para id="p1037">
<emphasis id="strong1018" effect="bold">
Beginning of the class named Prob10Runner

</emphasis>
</para>




<para id="p1038">
The code in the 

<emphasis id="strong1019" effect="bold">
main

</emphasis>
 method in


<link id="a1036" target-id="Listing_10">

Listing 10

</link>

 instantiates a new object of the 
class named 

<emphasis id="strong1020" effect="bold">
Prob10Runner

</emphasis>
.

</para>




<para id="p1039">
<link id="a1037" target-id="Listing_1">

Listing 1

</link>

 shows the beginning of the class 
named 

<emphasis id="strong1021" effect="bold">
Prob10Runner

</emphasis>
.

</para>




<para id="p1040">
<link id="a1038" target-id="Listing_1">

Listing 1

</link>

 declares several instance 
variables and initializes some of them.

</para>




<para id="p1041">
I will refer back to some of these variables in later paragraphs.

</para>


	

<table id="table1000" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

 - Beginning of the class named Prob10Runner. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">



<code id="pre1000" display="block">class Prob10Runner extends JFrame{

  private JPanel mainPanel = new JPanel();
  private JPanel titlePanel = new JPanel();
  
  //Instantiate a new slider setting the limits and the
  // initial position of the thumb.
  private JSlider slider = new JSlider(0,360,45);

  private Picture butterfly = new Picture("Prob10.jpg");
  private Picture background = null;

  private int butterflyWidth = butterfly.getWidth();
  private int butterflyHeight = butterfly.getHeight();

  private Picture display = null;
  private int displayWidth = 0;
  private int displayHeight = 0;

  private Image image = null;
  private Graphics graphics = null;
  private AffineTransform rotateTransform = null;
  private AffineTransform translateTransform = null;
  private Graphics2D g2 = null;
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1042">
<emphasis id="strong1022" effect="bold">
Beginning of the constructor for the Prob10Runner class 

</emphasis>



</para>




<para id="p1043">
<link id="a1039" target-id="Listing_2">

Listing 2

</link>

 shows the beginning of the 
constructor for the class named 

<emphasis id="strong1023" effect="bold">
Prob10Runner

</emphasis>
.

</para>


	

<table id="table1001" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

 - Beginning of the constructor for the Prob10Runner class. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">



<code id="pre1001" display="block">  public Prob10Runner(){//constructor
  
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    //Compute the minimum dimensions allowed for the
    // display window that will contain the butterfly
    // image rotated at any angle. This turns out to
    // be a square with the length of each side equal
    // to the diagonal length of the butterfly picture.
    //The length of each side was increased by one
    // pixel to guard against loss of precision when
    // converting from double to int.
    int diagonal = 1 + (int)(Math.sqrt(
                        butterflyWidth*butterflyWidth +
                        butterflyHeight*butterflyHeight));

    //Instantiate the picture in which the rotated
    // butterfly image will be displayed.
    display = new Picture(diagonal,diagonal);
    displayWidth = displayHeight = diagonal;

    //This picture provides a white background the same
    // size as the display picture.
    background = new Picture(diagonal,diagonal);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1044">
<emphasis id="strong1024" effect="bold">
Not much that is new here

</emphasis>
</para>




<para id="p1045">
The only thing that might be considered new in 

<link id="a1040" target-id="Listing_1">


Listing 2

</link>

 is the code that computes the minimum dimensions for a display window that will contain the butterfly image rotated by any angle.

</para>




<para id="p1046">
The rationale for this computation is explained in the comments.

</para>




<para id="p1047">
<emphasis id="strong1025" effect="bold">
Construct the GUI for the slider

</emphasis>
</para>




<para id="p1048">
The code in 

<link id="a1041" target-id="Listing_3">

Listing 3

</link>

 constructs the GUI 
that contains the slider shown in 

<link id="a1042" target-id="Figure_1">

Figure 1

</link>

.

</para>




<para id="p1049">
Although the code in 

<link id="a1043" target-id="Listing_3">

Listing 3

</link>

 is a little 
tedious, there are no new concepts associated with that code.

</para>


	

<table id="table1002" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

 - Construct the GUI for the slider. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">



<code id="pre1002" display="block">    //Construct the GUI for the slider.
    slider.setMajorTickSpacing(60);
    slider.setMinorTickSpacing(15);
    slider.setPaintTicks(true);
    slider.setPaintLabels(true);

    mainPanel.setLayout(new BorderLayout());
    titlePanel.add(new JLabel(
                            "Rotation Angle in Degrees"));
    mainPanel.add(titlePanel,BorderLayout.NORTH);
    mainPanel.add(slider,BorderLayout.CENTER);
    
    getContentPane().add(mainPanel);
    pack();//Adjust the size of the slider GUI.
    
    //Compute an improved size and location for the
    // GUI containing the slider.
    setSize(displayWidth + 2 * getInsets().left,
            mainPanel.getHeight() + slider.getHeight());
    setLocation(0,displayHeight + getInsets().top 
                                + getInsets().bottom + 1);
    setVisible(true);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1050">
<emphasis id="strong1026" effect="bold">
Rotate and display the butterfly

</emphasis>
</para>




<para id="p1051">
The code in 

<link id="a1044" target-id="Listing_4">

Listing 4

</link>

 calls the method 
named 

<emphasis id="strong1027" effect="bold">
rotatePicture

</emphasis>
, passing the initial value of the thumb on the slider as a parameter to cause the initial display of the butterfly to be properly rotated.

</para>




<para id="p1052">
Then 

<link id="a1045" target-id="Listing_4">

Listing 4

</link>

 calls the 

<emphasis id="strong1028" effect="bold">
show

</emphasis>
 method on the display to cause the rotated butterfly image to be displayed as shown in 


<link id="a1046" target-id="Figure_1">

Figure 1

</link>

.

</para>


	

<table id="table1003" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

 - Rotate and display the butterfly. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">



<code id="pre1003" display="block">    rotatePicture(slider.getValue());

    display.show();
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1053">
<emphasis id="strong1029" effect="bold">
Register a ChangeListener on the slider 

</emphasis>
</para>




<para id="p1054">
The code in 

<link id="a1047" target-id="Listing_5">

Listing 5

</link>

 registers an 
anonymous 

<emphasis id="strong1030" effect="bold">
ChangeListener 

</emphasis>
object on the slider.

</para>


	

<table id="table1004" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

 - Register a ChangeListener on the slider. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">



<code id="pre1004" display="block">    slider.addChangeListener(
      new ChangeListener(){
        public void stateChanged(ChangeEvent e){
          //Restore the background image of the display
          // to all white.
          graphics = display.getGraphics();
          graphics.drawImage(
                          background.getImage(),0,0,null);
                          
          //Rotate the butterfly image, draw it on the
          // display, and repaint the display on the
          // screen..
          rotatePicture(slider.getValue());
          display.repaint();
        }//end stateChanged
      }//end new ChangeListener
    );//end addChangeListener
    //--------------------------------------------------//
  }//end constructor
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1055">
Each time the slider fires a 

<emphasis id="strong1031" effect="bold">
ChangeEvent

</emphasis>
, the

<emphasis id="strong1032" effect="bold">
 
	stateChanged

</emphasis>
method in 

<link id="a1048" target-id="Listing_5">

Listing 5

</link>

 
	is executed.

</para>




<para id="p1056">
The 

<emphasis id="strong1033" effect="bold">
stateChanged

</emphasis>
method begins by restoring the background 
image of thedisplay.

</para>




<para id="p1057">
Then the

<emphasis id="strong1034" effect="bold">
 stateChanged

</emphasis>
method calls the 

<emphasis id="strong1035" effect="bold">
rotatePicture

</emphasis>
 method to draw a rotated version of thebutterfly on top of the background image using theslider value, 


<emphasis id="em1000" effect="italics">
(which ranges from 0 to +360)

</emphasis>
, asthe rotation angle in degrees.

</para>




<para id="p1058">
The image of thebutterfly 

<emphasis id="em1001" effect="italics">
(see 

</emphasis>
<link id="a1049" target-id="Figure_1">


<emphasis id="em1002" effect="italics">

Figure 1

</emphasis>
</link>

) is always centered in the displaypicture.

</para>




<para id="p1059">
Finally, the 

<emphasis id="strong1036" effect="bold">
stateChanged

</emphasis>
 method causes the display to be repainted to force the rotated image to appear on the screen.

</para>




<para id="p1060">
<emphasis id="strong1037" effect="bold">
End of the constructor 

</emphasis>
</para>




<para id="p1061">
<link id="a1050" target-id="Listing_5">

Listing 5

</link>

 signals the end of the 
constructor for the class named 

<emphasis id="strong1038" effect="bold">
Prob10Runner

</emphasis>
.

</para>




<para id="p1062">
<emphasis id="strong1039" effect="bold">
Beginning of the rotatePicture method

</emphasis>
</para>




<para id="p1063">
The 

<emphasis id="strong1040" effect="bold">
rotatePicture

</emphasis>
 method begins in


<link id="a1051" target-id="Listing_6">

Listing 6

</link>

.

</para>


	
	

<table id="table1005" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

 - Beginning of the rotatePicture method. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">



<code id="pre1005" display="block">  private void rotatePicture(double angle){

    //Set up the rotation transform
    rotateTransform = new AffineTransform();
    //Negate the angle for counter-clockwise rotation.
    rotateTransform.rotate(-Math.toRadians(angle),
                           butterflyWidth/2,
                           butterflyHeight/2);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1064">
The 

<emphasis id="strong1041" effect="bold">
rotatePicture

</emphasis>
 method accepts a rotation angle in 
	degrees as an incoming parameter.

</para>




<para id="p1065">
The 

<emphasis id="strong1042" effect="bold">
rotatePicture

</emphasis>
 method 

</para>




<list id="ul1006" list-type="bulleted">

	

<item id="li1026">
rotates a butterfly image by that angle around its center,

</item>


	

<item id="li1027">
translates the rotated image, and

</item>


	

<item id="li1028">
draws the rotated image in the center of a display picture. 

</item>




</list>




<para id="p1066">
<emphasis id="strong1043" effect="bold">
Set up the rotation transform 

</emphasis>
</para>




<para id="p1067">
<link id="a1052" target-id="Listing_6">

Listing 6

</link>

 begins by instantiating a new 
object of the 

<emphasis id="strong1044" effect="bold">
AffineTransform

</emphasis>
 class.

</para>




<para id="p1068">
Then it calls the 

<emphasis id="strong1045" effect="bold">
rotate

</emphasis>
 method on the transform object to configure that object for use in rotating the image of the butterfly.

</para>




<para id="p1069">
<emphasis id="strong1046" effect="bold">
Overloaded versions of the 

</emphasis>
<emphasis id="em1003" effect="italics">
<emphasis id="strong1047" effect="bold">
rotate

</emphasis>
</emphasis>
<emphasis id="strong1048" effect="bold">
 
method 

</emphasis>
</para>




<para id="p1070">
There are several overloaded versions of the 

<emphasis id="strong1049" effect="bold">
rotate

</emphasis>
 method.

</para>




<para id="p1071">
The version called in 

<link id="a1053" target-id="Listing_6">

Listing 6

</link>

 requires 
three parameters:

</para>




<list id="ul1007" list-type="bulleted">

	

<item id="li1029">
The rotation angle in radians

</item>


	

<item id="li1030">
The X coordinate of the anchor point 

<emphasis id="em1004" effect="italics">
(point around which the 
	rotation will take place)

</emphasis>
.

</item>


	

<item id="li1031">
The Y coordinate of the anchor point.

</item>




</list>




<para id="p1072">
A positive rotation value indicates a clockwise rotation.

</para>




<para id="p1073">
<emphasis id="strong1050" effect="bold">
Convert from degrees to radians 

</emphasis>
</para>




<para id="p1074">
<link id="a1054" target-id="Listing_6">

Listing 6

</link>

 converts the incoming angle in 
degrees to radians

</para>




<para id="p1075">
The code in 

<link id="a1055" target-id="Listing_6">

Listing 6

</link>

 applies a minus sign to convert the angle from a positive value to a 
	negative value for 

<emphasis id="strong1051" effect="bold">
<emphasis id="em1005" effect="italics">
counter-clockwise

</emphasis>
</emphasis>
 rotation, and passes that value as the rotation parameter.

</para>




<para id="p1076">
<emphasis id="strong1052" effect="bold">
Specify the rotation 

</emphasis>
<emphasis id="em1006" effect="italics">
<emphasis id="strong1053" effect="bold">
anchor point

</emphasis>
</emphasis>



</para>




<para id="p1077">
<link id="a1056" target-id="Listing_6">

Listing 6

</link>

 also specifies the center of the 
butterfly image as the anchor point.

</para>




<para id="p1078">
<emphasis id="strong1054" effect="bold">
Set up the translation transform 

</emphasis>
</para>




<para id="p1079">
<link id="a1057" target-id="Listing_7">

Listing 7

</link>

 sets up the translation 
transform that will be used to translate the rotated image to the center of the new 


<emphasis id="strong1055" effect="bold">
Picture

</emphasis>
 object.

</para>


	

<table id="table1006" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

 - Set up the translation transform. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">



<code id="pre1006" display="block">    translateTransform = new AffineTransform();
    translateTransform.translate(
                     (displayWidth - butterflyWidth)/2,
                     (displayHeight - butterflyHeight)/2);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1080">
<link id="a1058" target-id="Listing_7">

Listing 7

</link>

 instantiates a new 

<emphasis id="strong1056" effect="bold">

	AffineTransform

</emphasis>
 object.

</para>




<para id="p1081">
Then it calls the 

<emphasis id="strong1057" effect="bold">
translate

</emphasis>
 method to configure that object for use in translating 


<emphasis id="em1007" effect="italics">
(moving)

</emphasis>
 the rotated image of the 
	butterfly.

</para>




<para id="p1082">
The translation transform object will be concatenated with the rotation 
object from 

<link id="a1059" target-id="Listing_6">

Listing 6

</link>

 to produce an 

<emphasis id="strong1058" effect="bold">
AffineTransform

</emphasis>
 object that can 


<emphasis id="strong1059" effect="bold">
<emphasis id="em1008" effect="italics">
rotate

</emphasis>
</emphasis>
 and 

<emphasis id="strong1060" effect="bold">
<emphasis id="em1009" effect="italics">
translate

</emphasis>
</emphasis>
, 
	in that order.

</para>




<para id="p1083">
<emphasis id="strong1061" effect="bold">
Concatenate the transforms 

</emphasis>
</para>




<para id="p1084">
<link id="a1060" target-id="Listing_8">

Listing 8

</link>

 concatenates the 

<emphasis id="strong1062" effect="bold">

AffineTransform

</emphasis>
 object referred to by 

<emphasis id="strong1063" effect="bold">
translateTransform


</emphasis>
with the transform object referred to by 

<emphasis id="strong1064" effect="bold">
rotateTransform

</emphasis>
.

</para>


	

<table id="table1007" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Listing_8" effect="bold">

Listing 8

</emphasis>

 - Concatenate the transforms. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">



<code id="pre1007" display="block">    translateTransform.concatenate(rotateTransform);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1085">
<emphasis id="strong1065" effect="bold">
The resulting composite transform 

</emphasis>
</para>




<para id="p1086">
The concatenation in 

<link id="a1061" target-id="Listing_8">

Listing 8

</link>

 results in 
an 

<emphasis id="strong1066" effect="bold">
Affine

</emphasis>
 

<emphasis id="strong1067" effect="bold">
Transform

</emphasis>
 object referred to by 


<emphasis id="strong1068" effect="bold">
translateTransform 

</emphasis>
that will first rotate the image around its center and then translate the rotated image to the center of the new 


<emphasis id="strong1069" effect="bold">
Picture

</emphasis>
 object.

</para>




<para id="p1087">
<emphasis id="strong1070" effect="bold">
The order of operations is very important 

</emphasis>
</para>




<para id="p1088">
When rotating and translating images, it is important that the two operations 
be performed in the correct order.

</para>




<para id="p1089">
Otherwise, the results might not be what you want.

</para>




<para id="p1090">
<emphasis id="strong1071" effect="bold">
Transform and draw the butterfly 

</emphasis>
</para>




<para id="p1091">
<link id="a1062" target-id="Listing_9">

Listing 9

</link>

 applies the composite transform 
to the butterfly image and draws the transformed image on the output picture as shown in 


<link id="a1063" target-id="Figure_1">

Figure 1

</link>

,
	

<link id="a1064" target-id="Figure_2">

Figure 2

</link>

, and
	

<link id="a1065" target-id="Figure_3">

Figure 3

</link>

.

</para>


	

<table id="table1008" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1008">

			

<row id="tr1016">

				

<entry id="th1008">
<emphasis id="Listing_9" effect="bold">

Listing 9

</emphasis>

 - Transform and draw the butterfly image. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1008">

			

<row id="tr1017">

				

<entry id="td1008">



<code id="pre1008" display="block">    Graphics2D g2 = (Graphics2D)display.getGraphics();
    g2.drawImage(butterfly.getImage(),
                 translateTransform,
                 null);

  }//end rotatePicture

}//end class Prob10Runner
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1092">
<emphasis id="strong1072" effect="bold">
The end of the program 

</emphasis>
</para>




<para id="p1093">
<link id="a1066" target-id="Listing_9">

Listing 9

</link>

 also signals the end of the 

<emphasis id="strong1073" effect="bold">
rotatePicture

</emphasis>
 method, the end of the 


<emphasis id="strong1074" effect="bold">
Prob10Runner

</emphasis>
 class, and the end of the program.

</para>






</section>
<section id="h11004">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>






<para id="p1094">
I encourage you to copy the code from 

<link id="a1067" target-id="Listing_10">

Listing 10

</link>

. 
Compile the code and execute it. Experiment with the code, making changes, and 
observing the results of your changes. Make certain that you can explain why 
your changes behave as they do.

</para>


	

</section>
<section id="h11005">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1095">
In this lecture, you learned how to use a 

<emphasis id="strong1075" effect="bold">
JSlider

</emphasis>
 object along with 


<emphasis id="strong1076" effect="bold">
Affine Transforms 

</emphasis>
to control the rotation of an image.

</para>




</section>
<section id="h11006">
<title>
<emphasis id="Whats_next" effect="bold">

What's next?

</emphasis>


</title>




<para id="p1096">
In the next module, you will learn how to open an image file

<emphasis id="em1010" effect="italics">
 (specified by a 
string in a text field)

</emphasis>
 in a 

<emphasis id="strong1077" effect="bold">
PictureExplorer

</emphasis>
 object.

</para>


	

</section>
<section id="h11007">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1097">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1078" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1008" list-type="bulleted">

					

<item id="li1032">
Module name: Java OOP: Controlling Image Rotation with a Slider and Affine Transforms

</item>


					

<item id="li1033">
File: Java3120.htm


</item>


					

<item id="li1034">
Published: 09/07/12

</item>




<item id="li1035">
Revised: 02/06/16

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1079" effect="bold">
Disclaimers:

</emphasis>
<para id="p1098">
<emphasis id="strong1080" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1099">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1100">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1101">
<emphasis id="strong1081" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


				

</note>

			


		



	





</section>
<section id="h11008">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1102">
A complete listing of the program discussed in this lecture is shown in


<link id="a1068" target-id="Listing_10">

Listing 10

</link>

 below.

</para>





<para id="p1103">
<emphasis id="strong1082" effect="bold">
<emphasis id="Listing_10" effect="bold">

Listing 10

</emphasis>

 - Complete program 
				listing.

</emphasis>
</para>





<code id="pre1009" display="block">/*File Prob10 Copyright 2008 R.G.Baldwin
Revised 09/14/10

*********************************************************/
import java.awt.geom.AffineTransform;
import java.awt.Graphics2D;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.BorderLayout;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JLabel;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;

public class Prob10{
  public static void main(String[] args){
    new Prob10Runner();
  }//end main method
}//end class Prob10
/********************************************************/

class Prob10Runner extends JFrame{

  private JPanel mainPanel = new JPanel();
  private JPanel titlePanel = new JPanel();
  
  //Instantiate a new slider setting the limits and the
  // initial position of the thumb.
  private JSlider slider = new JSlider(0,360,45);

  private Picture butterfly = new Picture("Prob10.jpg");
  private Picture background = null;

  private int butterflyWidth = butterfly.getWidth();
  private int butterflyHeight = butterfly.getHeight();

  private Picture display = null;
  private int displayWidth = 0;
  private int displayHeight = 0;

  private Image image = null;
  private Graphics graphics = null;
  private AffineTransform rotateTransform = null;
  private AffineTransform translateTransform = null;
  private Graphics2D g2 = null;

  public Prob10Runner(){//constructor
  
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    //Compute the minimum dimensions allowed for the
    // display window that will contain the butterfly
    // image rotated at any angle. This turns out to
    // be a square with the length of each side equal
    // to the diagonal length of the butterfly picture.
    //The length of each side was increased by one
    // pixel to guard against loss of precision when
    // converting from double to int.
    int diagonal = 1 + (int)(Math.sqrt(
                        butterflyWidth*butterflyWidth +
                        butterflyHeight*butterflyHeight));

    //Instantiate the picture in which the rotated
    // butterfly image will be displayed.
    display = new Picture(diagonal,diagonal);
    displayWidth = displayHeight = diagonal;

    //This picture provides a white background the same
    // size as the display picture.
    background = new Picture(diagonal,diagonal);

    //Construct the GUI for the slider.
    slider.setMajorTickSpacing(60);
    slider.setMinorTickSpacing(15);
    slider.setPaintTicks(true);
    slider.setPaintLabels(true);

    mainPanel.setLayout(new BorderLayout());
    titlePanel.add(new JLabel(
                            "Rotation Angle in Degrees"));
    mainPanel.add(titlePanel,BorderLayout.NORTH);
    mainPanel.add(slider,BorderLayout.CENTER);
    
    getContentPane().add(mainPanel);
    pack();//Adjust the size of the slider GUI.
    
    //Compute an improved size and location for the
    // GUI containing the slider.
    setSize(displayWidth + 2 * getInsets().left,
            mainPanel.getHeight() + slider.getHeight());
    setLocation(0,displayHeight + getInsets().top 
                                + getInsets().bottom + 1);
    setVisible(true);

    //Place the butterfly image in the display picture
    // with a rotation angle specified by the initial
    // position of the thumb on the slider.

    rotatePicture(slider.getValue());

    display.show();
    //--------------------------------------------------//
    //Register an anonymous listener object on the slider.
    //Each time the slider fires a ChangeEvent, this event
    // handler restores the background image of the
    // display. Then it draws a rotated version of the
    // butterfly on top of the background image using the
    // slider value, which ranges from 0 to +360, as
    // the rotation angle in degrees. The image of the
    // butterfly is always centered in the display
    // picture.
    slider.addChangeListener(
      new ChangeListener(){
        public void stateChanged(ChangeEvent e){
          //Restore the background image of the display
          // to all white.
          graphics = display.getGraphics();
          graphics.drawImage(
                          background.getImage(),0,0,null);
          //Rotate the butterfly image, draw it on the
          // display, and repaint the display on the
          // screen..
          rotatePicture(slider.getValue());
          display.repaint();
        }//end stateChanged
      }//end new ChangeListener
    );//end addChangeListener
    //--------------------------------------------------//
  }//end constructor
  //----------------------------------------------------//
  
  //This method accepts a rotation angle in degrees. It
  // rotates a butterfly image by that angle around its
  // center, translates, and draws the rotated image in
  // the center of a display picture.
  private void rotatePicture(double angle){

    //Set up the rotation transform
    rotateTransform = new AffineTransform();
    //Negate the angle for counter-clockwise rotation.
    rotateTransform.rotate(-Math.toRadians(angle),
                           butterflyWidth/2,
                           butterflyHeight/2);

    //Set up the translation transform that will translate
    // the rotated image to the center of the new Picture
    // object.
    translateTransform = new AffineTransform();
    translateTransform.translate(
                     (displayWidth - butterflyWidth)/2,
                     (displayHeight - butterflyHeight)/2);

    //Concatenate the two transforms so that the image
    // will first be rotated around its center and then
    // translated to the center of the new Picture object.
    translateTransform.concatenate(rotateTransform);

    //Get the graphics context of the display picture,
    // apply the transform to the butterfly image, and
    // draw the transformed picture on the display
    // picture.
    Graphics2D g2 = (Graphics2D)display.getGraphics();
    g2.drawImage(butterfly.getImage(),
                 translateTransform,
                 null);

  }//end rotatePicture

}//end class Prob10Runner
</code>



	

<para id="p1104">
-end- 

</para>






</section>
</content>




</document>