<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Java3110 Java OOP Panels, Labels, Text Fields, and Buttons</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m44352</md:content-id>
  <md:title>Java3110 Java OOP Panels, Labels, Text Fields, and Buttons</md:title>
  <md:abstract>Learn how to create and service a graphical user interface containing panels, labels, text fields, and buttons.</md:abstract>
  <md:uuid>e37fe766-e287-46ab-9ed1-ae5cd79b1fb9</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1002">
<link id="a1002" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1003">
<link id="a1003" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1004">
<link id="a1004" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1005">
<link id="a1005" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


</item>


	

<item id="li1006">
<link id="a1006" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1007">
<link id="a1007" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1008">
<link id="a1008" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1009">
<link id="a1009" target-id="Miscellaneous">

Miscellaneous

</link>


</item>


	

<item id="li1010">
<link id="a1010" target-id="Complete_program_listing">

Complete program listing

</link>


</item>




</list>


	

	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	

	

<para id="p1000">
This module is one of a series of modules designed to teach you about Object-Oriented Programming (OOP) using Java. 

</para>




<para id="p1001">
The program described in this module requires the use of the Guzdial-Ericson 
multimedia class library. You will find download, installation, and usage 
instructions for the library at 

<link id="a1011" url="http://cnx.org/content/m44148/latest/">

Java OOP: The Guzdial-Ericson Multimedia Class Library

</link>

.

</para>


	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1002">
I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.

</para>


	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1003" list-type="bulleted">

		

<item id="li1011">
<link id="a1012" target-id="Figure_1">

Figure 1

</link>

. Program output at startup. 

</item>


		

<item id="li1012">
<link id="a1013" target-id="Figure_2">

Figure 2

</link>

. Program output after one click. 

</item>


		

<item id="li1013">
<link id="a1014" target-id="Figure_3">

Figure 3

</link>

. Program output after several clicks. 

</item>


	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1004" list-type="bulleted">

		

<item id="li1014">
<link id="a1015" target-id="Listing_1">

Listing 1

</link>

. Beginning of the class named Prob05Runner. 

</item>


		

<item id="li1015">
<link id="a1016" target-id="Listing_2">

Listing 2

</link>

. Instantiate GUI components. 

</item>


		

<item id="li1016">
<link id="a1017" target-id="Listing_3">

Listing 3

</link>

. Beginning of the constructor. 

</item>


		

<item id="li1017">
<link id="a1018" target-id="Listing_4">

Listing 4

</link>

. Add the six GUI components to the panel. 

</item>


		

<item id="li1018">
<link id="a1019" target-id="Listing_5">

Listing 5

</link>

. Get the frame and add the panel to the frame. 

</item>


		

<item id="li1019">
<link id="a1020" target-id="Listing_6">

Listing 6

</link>

. Set the background to blue and add a turtle. 

</item>


		

<item id="li1020">
<link id="a1021" target-id="Listing_7">

Listing 7

</link>

. Define, instantiate, and register a listener on the Move button. 

</item>


		

<item id="li1021">
<link id="a1022" target-id="Listing_8">

Listing 8

</link>

. Action listener to terminate the program. 

</item>


		

<item id="li1022">
<link id="a1023" target-id="Listing_9">

Listing 9

</link>

. Source code for Prob05. 

</item>


	

</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>


	

<para id="p1003">
In this module, you will learn how to create and service a graphical user 
	interface containing panels, labels, text fields, and buttons.

</para>




<para id="p1004">
Just as you did in earlier modules, you will modify the 

<emphasis id="strong1000" effect="bold">
World

</emphasis>
 class to 
make it possible to get access to the 

<emphasis id="strong1001" effect="bold">
JFrame

</emphasis>
 object that is encapsulated 
in a 

<emphasis id="strong1002" effect="bold">
World

</emphasis>
 object. However, because I explained those modifications to 
the 

<emphasis id="strong1003" effect="bold">
World

</emphasis>
 class in earlier modules, I won't repeat the explanation here. 
You can find a modified version of the World class in


<link id="a1024" url="http://cnx.org/content/m44351/latest/#Listing_10">

Java OOP: Background Color, Text Color, Mouse Clicks, etc.

</link>


</para>




<para id="p1005">
<emphasis id="strong1004" effect="bold">
Program specifications

</emphasis>
</para>




<para id="p1006">
Write a program named 

<emphasis id="strong1005" effect="bold">
Prob05

</emphasis>
 that uses the class definition named 

<emphasis id="strong1006" effect="bold">

Prob05

</emphasis>
 shown in 

<link id="a1025" target-id="Listing_9">

Listing 9

</link>

 along with Ericson's media library to produce the 
graphic output images shown in 

<link id="a1026" target-id="Figure_1">

Figure 1

</link>

, 


<link id="a1027" target-id="Figure_2">

Figure 2

</link>

, and 

<link id="a1028" target-id="Figure_3">

Figure 3

</link>

.

</para>




<para id="p1007">
<emphasis id="strong1007" effect="bold">
Program output at startup

</emphasis>
</para>




<para id="p1008">
<link id="a1029" target-id="Figure_1">

Figure 1

</link>

 shows the image that appears on the screen when the program first 
starts running.

</para>






<para id="p1009">
<emphasis id="strong1008" effect="bold">
<emphasis id="Figure_1" effect="bold">

Figure 1

</emphasis>

 - Program output at startup.

</emphasis>
</para>




<para id="p1010">
<media id="media1000" alt="Missing image." display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/intmdjavaexam1-05a.jpg" width="209" height="399"/>
</media>


</para>





<para id="p1011">
<emphasis id="strong1009" effect="bold">
Program output after one click

</emphasis>
</para>




<para id="p1012">
<link id="a1030" target-id="Figure_2">

Figure 2

</link>

 shows the output image after the user enters 
the values shown into the two text fields and clicks the 

<emphasis id="strong1010" effect="bold">
Move

</emphasis>
 button once.

</para>






<para id="p1013">
<emphasis id="strong1011" effect="bold">
<emphasis id="Figure_2" effect="bold">

Figure 2

</emphasis>

 - Program output after one click.

</emphasis>
</para>




<para id="p1014">
<media id="media1001" alt="Missing image." display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/intmdjavaexam1-05b.jpg" width="209" height="399"/>
</media>


</para>





<para id="p1015">
<emphasis id="strong1012" effect="bold">
Program output after several clicks

</emphasis>
</para>




<para id="p1016">
<link id="a1031" target-id="Figure_3">

Figure 3

</link>

 shows the output image after the user enters 
several different sets of values into the text fields and clicks the 

<emphasis id="strong1013" effect="bold">
Move

</emphasis>
 button several times.

</para>






<para id="p1017">
<emphasis id="strong1014" effect="bold">
<emphasis id="Figure_3" effect="bold">

Figure 3

</emphasis>

 - Program output after several clicks.

</emphasis>
</para>




<para id="p1018">
<media id="media1002" alt="Missing image." display="block">
<image id="img1002" mime-type="image/jpeg" src="../../media/intmdjavaexam1-05c.jpg" width="209" height="399"/>
</media>


</para>





<para id="p1019">
<emphasis id="strong1015" effect="bold">
Labels, text fields, and buttons

</emphasis>
</para>




<para id="p1020">
As shown in 

<link id="a1032" target-id="Figure_1">

Figure 1

</link>

, this program adds two buttons, 
two labels, and two text fields to form a GUI at the bottom of the 

<emphasis id="strong1016" effect="bold">
World

</emphasis>
 
object. Although it isn't obvious, those six components are contained in a


<emphasis id="strong1017" effect="bold">
Panel

</emphasis>
 object.

</para>




<para id="p1021">
Each time you enter numeric values into the angle and distance fields and 
then click the 

<emphasis id="strong1018" effect="bold">
Move

</emphasis>
 button, the turtle will turn by that angle in degrees and move 
by that distance in pixels.

</para>




<para id="p1022">
<emphasis id="strong1019" effect="bold">
Program termination

</emphasis>
</para>




<para id="p1023">
The program terminates and returns control to the operating system when the 
user clicks the 

<emphasis id="strong1020" effect="bold">
Quit

</emphasis>
 button.

</para>




<para id="p1024">
<emphasis id="strong1021" effect="bold">
Use AWT components instead of Swing components

</emphasis>
</para>




<para id="p1025">
The GUI at the bottom of the 

<emphasis id="strong1022" effect="bold">
World

</emphasis>
 object is comprised of 

<emphasis id="strong1023" effect="bold">
<emphasis id="em1000" effect="italics">

AWT

</emphasis>
</emphasis>
 components instead of 

<emphasis id="strong1024" effect="bold">
<emphasis id="em1001" effect="italics">
Swing

</emphasis>
</emphasis>
 
components.

</para>




<para id="p1026">
<emphasis id="strong1025" effect="bold">
Required text output

</emphasis>
</para>




<para id="p1027">
In addition to the output image described above, your program must produce 
some rather inconsequential text output on the command- line screen.

</para>


	

	

</section>
<section id="h11003">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	

	

<para id="p1028">
<emphasis id="strong1026" effect="bold">
The class named Prob05

</emphasis>
</para>




<para id="p1029">
You can view the driver class named 

<emphasis id="strong1027" effect="bold">
Prob05

</emphasis>
 at the beginning of the 
source code in 

<link id="a1033" target-id="Listing_9">

Listing 9

</link>

. You are already familiar with 
the code in the 

<emphasis id="strong1028" effect="bold">
main

</emphasis>
 
method of that class from earlier modules so I won't waste time explaining it.

</para>




<para id="p1030">
Briefly, the 

<emphasis id="strong1029" effect="bold">
main

</emphasis>
 method instantiates a new object of the class named


<emphasis id="strong1030" effect="bold">
Prob05Runner

</emphasis>
. Once that object is instantiated, the program goes idle 
waiting for an event to happen. Events happen when the user enters text into the 
text fields or presses one of the buttons shown in 

<link id="a1034" target-id="Figure_1">

Figure 1

</link>

.

</para>




<para id="p1031">
<emphasis id="strong1031" effect="bold">
The class named Prob05Runner

</emphasis>
</para>




<para id="p1032">
I will explain this program in fragments. A complete listing of the program 
is provided in 

<link id="a1035" target-id="Listing_9">

Listing 9

</link>

 near the end of the module 

</para>




<para id="p1033">
The class named 

<emphasis id="strong1032" effect="bold">
Prob05Runner

</emphasis>
 begins in 

<link id="a1036" target-id="Listing_1">

Listing 1

</link>

.

</para>


	

<table id="table1000" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

 - Beginning of the class named Prob05Runner. 


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">

				

<code id="pre1000" display="block">class Prob05Runner{
  Turtle turtle = null;
  Picture picture = null;
  World world = new World(200,300);</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1034">
There's nothing new in 

<link id="a1037" target-id="Listing_1">

Listing 1

</link>

. You have seen 
	code like this in several earlier modules.

</para>




<para id="p1035">
<emphasis id="strong1033" effect="bold">
Instantiate GUI components

</emphasis>
</para>




<para id="p1036">
<link id="a1038" target-id="Listing_2">

Listing 2

</link>

 instantiates the GUI components that are 
used to construct the GUI at the bottom of 

<link id="a1039" target-id="Figure_1">

Figure 1

</link>

.

</para>


	

<table id="table1001" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

 - Instantiate GUI components. 


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">

				

<code id="pre1001" display="block">  Panel mainPanel = new Panel();
  Label angleLabel = new Label("Enter Angle");
  TextField angleField = new TextField("000");
  Label distanceLabel = new Label("Enter Distance");
  TextField distanceField = new TextField("000");
  Button moveButton = new Button("Move");
  Button quitButton = new Button("Quit");
  
  int angle = 0;
  int distance = 0;</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1037">
References to the GUI components are saved in instance variables with 
	descriptive names.

</para>




<para id="p1038">
<emphasis id="strong1034" effect="bold">
GUI component initialization

</emphasis>
</para>




<para id="p1039">
Except for the 

<emphasis id="strong1035" effect="bold">
Panel

</emphasis>
 object, each GUI component is initialized with 
information that is appropriate to the type of component. Compare the 
initialization values in 

<link id="a1040" target-id="Listing_2">

Listing 2

</link>

 with the image in


<link id="a1041" target-id="Figure_1">

Figure 1

</link>

 for a better understanding of what I mean by 
this.

</para>




<para id="p1040">
<emphasis id="strong1036" effect="bold">
Brief description of the GUI components

</emphasis>
</para>




<para id="p1041">
You are encouraged to visit the Sun Java documentation and read about the 
following AWT components:

</para>




<list id="ul1005" list-type="bulleted">

	

<item id="li1023">
<emphasis id="strong1037" effect="bold">
Panel

</emphasis>
: A panel provides space in which an application can attach 
	any other components, including other panels. 

</item>


	

<item id="li1024">
<emphasis id="strong1038" effect="bold">
Label

</emphasis>
: A Label object is a component for placing text in a 
	container. A label displays a single line of read-only text. The text can be 
	changed by the application, but a user cannot edit it directly. 

</item>


	

<item id="li1025">
<emphasis id="strong1039" effect="bold">
TextField

</emphasis>
: A text component that allows for the editing of a 
	single line of text. 

</item>


	

<item id="li1026">
<emphasis id="strong1040" effect="bold">
Button

</emphasis>
: This class creates a labeled button. The application can 
	cause some action to happen when the button is pushed.

</item>




</list>




<para id="p1042">
<link id="a1042" target-id="Figure_1">

Figure 1

</link>

 contains a 

<emphasis id="strong1041" effect="bold">
Panel

</emphasis>
 object at the bottom. The panel contains two


<emphasis id="strong1042" effect="bold">
Label

</emphasis>
 objects 

<emphasis id="em1002" effect="italics">
(shown as orange)

</emphasis>
, two

<emphasis id="strong1043" effect="bold">
 TextField

</emphasis>
 objects 

<emphasis id="em1003" effect="italics">
(white)

</emphasis>
, 
and two 

<emphasis id="strong1044" effect="bold">
Button

</emphasis>
 objects 

<emphasis id="em1004" effect="italics">
(gray)

</emphasis>
. Those seven objects are 
instantiated in 

<link id="a1043" target-id="Listing_2">

Listing 2

</link>

.

</para>




<para id="p1043">
<emphasis id="strong1045" effect="bold">
The angle and distance variables

</emphasis>
</para>




<para id="p1044">
<link id="a1044" target-id="Listing_2">

Listing 2

</link>

 also declares and initializes two instance 
variables named 

<emphasis id="strong1046" effect="bold">
angle

</emphasis>
 
and 

<emphasis id="strong1047" effect="bold">
distance

</emphasis>
. 

<emphasis id="em1005" effect="italics">
(Note that these two variables would be automatically 
initialized to zero if I didn't initialize them, but I prefer to initialize them 
explicitly in order to make the code more self-documenting.)

</emphasis>
</para>




<para id="p1045">
<emphasis id="strong1048" effect="bold">
Beginning of the constructor

</emphasis>
</para>




<para id="p1046">
The constructor for the class named 

<emphasis id="strong1049" effect="bold">
Prob05Runner

</emphasis>
 begins in


<link id="a1045" target-id="Listing_3">

Listing 3

</link>

.

</para>


	

<table id="table1002" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

 - Beginning of the constructor. 


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">

				

<code id="pre1002" display="block">  public Prob05Runner(){
    System.out.println("Dick Baldwin");

    mainPanel.setBackground(Color.ORANGE);
    
    mainPanel.setLayout(new GridLayout(0,2));</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1047">
The constructor begins by displaying my name on the command line screen. 
	This is inconsequential insofar as the overall operation of the program is 
	concerned.

</para>




<para id="p1048">
<emphasis id="strong1050" effect="bold">
Set the panel background color to orange

</emphasis>
</para>




<para id="p1049">
Then 

<link id="a1046" target-id="Listing_3">

Listing 3 

</link>

sets the background color of the 
panel to orange. This is what causes the two labels in 

<link id="a1047" target-id="Figure_1">


Figure 1

</link>

 to appear to be orange. They are actually transparent except for 
the text. The orange color shows through causing the labels to appear to be 
orange.

</para>




<para id="p1050">
<emphasis id="strong1051" effect="bold">
Set the layout to GridLayout

</emphasis>
</para>




<para id="p1051">
Setting the layout manager controls how the components that are placed in the 
panel will be arranged. A 

<emphasis id="strong1052" effect="bold">
GridLayout

</emphasis>
 causes all components to be the same size 
arranged in rows and columns.

</para>




<para id="p1052">
<emphasis id="strong1053" effect="bold">
Overloaded constructors

</emphasis>
</para>




<para id="p1053">
There are several overloaded versions of the 

<emphasis id="strong1054" effect="bold">
GridLayout

</emphasis>
 constructor. 
For the constructor used in 

<link id="a1048" target-id="Listing_3">

Listing 3

</link>

, the parameters 
specify the number of rows and the number of columns in that order. Specifying 
the number of rows as 0 and the number of columns as 2 means that the layout 
manager will accept any number of rows but only two columns.

</para>




<para id="p1054">
<emphasis id="strong1055" effect="bold">
The order of component placement

</emphasis>
</para>




<para id="p1055">
The intersections of the rows and columns create 

<emphasis id="strong1056" effect="bold">
<emphasis id="em1006" effect="italics">
cells

</emphasis>
</emphasis>
. 
Components are placed in the cells in left to right, top to bottom order as they 
are added to the panel.

</para>




<para id="p1056">
<emphasis id="strong1057" effect="bold">
Add the six GUI components to the panel

</emphasis>
</para>




<para id="p1057">
<link id="a1049" target-id="Listing_4">

Listing 4

</link>

 adds the six GUI components to the panel 
in the left to right, top to bottom order described above.

</para>


	

<table id="table1003" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

 - Add the six GUI components to the panel. 


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">

				

<code id="pre1003" display="block">    mainPanel.add(angleLabel);
    mainPanel.add(angleField);
    mainPanel.add(distanceLabel);
    mainPanel.add(distanceField);
    mainPanel.add(moveButton);
    mainPanel.add(quitButton);</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1058">
At this point, the panel has been populated with GUI components, but the 
	panel itself has not been added to the 

<emphasis id="strong1058" effect="bold">
JFrame

</emphasis>
 object that forms the
	

<emphasis id="strong1059" effect="bold">
World

</emphasis>
 object. That is accomplished in 

<link id="a1050" target-id="Listing_5">

Listing 5

</link>

.

</para>




<para id="p1059">
<emphasis id="strong1060" effect="bold">
Get the frame and add the panel to the frame

</emphasis>
</para>




<para id="p1060">
<link id="a1051" target-id="Listing_5">

Listing 5

</link>

 gets a reference to the 

<emphasis id="strong1061" effect="bold">
World

</emphasis>
 
object's frame and adds the panel to the SOUTH location in that frame.

</para>


	

<table id="table1004" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

 - Get the frame and add the panel to the frame. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">

				

<code id="pre1004" display="block">    JFrame frame = world.getFrame();
    frame.getContentPane().add(
                            mainPanel,BorderLayout.SOUTH);
                            
    frame.pack();</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1061">
You can surmise from the word SOUTH that the panel is added to the bottom 
	of the frame. To learn more about this, visit the 

<emphasis id="strong1062" effect="bold">
BorderLayout

</emphasis>
 class 
	in Sun's Java documentation.

</para>




<para id="p1062">
<emphasis id="strong1063" effect="bold">
Pack the frame

</emphasis>
</para>




<para id="p1063">
As you learned in an earlier module, it is very important that you pack the 
frame at this point. Packing the frame causes the frame to adjust its dimensions 
in order to accommodate all of the components that have been added to it. In 
this case, the frame contains a 

<emphasis id="strong1064" effect="bold">
Picture

</emphasis>
 object 

<emphasis id="em1007" effect="italics">
(placed there when the 

<emphasis id="strong1065" effect="bold">

World

</emphasis>
 was constructed)

</emphasis>
 and a 

<emphasis id="strong1066" effect="bold">
Panel

</emphasis>
 object placed there in


<link id="a1052" target-id="Listing_6">

Listing 5

</link>

.

</para>




<para id="p1064">
<emphasis id="strong1067" effect="bold">
What about the size of the panel?

</emphasis>
</para>




<para id="p1065">
Exactly how the panel decides what size it needs to be to accommodate the six 
GUI components is a fairly complicated topic, so I won't go into it here. 
However, if you do much work developing GUIs, you definitely need to understand 
the process. I have explained the automatic sizing process in several tutorials 
on my website.

</para>




<para id="p1066">
<emphasis id="strong1068" effect="bold">
Set the background to blue and add a turtle

</emphasis>
</para>




<para id="p1067">
<link id="a1053" target-id="Listing_6">

Listing 6 

</link>

sets the background color of the world to 
blue and adds a turtle to the world.

</para>

	

<table id="table1005" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

 - Set the background to blue and add a turtle. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">

				

<code id="pre1005" display="block">    //Initialize the picture.
    picture = world.getPicture();
    //Set picture background to BLUE
    picture.setAllPixelsToAColor(Color.BLUE);
    //Display the student's name on the picture.
    picture.addMessage("Dick Baldwin",10,20);
    //Add a turtle to the world. This causes the
    // world to be repainted.
    turtle = new Turtle(world);</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1068">
There is nothing new in 

<link id="a1054" target-id="Listing_6">

Listing 6 

</link>

. I have 
	explained code very similar to this code in earlier modules.

</para>




<para id="p1069">
<emphasis id="strong1069" effect="bold">
Could stop at this point

</emphasis>
</para>




<para id="p1070">
If we were to stop programming at this point, the program would be 
executable, and would produce the output shown in 

<link id="a1055" target-id="Figure_1">

Figure 1

</link>

 
when it is run. However it would be completely passive. By that, I mean that 
entering values into the text fields and clicking the buttons at the bottom of


<link id="a1056" target-id="Figure_1">

Figure 1

</link>

 would have no effect. However, the buttons 
would appear to be active from a visual viewpoint because the animation behavior 
is built into objects of the 

<emphasis id="strong1070" effect="bold">
Button

</emphasis>
 
class.

</para>




<para id="p1071">
<emphasis id="strong1071" effect="bold">
Register listener objects

</emphasis>
</para>




<para id="p1072">
In order to cause the buttons to impact the behavior of the program, we must 
instantiate and register listener object on the buttons. I will do that using 
anonymous classes.

</para>




<para id="p1073">
<emphasis id="strong1072" effect="bold">
Define, instantiate, and register a listener on the Move button

</emphasis>
</para>




<para id="p1074">
The code in 

<link id="a1057" target-id="Listing_7">

Listing 7

</link>

:

</para>




<list id="ul1006" list-type="bulleted">

	

<item id="li1027">
Defines an anonymous 

<emphasis id="strong1073" effect="bold">
ActionListener

</emphasis>
 class.

</item>


	

<item id="li1028">
Instantiates an anonymous object of that class.

</item>


	

<item id="li1029">
Registers that object on the 

<emphasis id="strong1074" effect="bold">
Move

</emphasis>
 button

</item>




</list>

	

<table id="table1006" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

 - Define, instantiate, and register a listener on the Move button. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">

				

<code id="pre1006" display="block">    moveButton.addActionListener(
      new ActionListener(){
      
        public void actionPerformed(ActionEvent e){
          angle = Integer.parseInt(angleField.getText());
          distance = Integer.parseInt(
                                 distanceField.getText());
          turtle.turn(angle);
          turtle.forward(distance);
        }//end action performed
        
      }//end newActionListener
    );//end addActionListener</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1075">
<emphasis id="strong1075" effect="bold">
The actionPerformed method

</emphasis>
</para>




<para id="p1076">
As you learned in an earlier module, the code in the 

<emphasis id="strong1076" effect="bold">
actionPerformed

</emphasis>
 
method is executed each time the user presses the 

<emphasis id="strong1077" effect="bold">
Move

</emphasis>
 button.

</para>




<para id="p1077">
The 

<emphasis id="strong1078" effect="bold">
actionPerformed

</emphasis>
 method in 

<link id="a1058" target-id="Listing_7">

Listing 7

</link>

 
begins by getting the text from each of the text fields, converting the text to 
type 

<emphasis id="strong1079" effect="bold">
int

</emphasis>
, and saving 
the 

<emphasis id="strong1080" effect="bold">
int

</emphasis>
 values in the variables named 

<emphasis id="strong1081" effect="bold">
angle

</emphasis>
 and 

<emphasis id="strong1082" effect="bold">
distance

</emphasis>
.

</para>




<para id="p1078">
Then 

<link id="a1059" target-id="Listing_7">

Listing 7

</link>

 calls the 

<emphasis id="strong1083" effect="bold">
turn

</emphasis>
 and 

<emphasis id="strong1084" effect="bold">
forward

</emphasis>
 methods of the 

<emphasis id="strong1085" effect="bold">

Turtle

</emphasis>
 class to cause the turtle to turn by the specified angle and then 
move forward by the specified distance.

</para>




<para id="p1079">
<emphasis id="strong1086" effect="bold">
Action listener to terminate the program

</emphasis>
</para>




<para id="p1080">
<link id="a1060" target-id="Listing_8">

Listing 8

</link>

 registers an action listener on the 

<emphasis id="strong1087" effect="bold">

Quit

</emphasis>
 button, which will 
cause the program to terminate when the user clicks the button.

</para>


	

<table id="table1007" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Listing_8" effect="bold">

Listing 8

</emphasis>

 - Action listener to terminate the program. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">

				

<code id="pre1007" display="block">    quitButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
        
          System.exit(0);
          
        }//end action performed
      }//end newActionListener
    );//end addActionListener

  }//end constructor
  //----------------------------------------------------//

}//end class Prob05Runner</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1081">
As you can see in 

<link id="a1061" target-id="Listing_8">

Listing 8

</link>

, this code causes 
	the 

<emphasis id="strong1088" effect="bold">
exit

</emphasis>
 method of 
	the 

<emphasis id="strong1089" effect="bold">
System

</emphasis>
 class to be called when the user clicks the 

<emphasis id="strong1090" effect="bold">
Quit

</emphasis>
 
	button. According to the Sun documentation, a call to the 

<emphasis id="strong1091" effect="bold">
exit

</emphasis>
 method
	

<emphasis id="em1008" effect="italics">
"Terminates the currently running Java Virtual Machine."

</emphasis>
</para>




<para id="p1082">
<emphasis id="strong1092" effect="bold">
The end of the constructor and the end of the class

</emphasis>
</para>




<para id="p1083">
<link id="a1062" target-id="Listing_8">

Listing 8

</link>

 also shows the end of the constructor for 
the 

<emphasis id="strong1093" effect="bold">
Prob05Runner

</emphasis>
 
class and the end of the class.

</para>






</section>
<section id="h11004">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>






<para id="p1084">
I encourage you to copy the code from 

<link id="a1063" target-id="Listing_9">

Listing 9

</link>

. 
Compile the code and execute it. Experiment with the code, making changes and 
observing the results of your changes. Make certain that you can explain why 
your changes behave as they do.

</para>


	

</section>
<section id="h11005">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1085">
In this module, you learned how to create and service a graphical user 
interface containing panels, labels, text fields, and buttons.

</para>




</section>
<section id="h11006">
<title>
<emphasis id="Whats_next" effect="bold">

What's next?

</emphasis>


</title>




<para id="p1086">
In the next module, you will learn about:

    

</para>




<list id="ul1007" list-type="bulleted">

	

<item id="li1030">
Alpha transparency
    

</item>


	

<item id="li1031">
A buffered image of type TYPE_INT_ARGB
    

</item>


	

<item id="li1032">
The ability to use the 

<emphasis id="strong1094" effect="bold">
getBasicPixel

</emphasis>
 and 

<emphasis id="strong1095" effect="bold">
setBasicPixel

</emphasis>
 methods,
    

</item>


	

<item id="li1033">
The use of the bitwise AND and OR operators,
    

</item>


	

<item id="li1034">
The use of the drawImage method of the 

<emphasis id="strong1096" effect="bold">
Graphics

</emphasis>
 class.
	

</item>




</list>


	

</section>
<section id="h11007">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1087">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1097" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1008" list-type="bulleted">

					

<item id="li1035">
Module name: Java OOP: Panels, Labels, Text Fields, and Buttons

</item>


					

<item id="li1036">
File: Java3110.htm


</item>




<item id="li1037">
Revised: 02/06/16

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1098" effect="bold">
Disclaimers:

</emphasis>
<para id="p1088">
<emphasis id="strong1099" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1089">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1090">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1091">
<emphasis id="strong1100" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


				

</note>

			


		



	





</section>
<section id="h11008">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1092">
A complete listing of the program discussed in 
this lesson is shown in 

<link id="a1064" target-id="Listing_9">

Listing 9

</link>

 below. 

</para>





<para id="p1093">
<emphasis id="strong1101" effect="bold">
<emphasis id="Listing_9" effect="bold">

Listing 9

</emphasis>

 - Source code for Prob05.

</emphasis>
</para>



				

<code id="pre1008" display="block">/*File Prob05 Copyright 2008 R.G.Baldwin
 *Revised 12/31/08
*********************************************************/
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.Panel;
import java.awt.TextField;
import java.awt.Label;
import java.awt.Button;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Color;

import javax.swing.JFrame;

public class Prob05{
  //DO NOT MODIFY THE CODE IN THIS CLASS DEFINITION.
  public static void main(String[] args){
    new Prob05Runner();
  }//end main method
}//end class Prob05
//End program specifications.
/*------------------------------------------------------//

*********************************************************/

class Prob05Runner{
  Turtle turtle = null;
  Picture picture = null;
  World world = new World(200,300);
  Panel mainPanel = new Panel();
  Label angleLabel = new Label("Enter Angle");
  TextField angleField = new TextField("000");
  Label distanceLabel = new Label("Enter Distance");
  TextField distanceField = new TextField("000");
  Button moveButton = new Button("Move");
  Button quitButton = new Button("Quit");
  int angle = 0;
  int distance = 0;

  public Prob05Runner(){
    System.out.println("Dick Baldwin");

    //Construct the GUI.
    mainPanel.setBackground(Color.ORANGE);
    mainPanel.setLayout(new GridLayout(0,2));
    mainPanel.add(angleLabel);
    mainPanel.add(angleField);
    mainPanel.add(distanceLabel);
    mainPanel.add(distanceField);
    mainPanel.add(moveButton);
    mainPanel.add(quitButton);

    //Get a reference to the world frame and add the GUI
    // to the frame.
    JFrame frame = world.getFrame();
    frame.getContentPane().add(
                            mainPanel,BorderLayout.SOUTH);


    frame.pack();

    //Initialize the picture.
    picture = world.getPicture();
    //Set picture background to BLUE
    picture.setAllPixelsToAColor(Color.BLUE);
    //Display the student's name on the picture.
    picture.addMessage("Dick Baldwin",10,20);
    //Add a turtle to the world. This causes the
    // world to be repainted.
    turtle = new Turtle(world);

    //--------------------------------------------------//
    //Register anonymous listeners on the two buttons.
    moveButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
          angle = Integer.parseInt(angleField.getText());
          distance = Integer.parseInt(
                                 distanceField.getText());
          turtle.turn(angle);
          turtle.forward(distance);
        }//end action performed
      }//end newActionListener
    );//end addActionListener

    quitButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
          System.exit(0);
        }//end action performed
      }//end newActionListener
    );//end addActionListener

  }//end constructor
  //----------------------------------------------------//

}//end class Prob05Runner</code>


	

<para id="p1094">
-end- 

</para>






</section>
</content>




</document>