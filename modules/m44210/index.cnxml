<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Java3016: Green-Screen Processing</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m44210</md:content-id>
  <md:title>Java3016: Green-Screen Processing</md:title>
  <md:abstract>Learn to write a program to do green-screen processing.</md:abstract>
  <md:uuid>7986198b-43ee-4f11-bc67-ca347d14e3ae</md:uuid>
</metadata>

<content>






<para id="p1000">
Revised: Sun Apr 03 13:48:44 CDT 2016

</para>




<para id="p1001">
<emphasis id="em1000" effect="italics">
This page is included in the following Books:

</emphasis>
</para>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">

	

<link id="a1000" url="http://cnx.org/contents/dzOvxPFw">


<emphasis id="em1001" effect="italics">
ITSE 2321 - Object-Oriented Programming (Java)

</emphasis>
</link>


</item>


	

<item id="li1001">

	

<link id="a1001" url="http://cnx.org/contents/-2RmHFs_">


<emphasis id="em1002" effect="italics">
Object-Oriented Programming (OOP) with Java 
	

</emphasis>
 
	

</link>

 

</item>




</list>














<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1001" list-type="bulleted">

	

<item id="li1002">
<link id="a1002" target-id="Preface">

Preface

</link>


	

<list id="ul1002" list-type="bulleted">

		

<item id="li1003">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1003" list-type="bulleted">

			

<item id="li1004">
<link id="a1004" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1005">
<link id="a1005" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1006">
<link id="a1006" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1007">
<link id="a1007" target-id="GeneralBackgroundInformation">

General background information

</link>


</item>


	

<item id="li1008">
<link id="a1008" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


</item>


	

<item id="li1009">
<link id="a1009" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1010">
<link id="a1010" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1011">
<link id="a1011" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1012">
<link id="a1012" target-id="Online_video_links">

Online video links

</link>


</item>


	

<item id="li1013">
<link id="a1013" target-id="Miscellaneous">

Miscellaneous

</link>


</item>


	

<item id="li1014">
<link id="a1014" target-id="Complete_program_listing">

Complete program listing

</link>


</item>




</list>


	
	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	
	

<para id="p1002">
This module is one of a series of modules designed to teach you about Object-Oriented Programming (OOP) using Java.

</para>





<para id="p1003">
The program described in this module requires the use of the Guzdial-Ericson 
multimedia class library. You will find download, installation, and usage 
instructions for the library at 

<link id="a1015" url="http://cnx.org/content/m44148/latest/">

Java OOP: The Guzdial-Ericson Multimedia Class Library

</link>

.

</para>



	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1004">
I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the Figures 
and Listings while you are reading about them.

</para>



	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1004" list-type="bulleted">

		

<item id="li1015">
<link id="a1016" target-id="Figure_1">

Figure 1

</link>

. Input image file Prob03a.bmp. 

</item>


		

<item id="li1016">
<link id="a1017" target-id="Figure_2">

Figure 2

</link>

. Input image file Prob03b.bmp. 

</item>


		

<item id="li1017">
<link id="a1018" target-id="Figure_3">

Figure 3

</link>

. Input image file Prob03c.bmp.

</item>


		

<item id="li1018">
<link id="a1019" target-id="Figure_4">

Figure 4

</link>

. Input image file Prob03d.jpg. 

</item>


		

<item id="li1019">
<link id="a1020" target-id="Figure_5">

Figure 5

</link>

. Output picture. 

</item>


		

<item id="li1020">
<link id="a1021" target-id="Figure_6">

Figure 6

</link>

. Required output text. 

</item>


		

<item id="li1021">
<link id="a1022" target-id="Figure_7">

Figure 7

</link>

. Front view of the skater after cropping.

</item>


	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1005" list-type="bulleted">

		

<item id="li1022">
<link id="a1023" target-id="Listing_1">

Listing 1

</link>

. The driver class named Prob03.

</item>


		

<item id="li1023">
<link id="a1024" target-id="Listing_2">

Listing 2

</link>

. Beginning of the class named Prob03Runner. 

</item>


		

<item id="li1024">
<link id="a1025" target-id="Listing_3">

Listing 3

</link>

. Beginning of the run method. 

</item>


		

<item id="li1025">
<link id="a1026" target-id="Listing_4">

Listing 4

</link>

. Remainder of the run method. 

</item>


		

<item id="li1026">
<link id="a1027" target-id="Listing_5">

Listing 5

</link>

. The greenScreenDraw method.

</item>


		

<item id="li1027">
<link id="a1028" target-id="Listing_6">

Listing 6

</link>

. Complete program listing.

</item>


	

</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>


	

<para id="p1005">
n this lesson, you will learn how to write a program to do 

<emphasis id="em1003" effect="italics">

	green-screen

</emphasis>
 processing to superimpose a source image onto a destination 
	image while making the green background of the source image appear to be 
	transparent.

</para>





<para id="p1006">
<emphasis id="strong1000" effect="bold">
Program specifications

</emphasis>
</para>





<para id="p1007">
Write a program named 

<emphasis id="strong1001" effect="bold">
Prob03

</emphasis>
 that uses the class definition shown in


<link id="a1029" target-id="Listing_1">

Listing 1

</link>

 and Ericson's media library along with the 
image files in the following list to produce the five graphic output images 
shown in 

<link id="a1030" target-id="Figure_1">

Figure 1

</link>

 through 

<link id="a1031" target-id="Figure_5">

Figure 5

</link>

.

</para>





<list id="ul1006" list-type="bulleted">

	

<item id="li1028">
Prob03a.bmp

</item>


	

<item id="li1029">
Prob03b.bmp

</item>


	

<item id="li1030">
Prob03c.bmp

</item>


	

<item id="li1031">
Prob03d.jpg 

</item>




</list>




<para id="p1008">
<emphasis id="Figure_1" effect="bold">


<emphasis id="strong1002" effect="bold">
<link id="a1032" target-id="Figure_1">

 Figure 1

</link>


</emphasis>
</emphasis>


<emphasis id="strong1003" effect="bold">
 - Input image file Prob03a.bmp.

</emphasis>
</para>





<para id="p1009">
<media id="media1000" alt="Image of a female ice skater facing the camera on a green background" display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/image-a-b4cb.jpg" width="370" height="449"/>
</media>


</para>



	



<para id="p1010">
<emphasis id="Figure_2" effect="bold">


<emphasis id="strong1004" effect="bold">
<link id="a1033" target-id="Figure_2">

 Figure 2

</link>


</emphasis>
</emphasis>


<emphasis id="strong1005" effect="bold">
 - Input image file Prob03b.bmp.

</emphasis>
</para>





<para id="p1011">
<media id="media1001" alt="Image of a female ice skater facing slightly to her left on a green background" display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/image-b-e470.jpg" width="370" height="454"/>
</media>


</para>




	



<para id="p1012">
<emphasis id="Figure_3" effect="bold">


<emphasis id="strong1006" effect="bold">
<link id="a1034" target-id="Figure_3">

 Figure 3

</link>


</emphasis>
</emphasis>


<emphasis id="strong1007" effect="bold">
 - Input image file Prob03c.bmp.

</emphasis>
</para>





<para id="p1013">
<media id="media1002" alt="Image of a female ice skater facing slightly to her right on a green background" display="block">
<image id="img1002" mime-type="image/jpeg" src="../../media/image-c-e8a6.jpg" width="370" height="454"/>
</media>


</para>




	



<para id="p1014">
<emphasis id="Figure_4" effect="bold">


<emphasis id="strong1008" effect="bold">
<link id="a1035" target-id="Figure_4">

 Figure 4

</link>


</emphasis>
</emphasis>


<emphasis id="strong1009" effect="bold">
 - Input image file Prob03d.jpg.

</emphasis>
</para>






<para id="p1015">
<media id="media1003" alt="Image of a frozen lake with a penguin and some buildings on the far shore." display="block">
<image id="img1003" mime-type="image/jpeg" src="../../media/image-d-8b94.jpg" width="370" height="454"/>
</media>


</para>




	



<para id="p1016">
<emphasis id="Figure_5" effect="bold">


<emphasis id="strong1010" effect="bold">
<link id="a1036" target-id="Figure_5">

 Figure 5

</link>


</emphasis>
</emphasis>


<emphasis id="strong1011" effect="bold">
 - Output picture.

</emphasis>
</para>





<para id="p1017">
<media id="media1004" alt="Three views of the ice skater on a frozen lake." display="block">
<image id="img1004" mime-type="image/jpeg" src="../../media/image-e-fc68.jpg" width="356" height="385"/>
</media>


</para>




	



<para id="p1018">
<emphasis id="strong1012" effect="bold">
New classes

</emphasis>
</para>





<para id="p1019">
You may define new classes as necessary to cause your program to behave as 
required, but you may not modify the class definition for the class named 

<emphasis id="strong1013" effect="bold">

Prob03

</emphasis>
 given in 

<link id="a1037" target-id="Listing_1">

Listing 1

</link>

.

</para>





<para id="p1020">
<emphasis id="strong1014" effect="bold">
Required output text

</emphasis>
</para>





<para id="p1021">
In addition to the output images mentioned above, your program must display 
your name and one other line of text on the command-line screen as shown in


<link id="a1038" target-id="Figure_6">

Figure 6

</link>

.

</para>



	

<table id="table1000" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Figure_6" effect="bold">

Figure 6

</emphasis>

. Required output text.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">


							

<code id="pre1000" display="block">Display your name here.
Picture, filename None height 256 width 344</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

</section>
<section id="h11003">
<title>
<emphasis id="GeneralBackgroundInformation" effect="bold">

General 
	background information

</emphasis>


</title>




<para id="p1022">
This program receives three views of an ice skater in 

<emphasis id="strong1015" effect="bold">
bmp

</emphasis>
 files with a 
pure green background along with a 

<emphasis id="strong1016" effect="bold">
jpg

</emphasis>
 file containing a snow scene.

</para>





<para id="p1023">
All four files show the 

<link id="a1039" url="http://www.alice.org/">

Alice

</link>

 runtime panel with the words 

<emphasis id="strong1017" effect="bold">
<emphasis id="em1004" effect="italics">
World 
Running...

</emphasis>
</emphasis>
 and several associated buttons.

<emphasis id="em1005" effect="italics">
 (See 


<link id="a1040" target-id="Figure_1">

Figure 1

</link>

.)

</emphasis>
</para>





<para id="p1024">
<emphasis id="strong1018" effect="bold">
Program behavior

</emphasis>
</para>





<para id="p1025">
The program performs the following actions:

</para>





<list id="ul1007" list-type="bulleted">

	

<item id="li1032">
Crops the snow scene to remove the Alice runtime panel.

</item>


	

<item id="li1033">
Crops the three views of the skater to remove the Alice runtime panel 
	along with excess blank green background.

</item>


	

<item id="li1034">
Scales two of the views of the skater to smaller sizes.

</item>


	

<item id="li1035">
Does green-screen processing to place the three views of the skater at 
	different locations in the snow scene.

</item>


	

<item id="li1036">
Uses position along with size to create an optical illusion of a 3D 
	scene of three ice skaters and a penguin standing at different locations on 
	a frozen lake 

<emphasis id="em1006" effect="italics">
(see 

<link id="a1041" target-id="Figure_5">

Figure 5

</link>

)

</emphasis>
.

</item>




</list>




<para id="p1026">
<emphasis id="strong1019" effect="bold">
Programming skills required

</emphasis>
</para>





<para id="p1027">
In order to write this program, the student must be able to, as a minimum, 
write a green-screen processing method.

</para>



	
	

</section>
<section id="h11004">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	
	

<para id="p1028">
<emphasis id="strong1020" effect="bold">
Will discuss in fragments

</emphasis>
</para>





<para id="p1029">
I will discuss this program in fragments. A complete listing of the 
program is provided in 

<link id="a1042" target-id="Listing_6">

Listing 6

</link>

 near the end of the 
lesson.

</para>





<para id="p1030">
<emphasis id="strong1021" effect="bold">
The driver class named Prob03

</emphasis>
</para>





<para id="p1031">
The driver class containing the 

<emphasis id="strong1022" effect="bold">
main

</emphasis>
 method is shown in


<link id="a1043" target-id="Listing_1">

Listing 1

</link>

.

</para>



	

<table id="table1001" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. The driver class named Prob03.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">

				

<code id="pre1001" display="block">import java.awt.Color;
      
public class Prob03{
  public static void main(String[] args){
    Prob03Runner obj = new Prob03Runner();
    obj.run();
  }//end main
}//end class Prob03</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1032">
The 

<emphasis id="strong1023" effect="bold">
main

</emphasis>
 method in


<link id="a1044" target-id="Listing_1">

Listing 1

</link>

 instantiates a new object of the class named
	

<emphasis id="strong1024" effect="bold">
Prob03Runner

</emphasis>
 and calls the method named 

<emphasis id="strong1025" effect="bold">
run

</emphasis>
 that 
	belongs to that object.

</para>





<para id="p1033">
When the 

<emphasis id="strong1026" effect="bold">
run

</emphasis>
 method returns, the program terminates.

</para>





<para id="p1034">
<emphasis id="strong1027" effect="bold">
Beginning of the class named Prob03Runner

</emphasis>
</para>





<para id="p1035">
The beginning of the class named 

<emphasis id="strong1028" effect="bold">
Prob03Runner

</emphasis>
, and its constructor, is 
shown in 

<link id="a1045" target-id="Listing_2">

Listing 2

</link>

. 

</para>



	

<table id="table1002" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. Beginning of the class named Prob03Runner.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">

				

<code id="pre1002" display="block">class Prob03Runner{

  public Prob03Runner(){//constructor
    System.out.println("Display your name here.");
  }//end constructor</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1036">
The constructor simply displays the student's name on the command line 
	screen producing the first line of text shown in 

<link id="a1046" target-id="Figure_6">

Figure 
	6

</link>

.

</para>





<para id="p1037">
<emphasis id="strong1029" effect="bold">
Beginning of the run method

</emphasis>
</para>





<para id="p1038">
The beginning of the 

<emphasis id="strong1030" effect="bold">
run

</emphasis>
 method that is called in 

<link id="a1047" target-id="Listing_1">

Listing 1

</link>

 is shown 
in 

<link id="a1048" target-id="Listing_3">

Listing 3

</link>

.

</para>



	

<table id="table1003" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. Beginning of the run method.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">

				

<code id="pre1003" display="block">  public void run(){

    //A view facing the front of the skater.
    Picture front = new Picture("Prob03a.bmp");
    front.explore();
    front = crop(front,123,59,110,256);

    //A view showing the right side of the skater.
    Picture right = new Picture("Prob03b.bmp");
    right.explore();
    right = crop(right,123,59,110,256);

    //A view showing the left side of the skater.
    Picture left = new Picture("Prob03c.bmp");
    left.explore();
    left = crop(left,123,59,110,256);

    //This will be the background for the new picture.
    Picture snowScene = new Picture("Prob03d.jpg");
    snowScene.explore();
    snowScene = crop(snowScene,6,59,344,256);</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1039">
The code in 

<link id="a1049" target-id="Listing_3">

Listing 3

</link>

 instantiates, displays, 
	and crops the four input images.

</para>





<para id="p1040">
All four images must be cropped to remove the Alice runtime window. In 
addition, the three skater images are also cropped to remove excess blank green 
background material.

</para>





<para id="p1041">
<emphasis id="strong1031" effect="bold">
Image formats: bmp versus jpg

</emphasis>
</para>





<para id="p1042">
Note that the three views of the skater are extracted from 

<emphasis id="strong1032" effect="bold">
bmp

</emphasis>
 image 
files instead of 

<emphasis id="strong1033" effect="bold">
jpg

</emphasis>
 image files. This is necessary in order to 
preserve the pure green background color. Storing the images as 

<emphasis id="strong1034" effect="bold">
jpg

</emphasis>
 
files would corrupt the background color in the low order bits making it more 
difficult to achieve the green-screen processing required by this program.

</para>





<para id="p1043">
<emphasis id="strong1035" effect="bold">
The method named crop

</emphasis>
</para>





<para id="p1044">
<link id="a1050" target-id="Listing_3">

Listing 3

</link>

 calls the 

<emphasis id="strong1036" effect="bold">
crop

</emphasis>
 method four times in succession, once for 
each of the four 

<emphasis id="strong1037" effect="bold">
Picture

</emphasis>
 objects instantiated from the image files.

</para>





<para id="p1045">
I explained image cropping in an earlier module. The 

<emphasis id="strong1038" effect="bold">
crop

</emphasis>
 method 
used in this program is very similar to the methods that I explained in the 
earlier module, so I won't explain it again in this module. You can view 
the 

<emphasis id="strong1039" effect="bold">
crop

</emphasis>
 method in detail in 

<link id="a1051" target-id="Listing_6">

Listing 6

</link>

 near the 
end of the module.

</para>





<para id="p1046">
<emphasis id="strong1040" effect="bold">
Five incoming parameters

</emphasis>
</para>





<para id="p1047">
The 

<emphasis id="strong1041" effect="bold">
crop

</emphasis>
 method requires five incoming parameters. The first 
parameter is a reference to the 

<emphasis id="strong1042" effect="bold">
Picture

</emphasis>
 object that is to be cropped. 
The remaining four integer parameters specify the rectangular area that is to be 
preserved after the picture is cropped.

</para>





<para id="p1048">
<emphasis id="strong1043" effect="bold">
The rectangular area to be preserved

</emphasis>
</para>





<para id="p1049">
The first two integers specify the column and row coordinates for the 
upper-left corner of the rectangular area that is to be preserved. The 
last two integers specify the width and the height of the rectangle that is to 
be preserved.

</para>





<para id="p1050">
Note that in all four cases, the height of the rectangular area that is to be 
preserved is 256 pixels. This will be important later on with respect to 
scaling two of the images.

</para>





<para id="p1051">
<emphasis id="strong1044" effect="bold">
Returns a reference to a cropped picture

</emphasis>
</para>





<para id="p1052">
The 

<emphasis id="strong1045" effect="bold">
crop

</emphasis>
 method returns a reference to a 

<emphasis id="strong1046" effect="bold">
Picture

</emphasis>
 object that is 
a cropped version of the picture whose reference is passed to the method. 
In each case, the code in 

<link id="a1052" target-id="Listing_3">

Listing 3

</link>

 replaces the 
reference to the original 

<emphasis id="strong1047" effect="bold">
Picture

</emphasis>
 object with the reference to the 
cropped 

<emphasis id="strong1048" effect="bold">
Picture

</emphasis>
 object.

</para>





<para id="p1053">
<emphasis id="strong1049" effect="bold">
Front view of the skater after cropping

</emphasis>
</para>





<para id="p1054">
If you were to display the 

<emphasis id="strong1050" effect="bold">
Picture

</emphasis>
 object referred to by the variable


<emphasis id="strong1051" effect="bold">
front

</emphasis>
 after cropping, you would see the image shown in 


<link id="a1053" target-id="Figure_7">

Figure 7

</link>

.

</para>






<para id="p1055">
<emphasis id="Figure_7" effect="bold">


<emphasis id="strong1052" effect="bold">
<link id="a1054" target-id="Figure_7">

 Figure 7

</link>


</emphasis>
</emphasis>


<emphasis id="strong1053" effect="bold">
 - Front view of the skater after cropping.

</emphasis>
</para>





<para id="p1056">
<media id="media1005" alt="View of the ice skater facing the camera croppoed to exclude all but the ice skater on a green background." display="block">
<image id="img1005" mime-type="image/jpeg" src="../../media/image-f-9275.jpg" width="310" height="386"/>
</media>


</para>




	



<para id="p1057">
<emphasis id="strong1054" effect="bold">
Transparent pixels

</emphasis>
</para>





<para id="p1058">
This is the image that appears as the center ice skater in


<link id="a1055" target-id="Figure_5">

Figure 5

</link>

 after green-screen processing. Note that 
all of the green pixels in 

<link id="a1056" target-id="Figure_7">

Figure 7

</link>

 appear to be 
transparent in 

<link id="a1057" target-id="Figure_5">

Figure 5

</link>

.

</para>





<para id="p1059">
<emphasis id="strong1055" effect="bold">
Remainder of the run method

</emphasis>
</para>





<para id="p1060">
Continuing with the 

<emphasis id="strong1056" effect="bold">
run

</emphasis>
 method, 

<link id="a1058" target-id="Listing_4">

Listing 4

</link>

 
calls the method named 

<emphasis id="strong1057" effect="bold">
greenScreenDraw

</emphasis>
 three times in succession to draw 
the three skater images at specific locations on the snow scene with 
green-screen processing.

</para>



	

<table id="table1004" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. Remainder of the run method.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">

				

<code id="pre1004" display="block">    //Draw the front view of the skater on the snowScene
    // at full size.
    greenScreenDraw(front,snowScene,117,0);

    //Draw the left side view of the skater on the
    // snowScene at half size.
    left = left.getPictureWithHeight(256/2);
    greenScreenDraw(left,snowScene,55,64);

    //Draw the right side view of the skater on the
    // snowScene at one-third size.
    right = right.getPictureWithHeight(256/3);
    greenScreenDraw(right,snowScene,260,96);

    //Display students name on the final output and
    // display it.
    snowScene.addMessage("Display your name here.",10,15);
    snowScene.explore();
    System.out.println(snowScene);
  }//end run method</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1061">
<emphasis id="strong1058" effect="bold">
Two skater images are scaled

</emphasis>
</para>





<para id="p1062">
In two cases in 

<link id="a1059" target-id="Listing_4">

Listing 4

</link>

, the method named 

<emphasis id="strong1059" effect="bold">

getPictureWithHeight

</emphasis>
 is called before calling the 

<emphasis id="strong1060" effect="bold">
greenScreenDraw

</emphasis>
 
method. The 

<emphasis id="strong1061" effect="bold">
getPictureWithHeight

</emphasis>
 method is used to scale two 
of the images to a smaller size as shown in 

<link id="a1060" target-id="Figure_5">

Figure 5

</link>

.

</para>





<para id="p1063">
<emphasis id="strong1062" effect="bold">
The getPictureWithHeight method

</emphasis>
</para>





<para id="p1064">
The 

<emphasis id="strong1063" effect="bold">
getPictureWithHeight

</emphasis>
 method is defined in Ericson's 

<emphasis id="strong1064" effect="bold">

SimplePicture

</emphasis>
 class and inherited into Ericson's 

<emphasis id="strong1065" effect="bold">
Picture

</emphasis>
 class.

</para>





<para id="p1065">
The method requires a single integer input parameter, which specifies the 
height in pixels of a scaled output version of the picture object on which the 
method is called. 

</para>





<para id="p1066">
According to the documentation, the method can be used to create a new 
picture with the specified height. The aspect ratio of the width and height will 
stay the same.

</para>





<para id="p1067">
<emphasis id="strong1066" effect="bold">
Original height is 256 pixels

</emphasis>
</para>





<para id="p1068">
Referring back to the parameters that were passed to the 

<emphasis id="strong1067" effect="bold">
crop

</emphasis>
 method 
in 

<link id="a1061" target-id="Listing_3">

Listing 3

</link>

, you can see the height of all three 
cropped images is 256 pixels.

</para>





<para id="p1069">
<emphasis id="strong1068" effect="bold">
Scale by 1/2 and 1/3

</emphasis>
</para>





<para id="p1070">
Referring to the two calls to the 

<emphasis id="strong1069" effect="bold">
getPictureWithHeight

</emphasis>
 method in 

<link id="a1062" target-id="Listing_4">

Listing 4

</link>

, 
you can see that one of the cropped images was replaced with an image having a 
height of 256/ 2 or 128 pixels. The other cropped image was replaced with 
an image having a height of 256/3 or 85 pixels. You can see the effect of 
this scaling in 

<link id="a1063" target-id="Figure_5">

Figure 5

</link>

.

</para>





<para id="p1071">
The height of one of the images was not changed, which you can also see in


<link id="a1064" target-id="Figure_5">

Figure 5

</link>

.

</para>





<para id="p1072">
<emphasis id="strong1070" effect="bold">
Put the run method on hold

</emphasis>
</para>





<para id="p1073">
I will put the explanation of the 

<emphasis id="strong1071" effect="bold">
run

</emphasis>
 method on temporary hold at this 
point and explain the method named 

<emphasis id="strong1072" effect="bold">
greenScreenDraw

</emphasis>
, which is shown in


<link id="a1065" target-id="Listing_5">

Listing 5

</link>

.

</para>





<para id="p1074">
<emphasis id="strong1073" effect="bold">
Behavior of the greenScreenDraw method

</emphasis>
</para>





<para id="p1075">
The 

<emphasis id="strong1074" effect="bold">
greenScreenDraw 

</emphasis>
method requires four incoming parameters:

</para>





<list id="ul1008" list-type="bulleted">

	

<item id="li1037">
A reference to a source image.

</item>


	

<item id="li1038">
A reference to a destination image

</item>


	

<item id="li1039">
The horizontal coordinate on the destination image where the upper-left 
	corner of the source image will be drawn.

</item>


	

<item id="li1040">
The vertical coordinate on the destination image where the upper-left 
	corner of the source image will be drawn.

</item>




</list>




<para id="p1076">
<emphasis id="strong1075" effect="bold">
Pure green pixels are required for transparency

</emphasis>
</para>





<para id="p1077">
The method draws the source image onto the destination image at the 
specification location. However, pixels having a pure green color are not 
drawn on the destination image. The effect is to make it appear that those 
portions of the source image with pure green pixels become totally transparent 
allowing the pixels belonging to the destination image to show through.

</para>





<para id="p1078">
<emphasis id="strong1076" effect="bold">
jpg image files are not satisfactory for this program

</emphasis>
</para>





<para id="p1079">
<emphasis id="strong1077" effect="bold">
Picture

</emphasis>
 objects created from jpg image files typically won't have a 
pure green background even if they had a pure green background before being 
compressed into the jpg format file. However, the bmp file format does not 
corrupt the pixel colors. Therefore, bmp images work well for this type of 
processing.

</para>





<para id="p1080">
<emphasis id="strong1078" effect="bold">
The greenScreenDraw method

</emphasis>
</para>





<para id="p1081">
The 

<emphasis id="strong1079" effect="bold">
greenScreenDraw

</emphasis>
 method is shown in its entirety in


<link id="a1066" target-id="Listing_5">

Listing 5

</link>

.

</para>



	

<table id="table1005" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

. The greenScreenDraw method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">

				

<code id="pre1005" display="block">  private void greenScreenDraw(
                           Picture source,
                           Picture dest,
                           //Place the upper-left corner
                           // of the source image at the
                           // following location in the
                           // destination image.
                           int destX,
                           int destY){
    int width = source.getWidth();
    int height = source.getHeight();
    Pixel pixel = null;
    Color color = null;

    for(int row = 0;row &lt; height;row++){
      for(int col = 0;col &lt; width;col++){
        color = source.getPixel(col,row).getColor();
        if(!(color.equals(Color.GREEN))){
          pixel = dest.getPixel(destX + col,destY + row);
          pixel.setColor(color);
        }//end if
      }//end inner loop
    }//end outer loop

  }//end greenScreenDraw </code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1082">
<emphasis id="strong1080" effect="bold">
Very similar to earlier methods

</emphasis>
</para>





<para id="p1083">
This method is very similar to other methods that I have explained in earlier 
modules that use nested 

<emphasis id="strong1081" effect="bold">
for

</emphasis>
 loops to draw one image onto another image.

</para>





<para id="p1084">
<emphasis id="strong1082" effect="bold">
The one new thing...

</emphasis>
</para>





<para id="p1085">
The only thing that is really new in


<link id="a1067" target-id="Listing_5">

Listing 5

</link>

 is the 

<emphasis id="strong1083" effect="bold">
if 

</emphasis>
statement 
that tests the color of source image pixels for a value of exactly 

<emphasis id="strong1084" effect="bold">

Color.GREEN

</emphasis>
. If the color of the source pixel does not match that 
color exactly, it is drawn on the destination image replacing the pixel color 
previously at that location on the destination image.

</para>





<para id="p1086">
If the source pixel color does exactly match that color, it is not drawn on 
the destination image thereby leaving the color of the corresponding destination 
pixel unchanged.

</para>





<para id="p1087">



<link id="a1068" target-id="Listing_5">

Listing 5

</link>

 signals the end of the 

<emphasis id="strong1085" effect="bold">
greenScreenDraw

</emphasis>
 method.

</para>





<para id="p1088">
<emphasis id="strong1086" effect="bold">
The weather forecast on television

</emphasis>
</para>





<para id="p1089">
This is roughly how the TV stations superimpose a human weather forecaster 
onto a giant animated weather map. The forecaster is photographed with a 
video camera standing in front of a green or blue screen. At the same 
time, an animated video of the weather map is also created.

</para>





<para id="p1090">
Then each video frame of the forecaster is superimposed onto a video frame of 
the weather map. The green or blue pixels in the forecaster frame are not 
copied onto the weather map frame. This allows the weather map pixels to 
show with the exception of those that are replaced by the pixels that comprise 
the human forecaster. 

<emphasis id="em1007" effect="italics">
(The forecaster must be careful to avoid wearing 
clothing that matches the color of the green or blue screen.)

</emphasis>
</para>





<para id="p1091">
<emphasis id="strong1087" effect="bold">
Returning to the run method

</emphasis>
</para>





<para id="p1092">
When the third call to the 

<emphasis id="strong1088" effect="bold">
greenScreenDraw

</emphasis>
 method returns in


<link id="a1069" target-id="Listing_4">

Listing 4

</link>

, the 

<emphasis id="strong1089" effect="bold">
run

</emphasis>
 method:

</para>





<list id="ul1009" list-type="bulleted">

	

<item id="li1041">
Adds the student's name to the snow scene picture.

</item>


	

<item id="li1042">
Displays the snow scene picture (see 

<link id="a1070" target-id="Figure_5">

Figure 5

</link>

).

</item>


	

<item id="li1043">
Displays information about the snow scene picture on the command line 
	screen.

</item>




</list>




<para id="p1093">
<emphasis id="strong1090" effect="bold">
The end of the program

</emphasis>
</para>





<para id="p1094">
Then the 

<emphasis id="strong1091" effect="bold">
run

</emphasis>
 method in 

<link id="a1071" target-id="Listing_4">

Listing 4

</link>

 returns 
control to the 

<emphasis id="strong1092" effect="bold">
main

</emphasis>
 
method in 

<link id="a1072" target-id="Listing_1">

Listing 1

</link>

 causing the program to terminate.

</para>



	



</section>
<section id="h11005">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>





<para id="p1095">
I encourage you to copy the code from 

<link id="a1073" target-id="Listing_6">

Listing 6

</link>

. 
Compile the code and execute it. Experiment with the code, making changes, and 
observing the results of your changes. Make certain that you can explain why 
your changes behave as they do.

</para>





<para id="p1096">
Click the following links to download the required input images:

</para>





<list id="ol1000" list-type="enumerated">

	

<item id="li1044">
<link id="a1074" url="Prob03a.bmp">

Prob03a.bmp

</link>


</item>


	

<item id="li1045">
<link id="a1075" url="Prob03b.bmp">

Prob03b.bmp

</link>


</item>


	

<item id="li1046">
<link id="a1076" url="Prob03c.bmp">

Prob03c.bmp

</link>


</item>


	

<item id="li1047">
<link id="a1077" url="Prob03d.jpg">

Prob03d.jpg

</link>


</item>




</list>


	

</section>
<section id="h11006">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1097">
In this module, you learned how to write a program to do 

<emphasis id="em1008" effect="italics">
green-screen

</emphasis>
 
processing to superimpose a source image onto a destination image while making 
the green background of the source image appear to be transparent.

</para>





</section>
<section id="h11007">
<title>
<emphasis id="Whats_next" effect="bold">

What's next?

</emphasis>


</title>




<para id="p1098">
You will learn how to darken, brighten, and tint 
the colors in a 

<emphasis id="strong1093" effect="bold">
Picture

</emphasis>
 object in the next module.

</para>






</section>
<section id="h11008">
<title>
<emphasis id="Online_video_links" effect="bold">

Online video links

</emphasis>


</title>





<para id="p1099">
While not a requirement of the course, you can select the following links to view 
optional online video lectures on the material in this 
module.

</para>





<list id="ul1010" list-type="bulleted">

	

<item id="li1048">
<link id="a1078" url="http://www.youtube.com/playlist?list=PLF12CDA1C72ACC167">

ITSE 
	2321 Lecture 08

</link>


<list id="ul1011" list-type="bulleted">

		

<item id="li1049">
<link id="a1079" url="http://www.youtube.com/watch?v=EW6ZEDGJi2w">

Part01

</link>


</item>


		

<item id="li1050">
<link id="a1080" url="http://www.youtube.com/watch?v=JqK_42UnXoI">

Part02

</link>


</item>


		

<item id="li1051">
<link id="a1081" url="http://www.youtube.com/watch?v=4bM6qElbxpc">

Part03

</link>


</item>


	

</list>


	

</item>




</list>


	

</section>
<section id="h11009">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1100">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1094" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1012" list-type="bulleted">

					

<item id="li1052">
Module name: 
Java OOP: Green-Screen Processing

</item>


					

<item id="li1053">
File: Java3016.htm


</item>


					

<item id="li1054">
Published: 08/01/12

</item>



				

</list>


				

</note>

			


		



	





	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1095" effect="bold">
Disclaimers:

</emphasis>
<para id="p1101">
<emphasis id="strong1096" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>



				

<para id="p1102">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>



				

<para id="p1103">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>



				

<para id="p1104">
<emphasis id="strong1097" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>



				

</note>

			


		



	





</section>
<section id="h11010">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1105">
A complete listing of the program discussed in this module is shown in


<link id="a1082" target-id="Listing_6">

Listing 6 

</link>

below.

</para>











<table id="table1006" summary="A table." pgwide="0">
<tgroup cols="1">





<thead id="thead1006">



<row id="tr1012">



<entry id="th1006">



<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

. 

<emphasis id="strong1098" effect="bold">
Complete program listing.

</emphasis>



</entry>



</row>



</thead>





<tbody id="tbody1006">



<row id="tr1013">



<entry id="td1006">



<code id="pre1006" display="block">/*File Prob03 Copyright 2008 R.G.Baldwin
Revised 12/17/08
*********************************************************/
import java.awt.Color;
public class Prob03{
  public static void main(String[] args){
    Prob03Runner obj = new Prob03Runner();
    obj.run();
  }//end main
}//end class Prob03
//======================================================//

class Prob03Runner{

  public Prob03Runner(){//constructor
    System.out.println("Display your name here.");
  }//end constructor
  //----------------------------------------------------//

  public void run(){
    //Instantiate, display and crop the four input
    // images. They must be cropped to remove the Alice
    // runtime window material. The three skater images
    // are also cropped to remove excess blank green
    // background.

    //Note that the three views of the skater are bmp
    // images instead of jpg images in order to preserve
    // the pure green background color. Storing the
    // images as jpg files would corrupt the background
    // color in the low order bits.
    //A view facing the front of the skater.
    Picture front = new Picture("Prob03a.bmp");
    front.explore();
    front = crop(front,123,59,110,256);

    //A view showing the right side of the skater.
    Picture right = new Picture("Prob03b.bmp");
    right.explore();
    right = crop(right,123,59,110,256);

    //A view showing the left side of the skater.
    Picture left = new Picture("Prob03c.bmp");
    left.explore();
    left = crop(left,123,59,110,256);

    //This will be the background for the new picture.
    Picture snowScene = new Picture("Prob03d.jpg");
    snowScene.explore();
    snowScene = crop(snowScene,6,59,344,256);

    //Draw the front view of the skater on the snowScene
    // at full size.
    greenScreenDraw(front,snowScene,117,0);

    //Draw the left side view of the skater on the
    // snowScene at half size.
    left = left.getPictureWithHeight(256/2);
    greenScreenDraw(left,snowScene,55,64);

    //Draw the right side view of the skater on the
    // snowScene at one-third size.
    right = right.getPictureWithHeight(256/3);
    greenScreenDraw(right,snowScene,260,96);

    //Display students name on the final output and
    // display it.
    snowScene.addMessage("Display your name here.",10,15);
    snowScene.explore();
    System.out.println(snowScene);
  }//end run method
  //----------------------------------------------------//

  //Assumes a source image with a pure green background.
  // Copies all non-green pixels from the source image to
  // the destination image at the location explained
  // below. Note that jpg images typically won't have
  // a pure green background even if they had a pure
  // green background before being compressed into the
  // jpg format.  bmp images work well for this.
  private void greenScreenDraw(
                           Picture source,
                           Picture dest,
                           //Place the upper-left corner
                           // of the source image at the
                           // following location in the
                           // destination image.
                           int destX,
                           int destY){
    int width = source.getWidth();
    int height = source.getHeight();
    Pixel pixel = null;
    Color color = null;

    for(int row = 0;row &lt; height;row++){
      for(int col = 0;col &lt; width;col++){
        color = source.getPixel(col,row).getColor();
        if(!(color.equals(Color.GREEN))){
          pixel = dest.getPixel(destX + col,destY + row);
          pixel.setColor(color);
        }//end if
      }//end inner loop
    }//end outer loop

  }//end greenScreenDraw

  //----------------------------------------------------//

  //Crops a Picture object to the given width and height
  // with the upper-left corner located at startCol and
  // startRow.
  private Picture crop(Picture pic,int startCol,
                                   int startRow,
                                   int width,
                                   int height){
    Picture output = new Picture(width,height);

    int colOut = 0;
    int rowOut = 0;
    int col = 0;
    int row = 0;
    Pixel pixel = null;
    Color color = null;
    for(col = startCol;col &lt; startCol+width;col++){
      for(row = startRow;row &lt; startRow+height;row++){
        color = pic.getPixel(col,row).getColor();
        pixel = output.getPixel(colOut,rowOut);
        pixel.setColor(color);
        rowOut++;
      }//end inner loop
      rowOut = 0;
      colOut++;
    }//end outer loop
    return output;
  }//end crop

}//end class Prob03Runner</code>





</entry>



</row>



</tbody>





</tgroup>
</table>




<para id="p1106">
-end- 

</para>







</section>
</content>




</document>