<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Java3126 Java OOP Handling document events on a text field and creating a color swatch</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m44921</md:content-id>
  <md:title>Java3126 Java OOP Handling document events on a text field and creating a color swatch</md:title>
  <md:abstract>Learn how to handle document events on text fields containing color values. Also learn how to create a color swatch.</md:abstract>
  <md:uuid>079f62d3-4b33-4d02-99a8-77eec2426ba9</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1002">
<link id="a1002" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1003">
<link id="a1003" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1004">
<link id="a1004" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1005">
<link id="a1005" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


</item>


	

<item id="li1006">
<link id="a1006" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1007">
<link id="a1007" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1008">
<link id="a1008" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1009">
<link id="a1009" target-id="Miscellaneous">

Miscellaneous

</link>


</item>


	

<item id="li1010">
<link id="a1010" target-id="Complete_program_listing">

Complete program listing

</link>


</item>




</list>


	

	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	

	

<para id="p1000">
This module is one of a series of modules designed to teach you about Object-Oriented Programming (OOP) using Java. 

</para>


	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1001">
I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.

</para>


	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1003" list-type="bulleted">

		

<item id="li1011">
<link id="a1011" target-id="Figure_1">

Figure 1

</link>

. Program output at startup.

</item>


		

<item id="li1012">
<link id="a1012" target-id="Figure_2">

Figure 2

</link>

. Program output after clicking the button.

</item>


		

<item id="li1013">
<link id="a1013" target-id="Figure_3">

Figure 3

</link>

. Program output after entering color values.

</item>


	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1004" list-type="bulleted">

		

<item id="li1014">
<link id="a1014" target-id="Listing_1">

Listing 1

</link>

. The driver class. 

</item>


		

<item id="li1015">
<link id="a1015" target-id="Listing_2">

Listing 2

</link>

. Beginning of the class named Prob13Runner. 

</item>


		

<item id="li1016">
<link id="a1016" target-id="Listing_3">

Listing 3

</link>

. Beginning of constructor for Prob13Runner.

</item>


		

<item id="li1017">
<link id="a1017" target-id="Listing_4">

Listing 4

</link>

. Continue the constructor.

</item>


		

<item id="li1018">
<link id="a1018" target-id="Listing_5">

Listing 5

</link>

. Register a listener object on the button.

</item>


		

<item id="li1019">
<link id="a1019" target-id="Listing_6">

Listing 6

</link>

. Beginning of DocumentListener on Red text field.

</item>


		

<item id="li1020">
<link id="a1020" target-id="Listing_7">

Listing 7

</link>

. The removeUpdate method.

</item>


		

<item id="li1021">
<link id="a1021" target-id="Listing_8">

Listing 8

</link>

. The insertUpdate method.

</item>


		

<item id="li1022">
<link id="a1022" target-id="Listing_9">

Listing 9

</link>

.  The paintColorSwatch method. 

</item>


		

<item id="li1023">
<link id="a1023" target-id="Listing_10">

Listing 10

</link>

. Complete program listing. 

</item>


	

</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>


	

<para id="p1002">
In this module, I will show you how to handle document events on text 
	fields containing color values.

</para>




<para id="p1003">
I will also show you how to create a color swatch that displays the color 
indicated by the color values in the Red, Green, and Blue text fields.

</para>




<para id="p1004">
<emphasis id="strong1000" effect="bold">
Program output at startup

</emphasis>
</para>




<para id="p1005">
<link id="a1024" target-id="Figure_1">

Figure 1

</link>

 shows the program output at 
startup.

</para>




<para id="p1006">
Note that the color values in the Red, Green, and Blue text fields are all 
zero, the color of the square at the right end of the Green panel is black.

</para>




<para id="p1007">
Recall that black is represented by Red, Green, and Blue color values of 
zero.

</para>





<para id="p1008">
<emphasis id="strong1001" effect="bold">
<emphasis id="Figure_1" effect="bold">

Figure 1

</emphasis>

 - Program output at startup.

</emphasis>
</para>




<para id="p1009">
<media id="media1000" alt="Missing image." display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/prob13-01.jpg" width="333" height="106"/>
</media>


</para>


	



<para id="p1010">
<emphasis id="strong1002" effect="bold">
Program output after clicking the button

</emphasis>
</para>




<para id="p1011">
<link id="a1025" target-id="Figure_2">

Figure 2

</link>

 shows the program output after 
clicking the button labeled "Set Green Color."

</para>





<para id="p1012">
<emphasis id="strong1003" effect="bold">
<emphasis id="Figure_2" effect="bold">

Figure 2

</emphasis>

 - Program output after clicking the button.

</emphasis>
</para>




<para id="p1013">
<media id="media1001" alt="Missing image." display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/prob13-02.jpg" width="333" height="106"/>
</media>


</para>


	



<para id="p1014">
Note that in 

<link id="a1026" target-id="Figure_2">

Figure 2

</link>

, 

</para>




<list id="ul1005" list-type="bulleted">

	

<item id="li1024">
the color values in the Red and Blue text fields are zero,

</item>


	

<item id="li1025">
the color value in the Green text field is 255, 

</item>


	

<item id="li1026">
the square 

<emphasis id="em1000" effect="italics">
(color swatch)

</emphasis>
 at the right end of the green panel 
	is green with a black outline

</item>


	

<item id="li1027">
the square is not transparent.

</item>




</list>




<para id="p1015">
Recall that pure green is represented by Red and Blue color values of zero, 
with a Green color value of 255.

</para>




<para id="p1016">
<emphasis id="strong1004" effect="bold">
Program output after entering color values

</emphasis>
</para>




<para id="p1017">
<link id="a1027" target-id="Figure_3">

Figure 3

</link>

 shows the program output after 
manually entering a value of 255 in the Red text field.

</para>




<para id="p1018">
Note that 

</para>




<list id="ul1006" list-type="bulleted">

	

<item id="li1028">
the color values in the Red and Green text fields are 255,

</item>


	

<item id="li1029">
the color value in the Blue text field is 0, and

</item>


	

<item id="li1030">
the square at the right end of the green panel is yellow with a black 
	outline.

</item>




</list>





<para id="p1019">
<emphasis id="strong1005" effect="bold">
<emphasis id="Figure_3" effect="bold">

Figure 3

</emphasis>

 - Program output after entering color values.

</emphasis>
</para>




<para id="p1020">
<media id="media1002" alt="Missing image." display="block">
<image id="img1002" mime-type="image/jpeg" src="../../media/prob13-03.jpg" width="333" height="106"/>
</media>


</para>


	



<para id="p1021">
Recall that pure yellow is represented by Red and Green color values of 255, 
with a Blue color value of zero.

</para>




<para id="p1022">
<emphasis id="strong1006" effect="bold">
Color of square tracks color values in text fields

</emphasis>
</para>




<para id="p1023">
The square 

<emphasis id="em1001" effect="italics">
(color swatch)

</emphasis>
 always has a black outline as shown in


<link id="a1028" target-id="Figure_3">

Figure 3

</link>

.

</para>




<para id="p1024">
The color in the swatch always tracks the color values in the text fields 
regardless of whether those values are changed manually, or they are changed by 
program code.

</para>


	

	

</section>
<section id="h11003">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	

	

<para id="p1025">
A complete listing of the program discussed in this module is provided in
	

<link id="a1029" target-id="Listing_10">

Listing 10

</link>

.

</para>




<para id="p1026">
<emphasis id="strong1007" effect="bold">
Will explain in fragments

</emphasis>
</para>




<para id="p1027">
I will break this program down and explain it in fragments.

</para>




<para id="p1028">
<emphasis id="strong1008" effect="bold">
The driver class

</emphasis>
</para>




<para id="p1029">
The driver class named 

<emphasis id="strong1009" effect="bold">
Prob13

</emphasis>
 is shown in


<link id="a1030" target-id="Listing_1">

Listing 1

</link>

. There is nothing new here.

</para>


	

<table id="table1000" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

 - 

<emphasis id="strong1010" effect="bold">
The driver class.
				

</emphasis>



</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">



<code id="pre1000" display="block">public class Prob13{
  public static void main(String[] args){
    new Prob13Runner();
  }//end main method
}//end class Prob13
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1030">
<emphasis id="strong1011" effect="bold">
Beginning of the class named Prob13Runner

</emphasis>
</para>




<para id="p1031">
The class named 

<emphasis id="strong1012" effect="bold">
Prob13Runner

</emphasis>
 begins in


<link id="a1031" target-id="Listing_2">

Listing 2

</link>

, which declares several instance 
variables and initializes some of them.

</para>


	

<table id="table1001" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

 - 

<emphasis id="strong1013" effect="bold">
Beginning of the 
				class named Prob13Runner

</emphasis>
.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">



<code id="pre1001" display="block">class Prob13Runner extends JFrame{

  private JPanel controlPanel = new JPanel();
  private JPanel colorPanel = new JPanel();
  private JPanel buttonPanel = new JPanel();
  private JPanel colorIndicatorPanel = new JPanel();

  private JTextField redField = new JTextField("000000");
  private JTextField greenField = 
                                 new JTextField("000000");
  private JTextField blueField = new JTextField("000000");
  
  private int redInt = 0;
  private int greenInt = 0;
  private int blueInt = 0;

  private JButton setColorButton = 
                           new JButton("Set Green Color");
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1032">
<emphasis id="strong1014" effect="bold">
Beginning of constructor for Prob13Runner

</emphasis>
</para>




<para id="p1033">
The constructor begins in 

<link id="a1032" target-id="Listing_3">

Listing 3

</link>

. 
The last two statements in 

<link id="a1033" target-id="Listing_3">

Listing 3

</link>

 may 
be new to you.

</para>




<para id="p1034">
The 

<emphasis id="strong1015" effect="bold">
JPanel

</emphasis>
 referred to by 

<emphasis id="strong1016" effect="bold">
colorIndicatorPanel

</emphasis>
 
is the color swatch shown in 

<link id="a1034" target-id="Figure_3">

Figure 3

</link>

.

</para>




<para id="p1035">
The last two statements in 

<link id="a1035" target-id="Listing_3">

Listing 3

</link>

 
control the border color, and the size of the 

<emphasis id="strong1017" effect="bold">
JPanel

</emphasis>
 

<emphasis id="em1002" effect="italics">
(color 
swatch)

</emphasis>
 object.

</para>


	

<table id="table1002" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

 - 

<emphasis id="strong1018" effect="bold">
Beginning of 
				constructor for Prob13Runner.

</emphasis>
</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">



<code id="pre1002" display="block">  public Prob13Runner(){//constructor

    setDefaultCloseOperation(
                           WindowConstants.EXIT_ON_CLOSE);

    controlPanel.setLayout(new GridLayout(2,1));
    controlPanel.add(colorPanel);
    controlPanel.add(buttonPanel);

    colorPanel.setBackground(Color.GREEN);
    colorPanel.add(new JLabel("Red = "));
    colorPanel.add(redField);
    colorPanel.add(new JLabel(" Green = "));
    colorPanel.add(greenField);
    colorPanel.add(new JLabel(" Blue = "));
    colorPanel.add(blueField);
    colorPanel.add(colorIndicatorPanel);

    colorIndicatorPanel.setBorder(
                           new LineBorder(Color.black,1));
    colorIndicatorPanel.setPreferredSize(
                                    new Dimension(20,20));
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1036">
The constructor continues in 

<link id="a1036" target-id="Listing_4">

Listing 4

</link>

.

</para>




<para id="p1037">
There is nothing new in 

<link id="a1037" target-id="Listing_4">

Listing 4

</link>

 with 
the possible exception of the call to the method named 

<emphasis id="strong1019" effect="bold">
paintColorSwatch

</emphasis>
.

</para>




<para id="p1038">
I will explain the method named 

<emphasis id="strong1020" effect="bold">
paintColorSwatch

</emphasis>
 later.

</para>






	

<table id="table1003" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

 - 

<emphasis id="strong1021" effect="bold">
Continue the 
				constructor.

</emphasis>
</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">



<code id="pre1003" display="block">    buttonPanel.setBackground(Color.BLUE);
    buttonPanel.add(setColorButton);
    
    //Color the swatch for the first time.
    paintColorSwatch();

    //Add the controlPanel to the content pane, adjust to
    // the correct size, and set the title.
    getContentPane().add(controlPanel);
    pack();
    setTitle("Dick Baldwin");

    //Make the GUI visible
    setVisible(true);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1039">
<emphasis id="strong1022" effect="bold">
Register listeners on the user input components

</emphasis>
</para>




<para id="p1040">
This program registers event listener objects on four input components:

</para>




<para id="p1041">
One component is the button at the bottom of 

<link id="a1038" target-id="Figure_3">


Figure 3

</link>

 labeled 

<emphasis id="strong1023" effect="bold">
Set Green Color.

</emphasis>
</para>




<para id="p1042">
The other three components are the three text fields labeled 

<emphasis id="strong1024" effect="bold">
Red

</emphasis>
,


<emphasis id="strong1025" effect="bold">
Green

</emphasis>
, and 

<emphasis id="strong1026" effect="bold">
Blue

</emphasis>
 shown in


<link id="a1039" target-id="Figure_3">

Figure 3

</link>

.

</para>




<para id="p1043">
The three event listeners that are registered on the text fields are very 
similar. Therefore, I will explain only one of them. You can view the code for 
the other two in 

<link id="a1040" target-id="Listing_10">

Listing 10

</link>

.

</para>




<para id="p1044">
<emphasis id="strong1027" effect="bold">
Register a listener object on the button

</emphasis>
</para>




<para id="p1045">
<link id="a1041" target-id="Listing_5">

Listing 5

</link>

 registers an ActionListener 
object on the 

<emphasis id="strong1028" effect="bold">
JButton

</emphasis>
 object referred to by 

<emphasis id="strong1029" effect="bold">

setColorButton

</emphasis>
.

</para>




<para id="p1046">
You have seen code like this in numerous previous modules. Therefore, a 
detailed explanation of 

<link id="a1042" target-id="Listing_5">

Listing 5

</link>

 should 
not be required here.

</para>


	

<table id="table1004" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

 - Register a listener 
				object on the button.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">



<code id="pre1004" display="block">    setColorButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
          //Set the color to green.
          redInt = 0;
          greenInt = 255;
          blueInt = 0;
          
          //Show the color values in the text fields.
          redField.setText("" + redInt);
          greenField.setText("" + greenInt);
          blueField.setText("" + blueInt);

        }//end action performed
      }//end new ActionListener
    );//end addActionListener
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1047">
<emphasis id="strong1030" effect="bold">
The DocumentListener interface

</emphasis>
</para>




<para id="p1048">
The 

<emphasis id="strong1031" effect="bold">
DocumentListener

</emphasis>
 interface can be described briefly as 
follows:

</para>




<para id="p1049">
<emphasis id="em1003" effect="italics">
"Interface for an observer to register to receive notifications of 
changes to a text document."

</emphasis>
</para>




<para id="p1050">
This interface is implemented by numerous classes including the 

<emphasis id="strong1032" effect="bold">

JTextField

</emphasis>
 class. As mentioned earlier, the 

<emphasis id="strong1033" effect="bold">
Red

</emphasis>
,


<emphasis id="strong1034" effect="bold">
Green

</emphasis>
, and 

<emphasis id="strong1035" effect="bold">
Blue

</emphasis>
 text fields in


<link id="a1043" target-id="Figure_3">

Figure 3

</link>

 are objects of the 

<emphasis id="strong1036" effect="bold">

JTextField

</emphasis>
 class and therefore implement the 

<emphasis id="strong1037" effect="bold">
DocumentListener

</emphasis>
 
interface.

</para>




<para id="p1051">
<emphasis id="strong1038" effect="bold">
DocumentListener methods

</emphasis>
</para>




<para id="p1052">
The 

<emphasis id="strong1039" effect="bold">
DocumentListener

</emphasis>
 interface declares the follow three 
methods:

</para>




<list id="ul1007" list-type="bulleted">

	

<item id="li1031">
<emphasis id="strong1040" effect="bold">
changedUpdate

</emphasis>
<list id="ul1008" list-type="bulleted">

		

<item id="li1032">
Gives notification that an attribute or set of attributes changed.

</item>


	

</list>


	

</item>


	

<item id="li1033">
<emphasis id="strong1041" effect="bold">
insertUpdate

</emphasis>
<list id="ul1009" list-type="bulleted">

		

<item id="li1034">
Gives notification that there was an insert into the document.

</item>


	

</list>


	

</item>


	

<item id="li1035">
<emphasis id="strong1042" effect="bold">
removeUpdate

</emphasis>
<list id="ul1010" list-type="bulleted">

		

<item id="li1036">
Gives notification that a portion of the document has been removed.

</item>


	

</list>


	

</item>




</list>




<para id="p1053">
Only the 

<emphasis id="strong1043" effect="bold">
insertUpdate

</emphasis>
 and 

<emphasis id="strong1044" effect="bold">
removeUpdate

</emphasis>
 
methods are of interest in this program. Therefore, the 

<emphasis id="strong1045" effect="bold">
changedUpdate

</emphasis>
 
method will be implemented as an empty method.

</para>




<para id="p1054">
<emphasis id="strong1046" effect="bold">
Beginning of DocumentListener

</emphasis>
</para>




<para id="p1055">
<link id="a1044" target-id="Listing_6">

Listing 6

</link>

 shows the beginning of the 
definition, instantiation, and registration of a 

<emphasis id="strong1047" effect="bold">
DocumentListener

</emphasis>
 
object on the object of type 

<emphasis id="strong1048" effect="bold">
Document 

</emphasis>
that is encapsulated in 
the Red text field.

</para>


	

<table id="table1005" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

 - 

<emphasis id="strong1049" effect="bold">
Beginning of 
				DocumentListener on Red text field.

</emphasis>
</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">



<code id="pre1005" display="block">    redField.getDocument().addDocumentListener(
      new DocumentListener(){
      
        public void changedUpdate(DocumentEvent e){
          //Empty method - not needed
        }//end changedUpdate
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1056">
Note that registration of the listener object in this case has an 
	additional level of indirection 

<emphasis id="em1004" effect="italics">
(getDocument)

</emphasis>
 as compared to the 
	registration of the listener on the JButton in 

<link id="a1045" target-id="Listing_5">

Listing 
	5

</link>

. In other words, the listener is not registered on the text field. 
	Instead, it is registered on the document encapsulated in the text field.

</para>


	

<para id="p1057">
This listener will respond when the contents of the text field are 
	modified, either by the program, or by the user.

</para>




<para id="p1058">
<emphasis id="em1005" effect="italics">
(As explained earlier, the 

<emphasis id="strong1050" effect="bold">
changedUpdate

</emphasis>
 method is 
defined as an empty method.)

</emphasis>
</para>




<para id="p1059">
<emphasis id="strong1051" effect="bold">
The removeUpdate method

</emphasis>
</para>




<para id="p1060">
<link id="a1046" target-id="Listing_7">

Listing 7

</link>

 shows the 

<emphasis id="strong1052" effect="bold">

removeUpdate

</emphasis>
 method in its entirety.

</para>


	

<table id="table1006" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

 - The removeUpdate method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">



<code id="pre1006" display="block">        public void removeUpdate(DocumentEvent e){
          try{
            redInt = Integer.parseInt(
                                   redField.getText());
            if((redInt &gt;= 0) &amp;&amp; (redInt &lt;= 255)){
              paintColorSwatch();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end removeUpdate
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1061">
<emphasis id="strong1053" effect="bold">
Behavior of the removeUpdate method

</emphasis>
</para>




<para id="p1062">
<link id="a1047" target-id="Listing_7">

Listing 7

</link>

 calls the static 

<emphasis id="strong1054" effect="bold">

parseInt

</emphasis>
 method of the 

<emphasis id="strong1055" effect="bold">
Integer

</emphasis>
 class to convert the


<emphasis id="strong1056" effect="bold">
String

</emphasis>
 contents of the Red text field into a value of type


<emphasis id="strong1057" effect="bold">
int

</emphasis>
.

</para>




<para id="p1063">
The 

<emphasis id="strong1058" effect="bold">
parseInt

</emphasis>
 method can throw a 

<emphasis id="strong1059" effect="bold">

NumberFormatException

</emphasis>
 if the string does not contain a parsable 
integer.

</para>




<para id="p1064">
The possibility of a 

<emphasis id="strong1060" effect="bold">
NumberFormatException

</emphasis>
, 

<emphasis id="em1006" effect="italics">
(which is a 
checked exception) 

</emphasis>
requires that the call to the 

<emphasis id="strong1061" effect="bold">
parseInt

</emphasis>
 
method be enclosed in a 

<emphasis id="strong1062" effect="bold">
try-catch

</emphasis>
 block.

</para>




<para id="p1065">
In this program, the 

<emphasis id="strong1063" effect="bold">
catch

</emphasis>
 block causes the 

<emphasis id="strong1064" effect="bold">

removeUpdate

</emphasis>
 method to 

<emphasis id="strong1065" effect="bold">
<emphasis id="em1007" effect="italics">
do nothing 

</emphasis>
</emphasis>
if the 
contents of the text field cannot be converted into an 

<emphasis id="strong1066" effect="bold">
int

</emphasis>
, 
which causes a 

<emphasis id="strong1067" effect="bold">
NumberFormatException

</emphasis>
 to be thrown

</para>




<para id="p1066">
If a 

<emphasis id="strong1068" effect="bold">
NumberFormatException

</emphasis>
 exception is not thrown, the 
return value from the 

<emphasis id="strong1069" effect="bold">
parseInt

</emphasis>
 method is stored in an instance 
variable named 

<emphasis id="strong1070" effect="bold">
redInt

</emphasis>
.

</para>




<para id="p1067">
If the value of 

<emphasis id="strong1071" effect="bold">
redInt

</emphasis>
 is between 0 and 255 inclusive,


<link id="a1048" target-id="Listing_7">

Listing 7

</link>

 calls the method named 

<emphasis id="strong1072" effect="bold">

paintColorSwatch

</emphasis>
, causing the color swatch to be repainted, using the


<emphasis id="strong1073" effect="bold">
Red

</emphasis>
 value, along with the 

<emphasis id="strong1074" effect="bold">
Green

</emphasis>
 and 

<emphasis id="strong1075" effect="bold">

Blue

</emphasis>
 values computed elsewhere.

</para>




<para id="p1068">
<emphasis id="strong1076" effect="bold">
The insertUpdate method

</emphasis>
</para>




<para id="p1069">
The 

<emphasis id="strong1077" effect="bold">
insertUpdate

</emphasis>
 method is shown in


<link id="a1049" target-id="Listing_8">

Listing 8

</link>

.

</para>




<para id="p1070">
The behavior of the 

<emphasis id="strong1078" effect="bold">
insertUpdate

</emphasis>
 method is essentially the 
same as the behavior of the 

<emphasis id="strong1079" effect="bold">
removeUpdate

</emphasis>
 method explained 
earlier. Therefore, an explanation of the 

<emphasis id="strong1080" effect="bold">
insertUpdate

</emphasis>
 method 
should not be needed.

</para>


	

<table id="table1007" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Listing_8" effect="bold">

Listing 8

</emphasis>

 - The insertUpdate method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">



<code id="pre1007" display="block">        public void insertUpdate(DocumentEvent e){
          try{
            redInt = Integer.parseInt(
                                   redField.getText());
            if((redInt &gt;= 0) &amp;&amp; (redInt &lt;= 255)){
              paintColorSwatch();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end insertUpdate
        //-------------------------------------------//

      }//end new DocumentListener
    );//end addDocumentListener
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1071">
<emphasis id="strong1081" effect="bold">
The end of the class definition

</emphasis>
</para>




<para id="p1072">
<link id="a1050" target-id="Listing_8">

Listing 8

</link>

 also signals the end of the 
anonymous class definition that began in 

<link id="a1051" target-id="Listing_6">


Listing 6

</link>

.

</para>




<para id="p1073">
<emphasis id="strong1082" effect="bold">
The Green and Blue text fields

</emphasis>
</para>




<para id="p1074">
The Green and Blue text fields are processed using very similar 

<emphasis id="strong1083" effect="bold">

DocumentListener

</emphasis>
 objects as used for the Red text field. You can view 
that code in 

<link id="a1052" target-id="Listing_10">

Listing 10

</link>

.

</para>




<para id="p1075">
That ends the discussion of the constructor for the class named 

<emphasis id="strong1084" effect="bold">

Prob13Runner

</emphasis>
.

</para>




<para id="p1076">
<emphasis id="strong1085" effect="bold">
The method named paintColorSwatch

</emphasis>
</para>




<para id="p1077">
There were earlier references to a method named 

<emphasis id="strong1086" effect="bold">
paintColorSwatch

</emphasis>
. 
The code for the 

<emphasis id="strong1087" effect="bold">
paintColorSwatch

</emphasis>
 method is shown in


<link id="a1053" target-id="Listing_9">

Listing 9

</link>

.

</para>


	

<table id="table1008" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1008">

			

<row id="tr1016">

				

<entry id="th1008">
<emphasis id="Listing_9" effect="bold">

Listing 9

</emphasis>

 - 

<emphasis id="strong1088" effect="bold">
The 
				paintColorSwatch method. 

</emphasis>
</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1008">

			

<row id="tr1017">

				

<entry id="td1008">



<code id="pre1008" display="block">  private void paintColorSwatch(){
    colorIndicatorPanel.setBackground(
                      new Color(redInt,greenInt,blueInt));
  }//end paintColorSwatch
  //----------------------------------------------------//

}//end class Prob13Runner
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1078">
The 

<emphasis id="strong1089" effect="bold">
paintColorSwatch

</emphasis>
 method sets the background color 
	for the 

<emphasis id="strong1090" effect="bold">
JPanel

</emphasis>
 object that represents the color swatch, 
	using values of red, green, and blue that are computed elsewhere in the 
	program.

</para>




<para id="p1079">
<emphasis id="strong1091" effect="bold">
The end of the program

</emphasis>
</para>




<para id="p1080">
<link id="a1054" target-id="Listing_9">

Listing 9

</link>

 also signals the end of the 
class named 

<emphasis id="strong1092" effect="bold">
Prob13Runner

</emphasis>
 and the end of the program.

</para>






</section>
<section id="h11004">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>






<para id="p1081">
I encourage you to copy the code from


<link id="a1055" target-id="Listing_10">

Listing 10

</link>

. Compile the code 
and execute it. Experiment with the code, making changes, and observing the 
results of your changes. Make certain that you can explain why your changes 
behave as they do.

</para>


	

</section>
<section id="h11005">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1082">
In this lesson, you learned how to handle document events on text fields 
containing color values. You also learned how to create a color swatch.

</para>




</section>
<section id="h11006">
<title>
<emphasis id="Whats_next" effect="bold">

What's next?

</emphasis>


</title>




<para id="p1083">
In the next module, you will learn how to use a JColorChooser object to specify a color in any one of five different ways.

</para>


	

</section>
<section id="h11007">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1084">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1093" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1011" list-type="bulleted">

					

<item id="li1037">
Module name: Java OOP: Handling document events on a text field and creating a color swatch

</item>


					

<item id="li1038">
File: Java1326.htm


</item>


					

<item id="li1039">
Published: 09/11/12

</item>




<item id="li1040">
Revised: 02/06/16

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1094" effect="bold">
Disclaimers:

</emphasis>
<para id="p1085">
<emphasis id="strong1095" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1086">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1087">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1088">
<emphasis id="strong1096" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


				

</note>

			


		



	





</section>
<section id="h11008">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1089">
A complete listing of the source code discussed in this module is shown in


<link id="a1056" target-id="Listing_10">

Listing 10

</link>

. 

</para>





<para id="p1090">
<emphasis id="strong1097" effect="bold">
<emphasis id="Listing_10" effect="bold">

Listing 10

</emphasis>

 - Complete 
				program listing.

</emphasis>
</para>





<code id="pre1009" display="block">/*File Prob13 Copyright 2012 R.G.Baldwin

This program handles document events on the contents of
text fields containing color values.

The values are used to create a color swatch that displays
the color indicated by the color values in the red, green,
and blue text fields.
*********************************************************/
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.WindowConstants;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;
import javax.swing.border.LineBorder;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Dimension;

public class Prob13{
  public static void main(String[] args){
    new Prob13Runner();
  }//end main method
}//end class Prob13
//======================================================//

class Prob13Runner extends JFrame{

  private JPanel controlPanel = new JPanel();
  private JPanel colorPanel = new JPanel();
  private JPanel buttonPanel = new JPanel();
  private JPanel colorIndicatorPanel = new JPanel();

  private JTextField redField = new JTextField("000000");
  private JTextField greenField = 
                                 new JTextField("000000");
  private JTextField blueField = new JTextField("000000");
  
  private int redInt = 0;
  private int greenInt = 0;
  private int blueInt = 0;

  private JButton setColorButton = 
                           new JButton("Set Green Color");
  //----------------------------------------------------//

  public Prob13Runner(){//constructor

    setDefaultCloseOperation(
                           WindowConstants.EXIT_ON_CLOSE);

    controlPanel.setLayout(new GridLayout(2,1));
    controlPanel.add(colorPanel);
    controlPanel.add(buttonPanel);

    colorPanel.setBackground(Color.GREEN);
    colorPanel.add(new JLabel("Red = "));
    colorPanel.add(redField);
    colorPanel.add(new JLabel(" Green = "));
    colorPanel.add(greenField);
    colorPanel.add(new JLabel(" Blue = "));
    colorPanel.add(blueField);
    colorPanel.add(colorIndicatorPanel);

    colorIndicatorPanel.setBorder(
                           new LineBorder(Color.black,1));
    colorIndicatorPanel.setPreferredSize(
                                    new Dimension(20,20));

    buttonPanel.setBackground(Color.BLUE);
    buttonPanel.add(setColorButton);
    
    //Color the swatch for the first time.
    paintColorSwatch();

    //Add the controlPanel to the content pane, adjust to
    // the correct size, and set the title.
    getContentPane().add(controlPanel);
    pack();
    setTitle("Dick Baldwin");

    //Make the GUI visible
    setVisible(true);

    //--------------------------------------------------//
    //Register listeners on the user input components.
    //--------------------------------------------------//
    setColorButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
          //Set the color to green.
          redInt = 0;
          greenInt = 255;
          blueInt = 0;
          
          //Show the color values in the text fields.
          redField.setText("" + redInt);
          greenField.setText("" + greenInt);
          blueField.setText("" + blueInt);

        }//end action performed
      }//end new ActionListener
    );//end addActionListener
    //--------------------------------------------------//

    //Register a document listener on the red text field.
    // This listener will respond when the contents of
    // the text field are modified either by the program
    // or by the user.
    redField.getDocument().addDocumentListener(
      new DocumentListener(){
        public void changedUpdate(DocumentEvent e){
          //Empty method - not needed
        }//end changedUpdate

        public void removeUpdate(DocumentEvent e){
          try{
            redInt = Integer.parseInt(
                                   redField.getText());
            if((redInt &gt;= 0) &amp;&amp; (redInt &lt;= 255)){
              paintColorSwatch();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end removeUpdate

        public void insertUpdate(DocumentEvent e){
          try{
            redInt = Integer.parseInt(
                                   redField.getText());
            if((redInt &gt;= 0) &amp;&amp; (redInt &lt;= 255)){
              paintColorSwatch();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end insertUpdate

      }//end new DocumentListener
    );//end addDocumentListener
    //--------------------------------------------------//

    //Register a document listener on the green text
    // field. Essentially the same as the above.
    greenField.getDocument().addDocumentListener(
      new DocumentListener(){
        public void changedUpdate(DocumentEvent e){}

        public void removeUpdate(DocumentEvent e){
          try{
            greenInt = Integer.parseInt(
                                 greenField.getText());
            if((greenInt &gt;= 0) &amp;&amp; (greenInt &lt;= 255))
            {
              paintColorSwatch();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end removeUpdate

        public void insertUpdate(DocumentEvent e){
          try{
            greenInt = Integer.parseInt(
                                 greenField.getText());
            if((greenInt &gt;= 0) &amp;&amp; (greenInt &lt;= 255))
            {
              paintColorSwatch();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end insertUpdate

      }//end new DocumentListener
    );//end addDocumentListener
    //--------------------------------------------------//
    
    //Register a document listener on the blue text
    // field. Essentially the same as the above.
    blueField.getDocument().addDocumentListener(
      new DocumentListener(){
        public void changedUpdate(DocumentEvent e){}

        public void removeUpdate(DocumentEvent e){
          try{
            blueInt = Integer.parseInt(
                                  blueField.getText());
            if((blueInt &gt;= 0) &amp;&amp; (blueInt &lt;= 255)){
              paintColorSwatch();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end removeUpdate

        public void insertUpdate(DocumentEvent e){
          try{
            blueInt = Integer.parseInt(
                                  blueField.getText());
            if((blueInt &gt;= 0) &amp;&amp; (blueInt &lt;= 255)){
              paintColorSwatch();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end insertUpdate

      }//end new DocumentListener
    );//end addDocumentListener
    //--------------------------------------------------//
  }//end constructor
  //----------------------------------------------------//

  //The purpose of this method is to color a swatch 
  // located next to the RGB color values.
  private void paintColorSwatch(){
    colorIndicatorPanel.setBackground(
                      new Color(redInt,greenInt,blueInt));
  }//end paintColorSwatch
  //----------------------------------------------------//


}//end class Prob13Runner</code>


	

<para id="p1091">
-end- 

</para>






</section>
</content>




</document>