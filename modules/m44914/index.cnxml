<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Java3118 Java OOP Controlling an Image-Scaling Program with a Slider</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m44914</md:content-id>
  <md:title>Java3118 Java OOP Controlling an Image-Scaling Program with a Slider</md:title>
  <md:abstract>Learn how to use a slider to continuously change the size of an image and to draw the scaled image onto a background image.</md:abstract>
  <md:uuid>458d5b39-0c2c-4fe7-a6ff-b9162e198514</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1002">
<link id="a1002" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1003">
<link id="a1003" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1004">
<link id="a1004" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1005">
<link id="a1005" target-id="General_background_information">

General background information

</link>


</item>


	

<item id="li1006">
<link id="a1006" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


</item>


	

<item id="li1007">
<link id="a1007" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1008">
<link id="a1008" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1009">
<link id="a1009" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1010">
<link id="a1010" target-id="Miscellaneous">

Miscellaneous

</link>


</item>


	

<item id="li1011">
<link id="a1011" target-id="Complete_program_listing">

Complete program listing

</link>


</item>




</list>


	

	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	

	

<para id="p1000">
This module is one of a series of modules designed to teach you about Object-Oriented Programming (OOP) using Java.

</para>




<para id="p1001">
The program described in this module requires the use of the Guzdial-Ericson 
multimedia class library. You will find download, installation, and usage 
instructions for the library at 

<link id="a1012" url="http://cnx.org/content/m44148/latest/">

Java OOP: The Guzdial-Ericson Multimedia Class Library

</link>

. 

</para>


	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1002">
I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.

</para>


	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1003" list-type="bulleted">

		

<item id="li1012">
<link id="a1013" target-id="Figure_1">

Figure 1

</link>

. Prob09a.jpg. 

</item>


		

<item id="li1013">
<link id="a1014" target-id="Figure_2">

Figure 2

</link>

. Prob09b.jpg. 

</item>


		

<item id="li1014">
<link id="a1015" target-id="Figure_3">

Figure 3

</link>

. Output images.

</item>


	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1004" list-type="bulleted">

		

<item id="li1015">
<link id="a1016" target-id="Listing_1">

Listing 1

</link>

. Register a listener object on the slider.

</item>


		

<item id="li1016">
<link id="a1017" target-id="Listing_2">

Listing 2

</link>

. The method named drawScaledPictureOnPicture. 

</item>


		

<item id="li1017">
<link id="a1018" target-id="Listing_3">

Listing 3

</link>

. Complete program listing. 

</item>


	

</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>


	

<para id="p1003">
The primary objective of this module is to illustrate how to use a slider 
	to continuously change the size of an image and to draw the scaled image 
	onto a background image.

</para>




<para id="p1004">
<emphasis id="strong1000" effect="bold">
Brief program specifications

</emphasis>
</para>




<para id="p1005">
Write a program named 

<emphasis id="strong1001" effect="bold">
Prob09

</emphasis>
 that uses the class definition for the 
class named 

<emphasis id="strong1002" effect="bold">
Prob09

</emphasis>
 shown in 

<link id="a1019" target-id="Listing_3">

Listing 3

</link>

 
and Ericson's media library along with the image files named


<link id="a1020" url="Prob09a.jpg">

Prob09a.jpg

</link>

 

<emphasis id="em1000" effect="italics">
(see 

<link id="a1021" target-id="Figure_1">


Figure 1

</link>

)

</emphasis>
 and 

<link id="a1022" url="Prob09b.jpg">

Prob09b.jpg

</link>

 

<emphasis id="em1001" effect="italics">
(see


<link id="a1023" target-id="Figure_2">

Figure 2

</link>

)

</emphasis>
 to produce the graphic output 
images shown in 

<link id="a1024" target-id="Figure_3">

Figure 3

</link>

.

</para>




<para id="p1006">
<emphasis id="strong1003" effect="bold">
<emphasis id="Figure_1" effect="bold">

Figure 1

</emphasis>

 - Prob09a.jpg.

</emphasis>
</para>




<para id="p1007">
<media id="media1000" alt="Missing image." display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/image-a-3008.jpg" width="320" height="240"/>
</media>


</para>


	


<para id="p1008">
<emphasis id="strong1004" effect="bold">
<emphasis id="Figure_2" effect="bold">

Figure 2

</emphasis>

 - Prob09b.jpg.

</emphasis>
</para>




<para id="p1009">
<media id="media1001" alt="Missing image." display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/image-b-e5de.jpg" width="320" height="240"/>
</media>


</para>



	


<para id="p1010">
<emphasis id="strong1005" effect="bold">
<emphasis id="Figure_3" effect="bold">

Figure 3

</emphasis>

 - Output images.

</emphasis>
</para>




<para id="p1011">
<media id="media1002" alt="Missing image." display="block">
<image id="img1002" mime-type="image/jpeg" src="../../media/image-c-5557.jpg" width="332" height="371"/>
</media>


</para>



	

	

</section>
<section id="h11003">
<title>
<emphasis id="General_background_information" effect="bold">

General 
	background information

</emphasis>


</title>




<para id="p1012">
The overall structure of this program is very similar to a program that I 
explained in an earlier module titled


<link id="a1025" url="http://cnx.org/content/m44913/latest">

Controlling an Edge Detector with 
a Slider

</link>

. The only significant difference between the two programs is 
the code that is executed when the slider fires a 

<emphasis id="strong1006" effect="bold">
ChangeEvent

</emphasis>
.

</para>




<para id="p1013">
I will explain the code that is new and different in this program and refer 
you back to the earlier module for an explanation of the remainder of the code. 
You can view the entire program in 

<link id="a1026" target-id="Listing_3">

Listing 3

</link>

 
near the end of the module. 

</para>


	

	

</section>
<section id="h11004">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	

	

<para id="p1014">
<emphasis id="strong1007" effect="bold">
Register a listener object on the slider

</emphasis>
</para>


	
	

<para id="p1015">
The code in


<link id="a1027" target-id="Listing_1">

Listing 1

</link>

 registers an anonymous listener 
object on the slider.

</para>


	

<table id="table1000" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

 - Register a listener object on the slider.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">



<code id="pre1000" display="block">    slider.addChangeListener(
      new ChangeListener(){
        public void stateChanged(ChangeEvent e){

          //Restore the background image of the butterfly.
          graphics = display.getGraphics();
          graphics.drawImage(
                          butterfly.getImage(),0,0,null);

          drawScaledPictureOnPicture(beach,
                                     display,
                                     slider.getValue());
          display.repaint();
        }//end stateChanged
      }//end new ChangeListener
    );//end addChangeListener
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1016">
Each time the slider fires a 

<emphasis id="strong1008" effect="bold">
ChangeEvent

</emphasis>
, the method named 

<emphasis id="strong1009" effect="bold">

	stateChanged

</emphasis>
 is executed.

</para>




<para id="p1017">
<emphasis id="strong1010" effect="bold">
Behavior of the stateChanged method

</emphasis>
</para>




<para id="p1018">
The 

<emphasis id="strong1011" effect="bold">
stateChanged

</emphasis>
 method restores the background image of the 
butterfly. Then it calls the method named 

<emphasis id="strong1012" effect="bold">
drawScaledPictureOnPicture

</emphasis>
 
to draw a scaled version of the beach on top of the background image using the 
slider value as the scale factor.

</para>




<para id="p1019">
The slider value ranges from 0 to 100. This represents a scale factor 
as a percent of 1.0. In other words, the beach image is never scaled to a 
size that is larger than the size of the original beach image.

</para>




<para id="p1020">
The image of the beach is always aligned with the center of the 

<emphasis id="strong1013" effect="bold">

contentPane

</emphasis>
 of the 

<emphasis id="strong1014" effect="bold">
JFrame

</emphasis>
.

</para>




<para id="p1021">
When the 

<emphasis id="strong1015" effect="bold">
drawScaledPictureOnPicture

</emphasis>
 method returns, the 

<emphasis id="strong1016" effect="bold">
repaint

</emphasis>
 
method is called to cause the new image to be rendered on the computer screen.

</para>




<para id="p1022">
<emphasis id="strong1017" effect="bold">
The method named drawScaledPictureOnPicture

</emphasis>
</para>




<para id="p1023">
The method named 

<emphasis id="strong1018" effect="bold">
drawScaledPictureOnPicture

</emphasis>
 is shown in its entirety 
in 

<link id="a1028" target-id="Listing_2">

Listing 2

</link>

.

</para>


	

<table id="table1001" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

 - The method named drawScaledPictureOnPicture.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">



<code id="pre1001" display="block">  private void drawScaledPictureOnPicture(
                                      Picture source,
                                      Picture dest,
                                      double scaleFactor){

    transform = new AffineTransform();

    double translateX = dest.getWidth()/2
                    - source.getWidth()*scaleFactor/100/2;
    double translateY = dest.getHeight()/2
                  - source.getHeight()*scaleFactor/100/2;;
    transform.translate(translateX,translateY);
    transform.scale(scaleFactor/100.0,scaleFactor/100.0);
    
    //Get the Graphics2D object used to draw on the
    // destination picture.
    g2 = (Graphics2D)dest.getGraphics();

    //Scale and draw the source image on the destination
    // image.
    g2.drawImage(source.getImage(),transform,null);

  }//end drawScaledPictureOnPicture method
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1024">
<emphasis id="strong1019" effect="bold">
Use an affine transform

</emphasis>
</para>




<para id="p1025">
This method uses an affine transform to first translate and then scale the 
source picture and draws the scaled source picture onto the center of the 
destination picture.

</para>




<para id="p1026">
I have published numerous tutorials that explain the use of Affine transforms 
in Java, including 

<link id="a1029" url="http://www.dickbaldwin.com/java/Java358.htm">


Applying Affine Transforms to Picture Objects

</link>

. I won't repeat those 
explanations in this module, but will simply refer you to the earlier tutorials.

</para>




<para id="p1027">
<emphasis id="strong1020" effect="bold">
Keywords for a Google search

</emphasis>
</para>




<para id="p1028">
You can find my other tutorials that explain Affine transforms by using 
Google to search for the following keywords:

</para>




<code id="pre1002" display="block">richard baldwin java affine transform</code>






</section>
<section id="h11005">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>






<para id="p1029">
I encourage you to copy the code from 

<link id="a1030" target-id="Listing_3">


Listing 3

</link>

. Compile the code and execute it. Experiment with the code, 
making changes, and observing the results of your changes. Make certain that 
you can explain why your changes behave as they do.

</para>


	

</section>
<section id="h11006">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1030">
In this module, you learned how to use a slider to continuously change the 
size of an image and to draw the scaled image onto a background image.

</para>




</section>
<section id="h11007">
<title>
<emphasis id="Whats_next" effect="bold">

What's next?

</emphasis>


</title>




<para id="p1031">
In the next module, you will learn how to use a JSlider object along with Affine Transforms to control the rotation of an image.

</para>


	

</section>
<section id="h11008">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1032">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1021" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1005" list-type="bulleted">

					

<item id="li1018">
Module name: Java OOP: Controlling an Image-Scaling Program with a Slider

</item>


					

<item id="li1019">
File: Java3118.htm


</item>


					

<item id="li1020">
Published: 05/13/12

</item>




<item id="li1021">
Revised: 02/06/16

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1022" effect="bold">
Disclaimers:

</emphasis>
<para id="p1033">
<emphasis id="strong1023" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1034">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1035">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1036">
<emphasis id="strong1024" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


				

</note>

			


		



	





</section>
<section id="h11009">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1037">
A complete listing of the program discussed in this module is shown in


<link id="a1031" target-id="Listing_3">

Listing 3

</link>

 below.

</para>





<para id="p1038">
<emphasis id="strong1025" effect="bold">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

 - Complete program listing.

</emphasis>
</para>





<code id="pre1003" display="block">/*File Prob09 Copyright 2008 R.G.Baldwin
Revised 09/13/10

*********************************************************/
import java.awt.geom.AffineTransform;
import java.awt.Graphics2D;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.BorderLayout;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JLabel;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;

public class Prob09{
  //DO NOT MODIFY THE CODE IN THIS CLASS DEFINITION.
  public static void main(String[] args){
    new Prob09Runner();
  }//end main method
}//end class Prob09
//End program specifications.
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

/*------------------------------------------------------//

*********************************************************/
class Prob09Runner extends JFrame{

  private JPanel mainPanel = new JPanel();
  private JPanel titlePanel = new JPanel();
  private JSlider slider = new JSlider(0,100,0);

  private Picture beach = new Picture("Prob09a.jpg");
  private Picture butterfly = new Picture("Prob09b.jpg");

  private int beachWidth = beach.getWidth();
  private int beachHeight = beach.getHeight();

  private Picture display =
            new Picture(beachWidth,beachHeight);

  private Image image = null;
  private Graphics graphics = null;
  private AffineTransform transform = null;
  private Graphics2D g2 = null;

  public Prob09Runner(){//constructor

    System.out.println("Dick Baldwin");
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    beach.addMessage("Dick Baldwin",10,20);
    butterfly.addMessage("Dick Baldwin",10,20);

    slider.setMajorTickSpacing(10);
    slider.setMinorTickSpacing(5);
    slider.setPaintTicks(true);
    slider.setPaintLabels(true);

    mainPanel.setLayout(new BorderLayout());
    titlePanel.add(new JLabel(
                          "Percent Size of Beach Image"));
    mainPanel.add(titlePanel,BorderLayout.NORTH);
    mainPanel.add(slider,BorderLayout.CENTER);

    getContentPane().add(mainPanel);
    //pack();
    setSize(beachWidth + 7,97);
    setTitle("Dick Baldwin");
    setLocation(0,beachHeight + 25);
    setVisible(true);

    //Draw and display the background image of the
    // butterfly.
    graphics = display.getGraphics();
    graphics.drawImage(butterfly.getImage(),0,0,null);

    display.show();
    //--------------------------------------------------//
    //Register an anonymous listener object on the slider.
    //Each time the slider fires a ChangeEvent, this event
    // handler restores the background image of the
    // butterfly. Then it draws a scaled version of the
    // beach on top of the background image using the
    // slider value, which ranges from 0 to 100 as the
    // scale factor as a percent of 1.0. The image of the
    // beach is always aligned with the center
    // of the contentPane of the JFrame.
    slider.addChangeListener(
      new ChangeListener(){
        public void stateChanged(ChangeEvent e){

          //Restore the background image of the butterfly.
          graphics = display.getGraphics();
          graphics.drawImage(
                          butterfly.getImage(),0,0,null);

          drawScaledPictureOnPicture(beach,
                                     display,
                                     slider.getValue());
          display.repaint();
        }//end stateChanged
      }//end new ChangeListener
    );//end addChangeListener
    //--------------------------------------------------//
  }//end constructor
  //----------------------------------------------------//

  //Scales and draws the source picture onto the center
  // of the destination picture.
  private void drawScaledPictureOnPicture(
                                      Picture source,
                                      Picture dest,
                                      double scaleFactor){

    transform = new AffineTransform();

    double translateX = dest.getWidth()/2
                    - source.getWidth()*scaleFactor/100/2;
    double translateY = dest.getHeight()/2
                  - source.getHeight()*scaleFactor/100/2;;
    transform.translate(translateX,translateY);
    transform.scale(scaleFactor/100.0,scaleFactor/100.0);
    
    //Get the Graphics2D object used to draw on the
    // destination picture.
    g2 = (Graphics2D)dest.getGraphics();

    //Scale and draw the source image on the destination
    // image.
    g2.drawImage(source.getImage(),transform,null);

  }//end drawScaledPictureOnPicture method
}//end class Prob09Runner
</code>



	

<para id="p1039">
-end- 

</para>






</section>
</content>




</document>