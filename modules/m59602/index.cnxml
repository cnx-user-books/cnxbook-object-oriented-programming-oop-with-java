<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Java082 Sharing a Listener Object Among Visual Components</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m59602</md:content-id>
  <md:title>Java082 Sharing a Listener Object Among Visual Components</md:title>
  <md:abstract>Previous lessons discussed the sharing of a single event Source object among two or more Listener objects for low-level events. This lesson discusses the sharing of a single Listener object among two or more visual components for low-level events generated by any of the visual components.</md:abstract>
  <md:uuid>db3aca9d-39d3-4c38-96e2-ac3df0fe08f3</md:uuid>
</metadata>

<content>






<para id="p1000">
Revised: Thu Jul 07 15:48:00 CDT 2016

</para>




<para id="p1001">
<emphasis id="em1000" effect="italics">
This page is included in the following Books:

</emphasis>
</para>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">

	

<link id="a1000" url="http://cnx.org/contents/Rl23r3Lw">


<emphasis id="em1001" effect="italics">
ITSE2317 - Java Programming (Intermediate)

</emphasis>
</link>


</item>


	

<item id="li1001">

	

<link id="a1001" url="http://cnx.org/contents/-2RmHFs_">


<emphasis id="em1002" effect="italics">
Object-Oriented Programming (OOP) with Java 
	

</emphasis>
 
	

</link>

 

</item>




</list>














<section id="h11000">
<title>
<emphasis id="Table_of_contents" effect="bold">

Table of contents

</emphasis>


</title>






<list id="ul1001" list-type="bulleted">
<item id="li1002">
<link id="a1002" target-id="Table_of_contents">

Table of contents

</link>




</item>


<item id="li1003">
<link id="a1003" target-id="Preface">

Preface

</link>




<list id="ul1002" list-type="bulleted">
<item id="li1004">
<link id="a1004" target-id="Viewing_tip">

Viewing tip

</link>




<list id="ul1003" list-type="bulleted">
<item id="li1005">
<link id="a1005" target-id="Figures">

Figures

</link>




</item>


<item id="li1006">
<link id="a1006" target-id="Listings">

Listings

</link>




</item>


</list>


</item>


</list>


</item>


<item id="li1007">
<link id="a1007" target-id="Introduction">

Introduction

</link>




</item>


<item id="li1008">
<link id="a1008" target-id="First_sample_program">

First sample program

</link>




<list id="ul1004" list-type="bulleted">
<item id="li1009">
<link id="a1009" target-id="Interesting_code_fragments">

Interesting code fragments

</link>




<list id="ul1005" list-type="bulleted">
<item id="li1010">
<link id="a1010" target-id="The_Event_Source_Objects">

The Event Source Objects

</link>




</item>


<item id="li1011">
<link id="a1011" target-id="Unique_names">

Unique names

</link>




</item>


<item id="li1012">
<link id="a1012" target-id="Instantiate_and_register_mouse_listener_object">

Instantiate and 
register mouse listener object

</link>




</item>


<item id="li1013">
<link id="a1013" target-id="Instantiate_and_register_window_listener_object">

Instantiate and register 
window listener object

</link>




</item>


<item id="li1014">
<link id="a1014" target-id="The_MouseListener_object">

The MouseListener object

</link>




</item>


<item id="li1015">
<link id="a1015" target-id="Identify_the_event_source">

Identify the event source

</link>




</item>


<item id="li1016">
<link id="a1016" target-id="Cracking_the_MouseEvent_object">

Cracking the MouseEvent object

</link>




</item>


<item id="li1017">
<link id="a1017" target-id="The_WindowListener_Object">

The WindowListener Object

</link>




</item>


</list>


</item>


<item id="li1018">
<link id="a1018" target-id="Complete_program_listing_for_Event10">

Complete program listing for Event10

</link>




</item>


</list>


</item>


<item id="li1019">
<link id="a1019" target-id="Another_sample_program">

Second sample program

</link>




<list id="ul1006" list-type="bulleted">
<item id="li1020">
<link id="a1020" target-id="Changes_relative_to_Event10">

Changes relative to Event10

</link>




</item>


<item id="li1021">
<link id="a1021" target-id="Complete_program_listing_for_Event11">

Complete program listing for 
Event11

</link>




</item>


</list>


</item>


<item id="li1022">
<link id="a1022" target-id="Review">

Review

</link>




<list id="ul1007" list-type="bulleted">
<item id="li1023">
<link id="a1023" target-id="Question_1">

Question 1

</link>




</item>


<item id="li1024">
<link id="a1024" target-id="Question_2">

Question 2

</link>




</item>


<item id="li1025">
<link id="a1025" target-id="Question_3">

Question 3

</link>




</item>


<item id="li1026">
<link id="a1026" target-id="Question_4">

Question 4

</link>




</item>


</list>


</item>


<item id="li1027">
<link id="a1027" target-id="Miscellaneous">

Miscellaneous

</link>




</item>


</list>




	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	
	

<para id="p1002">
This is a page from the 
	

<link id="a1028" url="http://cnx.org/contents/Rl23r3Lw:qfO9iJX-">

Event Handling

</link>

 
	section of the book titled
	

<link id="a1029" url="http://cnx.org/contents/Rl23r3Lw:JVTd7bX1">

ITSE2317 - Java Programming (Intermediate)

</link>

. The 
	

<emphasis id="strong1000" effect="bold">
Event Handling

</emphasis>
 section explains how to write programs that handle 
	events in Java. 

</para>





<para id="p1003">
Students in Prof. Baldwin's 

<emphasis id="strong1001" effect="bold">
ITSE 2327 Intermediate Java Programming

</emphasis>
 
classes at ACC are responsible for knowing and understanding all of the material 
in this lesson. 

</para>



	
	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1004">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the Figures 
and Listings while you are reading about them.

</para>



	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>







<list id="ul1008" list-type="bulleted">



<item id="li1028">
<link id="a1030" target-id="Figure_1">

Figure 1.

</link>


 Screen output from Event10.


</item>




<item id="li1029">
<link id="a1031" target-id="Figure_2">

Figure 2.

</link>


 Screen output from Event11.


</item>




<item id="li1030">
<link id="a1032" target-id="Figure_3">

Figure 3.

</link>


 Screen output for Question 1.


</item>




<item id="li1031">
<link id="a1033" target-id="Figure_4">

Figure 4.

</link>


 Screen output for Question 2.


</item>




</list>




	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>








<list id="ul1009" list-type="bulleted">



<item id="li1032">
<link id="a1034" target-id="Listing_1">

Listing 1.

</link>


 An event source object.


</item>




<item id="li1033">
<link id="a1035" target-id="Listing_2">

Listing 2.

</link>


 Give the source objects unique names.


</item>




<item id="li1034">
<link id="a1036" target-id="Listing_3">

Listing 3.

</link>


 Instantiate and register mouse listener 
object.


</item>




<item id="li1035">
<link id="a1037" target-id="Listing_4">

Listing 4.

</link>


 Instantiate and register window listener object.


</item>




<item id="li1036">
<link id="a1038" target-id="Listing_5">

Listing 5.

</link>


 Identify the event source.


</item>




<item id="li1037">
<link id="a1039" target-id="Listing_6">

Listing 6.

</link>


 The program named Event10.


</item>




<item id="li1038">
<link id="a1040" target-id="Listing_7">

Listing 7.

</link>


 The program named Event11.


</item>




<item id="li1039">
<link id="a1041" target-id="Listing_8">

Listing 8.

</link>

 Solution to Question 1.


</item>




<item id="li1040">
<link id="a1042" target-id="Listing_9">

Listing 9.

</link>

 Solution to Question 2.


</item>




<item id="li1041">
<link id="a1043" target-id="Listing_10">

Listing 10.

</link>

 Solution to Question 3.


</item>




<item id="li1042">
<link id="a1044" target-id="Listing_11">

Listing 11.

</link>

 Solution to Question 4.


</item>




</list>






</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Introduction" effect="bold">

Introduction

</emphasis>


</title>




<para id="p1005">
Earlier lessons discussed the sharing of a single event 

<emphasis id="em1003" effect="italics">
source

</emphasis>
 
object among two or more 

<emphasis id="em1004" effect="italics">
listener

</emphasis>
 objects for 

<emphasis id="em1005" effect="italics">
low-level 

</emphasis>

events.

</para>





<para id="p1006">
This lesson discusses the sharing of a single listener object among two 
or more visual components for 

<emphasis id="em1006" effect="italics">
low-level events

</emphasis>
 generated by any of the 
visual components. 

</para>





<para id="p1007">
The event-handling method of the listener object 

</para>





<list id="ul1010" list-type="bulleted">

	

<item id="li1043">
responds to each event,

</item>


	

<item id="li1044">
determines which visual component generated the event, and

</item>


	

<item id="li1045">
takes the appropriate action.

</item>




</list>




<para id="p1008">
The primary issue in this type of operation boils down to determining which 
component generated the event. 

</para>





<para id="p1009">
This can be accomplished by assigning a unique name to each visual component when 
it is instantiated and using that name to distinguish among the visual 
components when an event occurs. 

</para>





<para id="p1010">
This approach is completely straightforward and intuitive. An improved 
approach to accomplishing the same objective is illustrated in some sample 
programs near the end of the lesson. While possibly less intuitive, the improved 
approach is more object-oriented and probably easier to maintain. 

</para>



	
	

</section>
<section id="h11003">
<title>
<emphasis id="First_sample_program" effect="bold">

First sample program

</emphasis>


</title>


	
	

<para id="p1011">
This program illustrates the sharing of a single listener object among 
	two different visual components of the same type. 

</para>





<para id="p1012">
The program detects mouse events occurring on either of two different 

<emphasis id="strong1002" effect="bold">
Frame

</emphasis>
 objects. It distinguishes between the two objects on the basis 
of the component name, and displays the coordinates of a mouse click on 
whichever object experienced the mouse click. 

</para>





<para id="p1013">
This program was originally tested using JDK 1.1.3 under Win95. More recently 
it was tested using Java 8 and Windows 7.

</para>





<para id="p1014">
Note that when the program starts, the two visual components overlay one 
another. It is necessary to physically move one of them in order to access the 
other as shown in 

<link id="a1045" target-id="Figure_1">

 Figure 1

</link>

. 

</para>






<note id="note1000" type="">



 












<emphasis id="Figure_1" effect="bold">

Figure 1.

</emphasis>

 Screen output from Event10.


<para id="p1015">
<media id="media1000" alt="Missing image" display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/event10a.jpg" width="617" height="212"/>
</media>


</para>





</note>




















<section id="h21001">
<title>
<emphasis id="Interesting_code_fragments" effect="bold">

Interesting code fragments

</emphasis>


</title>





<para id="p1016">
This program is really quite simple. The only new code involves cracking the 
event object to obtain the name of the visual component that generated the


<emphasis id="strong1003" effect="bold">
mousePressed

</emphasis>
 event. 

</para>





<para id="p1017">
The 

<emphasis id="strong1004" effect="bold">
main

</emphasis>
 method instantiates an object of type 

<emphasis id="strong1005" effect="bold">
GUI

</emphasis>



<emphasis id="em1007" effect="italics">
(named gui)

</emphasis>
 which serves the purpose of providing the visual interface.


</para>





<para id="p1018">
The 

<emphasis id="strong1006" effect="bold">
Frame 

</emphasis>
class is 

<emphasis id="em1008" effect="italics">
extended 

</emphasis>
into a new class named


<emphasis id="strong1007" effect="bold">
MyFrame 

</emphasis>
to make it possible to override the 

<emphasis id="strong1008" effect="bold">
paint

</emphasis>
 
method of the class. This is necessary to display the coordinates of mouse 
clicks on the interior of the frame using the graphics method named 

<emphasis id="strong1009" effect="bold">

drawString

</emphasis>
. 

</para>





<section id="h31002">
<title>
<emphasis id="The_Event_Source_Objects" effect="bold">

The Event Source Objects

</emphasis>


</title>




<para id="p1019">
The constructor of the 

<emphasis id="strong1010" effect="bold">
GUI

</emphasis>
 class instantiates two objects of 
type 

<emphasis id="strong1011" effect="bold">
MyFrame 

</emphasis>
and makes them visible. This is accomplished using 
code such as that shown in 

<link id="a1046" target-id="Listing_1">

 Listing 1

</link>

.

</para>






<note id="note1001" type="">



 











<emphasis id="Listing_1" effect="bold">

Listing 1.

</emphasis>

 An event source object.


<code id="pre1000" display="block">
    MyFrame myFrame1 = new MyFrame("Frame1");
    myFrame1.setVisible(true);
</code>




</note>















<para id="p1020">
The reference variables for the two objects are named 

<emphasis id="strong1012" effect="bold">
myFrame1

</emphasis>
 
and 

<emphasis id="strong1013" effect="bold">
myFrame2

</emphasis>
.

</para>





</section>
<section id="h31003">
<title>
<emphasis id="Unique_names" effect="bold">

Unique names

</emphasis>


</title>




<para id="p1021">
When they are instantiated, unique names 

<emphasis id="em1009" effect="italics">
(

<emphasis id="strong1014" effect="bold">
Frame1

</emphasis>
 and 


<emphasis id="strong1015" effect="bold">
Frame2

</emphasis>
)

</emphasis>
 are given to the objects using code in the 
constructor 

<emphasis id="em1010" effect="italics">
(see 

<link id="a1047" target-id="Listing_2">

 Listing 2

</link>

)

</emphasis>
 for the extended 

<emphasis id="strong1016" effect="bold">
Frame 

</emphasis>
objects 

<emphasis id="em1011" effect="italics">
(the 

</emphasis>



<emphasis id="strong1017" effect="bold">
<emphasis id="em1012" effect="italics">
MyFrame 

</emphasis>
</emphasis>
<emphasis id="em1013" effect="italics">
class extends the 

</emphasis>
<emphasis id="strong1018" effect="bold">
<emphasis id="em1014" effect="italics">
Frame


</emphasis>
</emphasis>
<emphasis id="em1015" effect="italics">
class in order to override its 

</emphasis>
<emphasis id="strong1019" effect="bold">
<emphasis id="em1016" effect="italics">
paint

</emphasis>
</emphasis>
<emphasis id="em1017" effect="italics">
 
method).

</emphasis>
 

</para>










<note id="note1002" type="">



 











<emphasis id="Listing_2" effect="bold">

Listing 2.

</emphasis>

 Give the source objects unique names.


<code id="pre1001" display="block">
  MyFrame(String name){//constructor
    setTitle("Copyright 1997, R.G.Baldwin");
    setSize(300,200);
    //Name used to distinguish between the two objects
    setName(name);
  }//end constructor
</code>




</note>















<para id="p1022">
The unique names are used later by the listener object to determine which 
object generated a mouse event. 

</para>





</section>
<section id="h31004">
<title>
<emphasis id="Instantiate_and_register_mouse_listener_object" effect="bold">

Instantiate and 
register mouse listener object

</emphasis>


</title>




<para id="p1023">
The constructor in the 

<emphasis id="strong1020" effect="bold">
GUI

</emphasis>
 class also uses the code in 


<link id="a1048" target-id="Listing_3">

 Listing 3

</link>

 to instantiate a single listener object which will process low-level 
mouse events on either of the two visual objects. 

</para>









<note id="note1003" type="">



 











<emphasis id="Listing_3" effect="bold">

Listing 3.

</emphasis>

 Instantiate and register mouse listener 
object.


<code id="pre1002" display="block">
    MouseProc mouseProcCmd = new MouseProc(myFrame1,myFrame2);
    myFrame1.addMouseListener(mouseProcCmd);
    myFrame2.addMouseListener(mouseProcCmd);
</code>




</note>















<para id="p1024">
The first statement in 

<link id="a1049" target-id="Listing_3">

 Listing 3

</link>

 instantiates the new listener object named 

<emphasis id="strong1021" effect="bold">
mouseProcCmd

</emphasis>
 passing references to the two visual components as 
parameters. 

</para>





<para id="p1025">
The next two statements add that listener object (

<emphasis id="em1018" effect="italics">
register

</emphasis>
 the 
listener object) to a list of listener objects that are automatically notified 
whenever mouse events occur on the visual objects referred to as 

<emphasis id="strong1022" effect="bold">

myFrame1

</emphasis>
 and 

<emphasis id="strong1023" effect="bold">
myFrame2

</emphasis>
, respectively. 

</para>





<para id="p1026">
You will recall that once the programmer causes the name of a listener object 
to be added to the list, no further programming effort is required to cause the 
notification to occur. 

</para>





<para id="p1027">
The notifications are carried out by invoking specific overridden instance 
methods of the listener object upon the occurrence of a specific types of mouse 
events. 

</para>





<para id="p1028">
The declarations for all of the methods that match up with all of the 
possible mouse event types are defined by the 

<emphasis id="strong1024" effect="bold">
MouseListener

</emphasis>
 
interface that matches the 

<emphasis id="strong1025" effect="bold">
MouseEvent

</emphasis>
  class. 

</para>





<para id="p1029">
The class from which the listener object is instantiated 
must define, either directly or indirectly, all the methods declared in the


<emphasis id="strong1026" effect="bold">
MouseListener

</emphasis>
 interface. 

</para>





</section>
<section id="h31005">
<title>
<emphasis id="Instantiate_and_register_window_listener_object" effect="bold">

Instantiate and register 
window listener object

</emphasis>


</title>




<para id="p1030">
In addition to the 

<emphasis id="em1019" effect="italics">
registration

</emphasis>
 of the 

<emphasis id="strong1027" effect="bold">
MouseListener

</emphasis>
 
object to receive mouse events, the program also instantiates and 

<emphasis id="em1020" effect="italics">
registers

</emphasis>
 
a listener object that monitors for 

<emphasis id="strong1028" effect="bold">
Window

</emphasis>
  events and 
terminates the program whenever the user closes either of the two visual 
objects. In this case, the code in the listener object makes no attempt to 
distinguish between the two visual objects. The instantiation and registration 
code is shown in 

<link id="a1050" target-id="Listing_4">

 Listing 4

</link>

. 

</para>









<note id="note1004" type="">



 











<emphasis id="Listing_4" effect="bold">

Listing 4.

</emphasis>

 Instantiate and register window listener object.


<code id="pre1003" display="block">
    WProc1 winProcCmd1 = new WProc1();
    myFrame1.addWindowListener(winProcCmd1);
    myFrame2.addWindowListener(winProcCmd1);
</code>




</note>















</section>
<section id="h31006">
<title>
<emphasis id="The_MouseListener_object" effect="bold">

The MouseListener object

</emphasis>


</title>




<para id="p1031">
Most of the programming complexity is tied up in the 

<emphasis id="strong1029" effect="bold">
mouseListener


</emphasis>
object, and even that isn't very complicated. 

</para>





<para id="p1032">
The central issue for the code in the listener object is how 
to determine which one of several visual components generated an event. 

</para>





<para id="p1033">
This particular listener object only responds to 

<emphasis id="strong1030" effect="bold">

mousePressed

</emphasis>
 events, but the following information applies to all of 
the different types of mouse events, and probably to most or all of the 
low-level events as well. 

</para>





<para id="p1034">
The 

<emphasis id="strong1031" effect="bold">
MouseProc

</emphasis>
 

<emphasis id="em1021" effect="italics">
(listener)

</emphasis>
 class in this program 

</para>





<list id="ul1011" list-type="bulleted">

	

<item id="li1046">
extends the 

<emphasis id="strong1032" effect="bold">
MouseAdapter

</emphasis>
 class and

</item>


	

<item id="li1047">
overrides the 

<emphasis id="strong1033" effect="bold">
mousePressed

</emphasis>
 method that is declared in 
	the 

<emphasis id="strong1034" effect="bold">
MouseListener 

</emphasis>
interface.

</item>




</list>




<para id="p1035">
You will recall that the 

<emphasis id="strong1035" effect="bold">
MouseAdapter

</emphasis>
 class overrides all of 
the methods of the 

<emphasis id="strong1036" effect="bold">
MouseListener 

</emphasis>
interface with empty methods, 
thus freeing our code from the requirement to override all of those methods.

</para>





<para id="p1036">
When the 

<emphasis id="strong1037" effect="bold">
mousePressed

</emphasis>
 method is invoked, an object of type


<emphasis id="strong1038" effect="bold">
MouseEvent

</emphasis>
 

<emphasis id="em1022" effect="italics">
(known locally as 

<emphasis id="strong1039" effect="bold">
e

</emphasis>
)

</emphasis>
 is 
passed in as a parameter. 

</para>





</section>
<section id="h31007">
<title>
<emphasis id="Identify_the_event_source" effect="bold">

Identify the event source

</emphasis>


</title>




<para id="p1037">
The statement in 

<link id="a1051" target-id="Listing_5">

 Listing 5

</link>

 was used in the 

<emphasis id="strong1040" effect="bold">
MouseListener 

</emphasis>
object 
to determine if the name of the object that generated the event is 

<emphasis id="strong1041" effect="bold">

Frame1

</emphasis>
. 

</para>










<note id="note1005" type="">



 











<emphasis id="Listing_5" effect="bold">

Listing 5.

</emphasis>

 Identify the event source.


<code id="pre1004" display="block">
if( e.getComponent().getName().compareTo("Frame1") == 0 ){
</code>




</note>















<para id="p1038">
If it is determined that the name of the component that generated the event 
is 

<emphasis id="strong1042" effect="bold">
Frame1

</emphasis>
, code is executed to display the coordinates of the 
mouse pointer on the visual object named 

<emphasis id="strong1043" effect="bold">
Frame1

</emphasis>
. 

</para>





<para id="p1039">
Otherwise, an 

<emphasis id="strong1044" effect="bold">
else

</emphasis>
 clause is used to display the coordinate 
information on the visual object named 

<emphasis id="strong1045" effect="bold">
Frame2

</emphasis>
. 

<emphasis id="em1023" effect="italics">
(No provisions 
were made for the event to have been generated by any visual objects other than 
these two.) 

</emphasis>
 

</para>





<para id="p1040">
The code to display the coordinate information is essentially the same as was 
discussed in a similar program in an earlier lesson, so it won't be 
discussed again here. 

</para>





</section>
<section id="h31008">
<title>
<emphasis id="Cracking_the_MouseEvent_object" effect="bold">

Cracking the MouseEvent object

</emphasis>


</title>




<para id="p1041">
Now let's take a look at the details of cracking the 

<emphasis id="strong1046" effect="bold">
MouseEvent

</emphasis>
 object to 
obtain the name of the visual component that generated the event. 

</para>





<para id="p1042">
The 

<emphasis id="strong1047" effect="bold">
getComponent

</emphasis>
 method is a method of the 

<emphasis id="strong1048" effect="bold">

java.awt.event.ComponentEvent

</emphasis>
 class which, according to the JDK 1.1 
documentation, 

<emphasis id="em1024" effect="italics">
"Returns the component where this event originated." 

</emphasis>
It 
is returned as an object of type 

<emphasis id="strong1049" effect="bold">
Component 

</emphasis>
which is acted upon 
by the 

<emphasis id="strong1050" effect="bold">
getName

</emphasis>
 method in 

<link id="a1052" target-id="Listing_5">

 Listing 5

</link>

. 

</para>





<para id="p1043">
The 

<emphasis id="strong1051" effect="bold">
getName

</emphasis>
 method was added to the 

<emphasis id="strong1052" effect="bold">

java.awt.Component

</emphasis>
 class by JDK 1.1. This method 

<emphasis id="em1025" effect="italics">
"Gets the name of 
the component"

</emphasis>
 and returns it as a 

<emphasis id="strong1053" effect="bold">
String 

</emphasis>
object. The


<emphasis id="strong1054" effect="bold">
String 

</emphasis>
object is acted upon by the 

<emphasis id="strong1055" effect="bold">
compareTo

</emphasis>
 
method in 

<link id="a1053" target-id="Listing_5">

 Listing 5

</link>

. 

</para>





<para id="p1044">
The 

<emphasis id="strong1056" effect="bold">
compareTo

</emphasis>
 method is a standard method of the 

<emphasis id="strong1057" effect="bold">

String

</emphasis>
 class, carried forward from JDK 1.0.2, that can be used to 
compare two 

<emphasis id="strong1058" effect="bold">
String 

</emphasis>
objects. It is used to determine if the name 
of the component matches the String "

<emphasis id="em1026" effect="italics">
Frame1"

</emphasis>
. 

</para>





<para id="p1045">
Note that it is also possible to perform tests directly on the 

<emphasis id="strong1059" effect="bold">

MouseEvent 

</emphasis>
object to match it to a component name. The procedure for 
doing this will be included in a future lesson. 

</para>





<para id="p1046">
By the way, in case you haven't noticed, the 

<emphasis id="strong1060" effect="bold">
java.awt.event

</emphasis>
 
package is different from the 

<emphasis id="strong1061" effect="bold">
java.awt

</emphasis>
 package. The 

<emphasis id="strong1062" effect="bold">

java.awt.event

</emphasis>
 package was added in JDK 1.1. It can be very confusing 
if you drop into the 

<emphasis id="strong1063" effect="bold">
java.awt

</emphasis>
 package of the documentation when 
you really need to be in 

<emphasis id="strong1064" effect="bold">
java.awt.event

</emphasis>
. 

</para>





</section>
<section id="h31009">
<title>
<emphasis id="The_WindowListener_Object" effect="bold">

The WindowListener Object

</emphasis>


</title>




<para id="p1047">
This program also contains a 

<emphasis id="strong1065" effect="bold">
WindowListener 

</emphasis>
object, which 
terminates the program whenever the user closes either of the 

<emphasis id="strong1066" effect="bold">
Frame


</emphasis>
objects. Except for the fact that this object is registered to receive


<emphasis id="strong1067" effect="bold">
Window 

</emphasis>
events from either of the two 

<emphasis id="strong1068" effect="bold">
Frame 

</emphasis>

objects, it is no different from similar listeners used in an 
earlier sample program, and therefore, won't be discussed further here. 

</para>





<para id="p1048">
Note that an improved version of this program is presented at the end of this 
lesson. The improved version does not require the establishment of 
source object names, and does not require the passing of references to 
the constructor for the 

<emphasis id="strong1069" effect="bold">
WindowListener 

</emphasis>
in order to distinguish 
between the two sources. You should become familiar with the methodology 
used in the improved version as well as the methodology used in the following 
version. 

</para>





</section>
</section>
<section id="h21002">
<title>
<emphasis id="Complete_program_listing_for_Event10" effect="bold">

Complete program listing for Event10

</emphasis>


</title>




<para id="p1049">
A complete listing of the program named 

<emphasis id="strong1070" effect="bold">
Event10

</emphasis>
 is provided 
in 

<link id="a1054" target-id="Listing_6">

 Listing 6

</link>

.

</para>











<note id="note1006" type="">



 











<emphasis id="Listing_6" effect="bold">

Listing 6.

</emphasis>

 The program named Event10.


<code id="pre1005" display="block">
/*File Event10.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under 
JDK 1.1

The program illustrates the sharing of a single listener 
object among two different visual components of the same 
type.

The program detects mouse events occurring on either of two
different Frame objects.  It distinguishes between the two
objects on the basis of the component name, and displays 
the coordinates of a mouse click on whichever object 
experienced the mouse click.

This program was tested using JDK 1.1.3 under Win95.

Note that when the program starts, the two visual 
components overlay one another.  It is necessary to move 
one of them in order to access the other.
**********************************************************/

import java.awt.*;
import java.awt.event.*;

public class Event10 {
  public static void main(String[] args){
    GUI gui = new GUI();//instantiate a GUI
  }//end main
}//end class Event10
//=======================================================//

//Subclass Frame in order to override the paint method.
class MyFrame extends Frame{
  int xCoor;
  int yCoor;

  MyFrame(String name){//constructor
    setTitle("Copyright 1997, R.G.Baldwin");
    setSize(300,200);
    //Name used to distinguish between the two objects
    setName(name);
  }//end constructor
  
  public void paint(Graphics g){
    //display coordinate information on the visual object
    g.drawString("" + xCoor + ", " + yCoor, xCoor, yCoor);
  }//end paint()
}//end class MyFrame
//=======================================================//

//The following class is used to instantiate a graphical
// user interface object.
class GUI {
  public GUI(){//constructor
    //Create two visual objects of type MyFrame and make 
    // them visible. Name them Frame1 and Frame2.
    MyFrame myFrame1 = new MyFrame("Frame1");
    myFrame1.setVisible(true);
    
    MyFrame myFrame2 = new MyFrame("Frame2");
    myFrame2.setVisible(true);    
    
    //Instantiate and register Listener object which will
    // terminate the program when the user closes either 
    // window.
    WProc1 winProcCmd1 = new WProc1();
    myFrame1.addWindowListener(winProcCmd1);
    myFrame2.addWindowListener(winProcCmd1);    
    
    //Instantiate and register Listener object which will
    // process mouse events on either MyFrame object.
    MouseProc mouseProcCmd = 
                         new MouseProc(myFrame1,myFrame2);
    myFrame1.addMouseListener(mouseProcCmd);
    myFrame2.addMouseListener(mouseProcCmd);    
  }//end constructor
}//end class GUI definition
//=======================================================//

//This listener class monitors for mouse presses and 
// displays the coordinates of the mouse pointer when the 
// mouse is pressed.  The listener object distinguishes 
// between two different visual objects on the basis of 
// their component names and displays the coordinate 
// information on the visual object which generated the 
// mouse event.

class MouseProc extends MouseAdapter{
  //save references to the objects here
  MyFrame refToFrame1,refToFrame2; 
  
  MouseProc(MyFrame inFrame1,MyFrame inFrame2){//construct
    refToFrame1 = inFrame1;//save references to the frames
    refToFrame2 = inFrame2;
  }//end constructor

  //Override the mousePressed() method to respond whenever
  // the mouse is pressed on one of the frame objects.  
  // Distinguish between the two frame objects using the 
  // component name and display the coordinates of the 
  // mouse on the correct object.
  public void mousePressed(MouseEvent e){
    if( e.getComponent().getName().compareTo("Frame1") == 0 ){
      //Get X and Y coordinates of mouse pointer
      // and store in the Frame object
      refToFrame1.xCoor = e.getX();
      refToFrame1.yCoor = e.getY();
      //display coordinate information
      refToFrame1.repaint();
    }else{
      //Get X and Y coordinates of mouse pointer
      //and store in the Frame object
      refToFrame2.xCoor = e.getX();
      refToFrame2.yCoor = e.getY();
      //display coordinate information    
      refToFrame2.repaint();
    }//end if-else
  }//end mousePressed()
}//end class MouseProc
//=======================================================//

//The following listener is used to terminate the program
// when the user closes either frame object. Note that 
// class extends the adapter class
class WProc1 extends WindowAdapter{
  public void windowClosing(WindowEvent e){
    System.exit(0);
  }//end windowClosing()
}//end class WProc1
//=======================================================//
</code>




</note>















</section>
</section>
<section id="h11004">
<title>
<emphasis id="Another_sample_program" effect="bold">

Second sample program

</emphasis>


</title>









<para id="p1050">
A single listener object can be registered to process events of a given class 
generated by two or more different visual objects. 

</para>





<para id="p1051">
Unique names can be assigned to the objects when they are instantiated. 

</para>





<para id="p1052">
When an event occurs, the code in the listener object can obtain the name of 
the visual object that generated the event and use it to distinguish among the 
objects. 

</para>





<para id="p1053">
The name of the object that generated the event can be determined using the 
statement shown in 

<link id="a1055" target-id="Listing_5">

 Listing 5

</link>

 where 

</para>





<list id="ul1012" list-type="bulleted">

	

<item id="li1048">
<emphasis id="strong1071" effect="bold">
e 

</emphasis>
is the local name of the object passed into the 
	low-level event-handling method, and

</item>


	

<item id="li1049">
<emphasis id="strong1072" effect="bold">
"Frame"

</emphasis>
 is a string being tested against the component 
	name of a visual object that may have generated the event.

</item>




</list>










<section id="h21003">
<title>
<emphasis id="Changes_relative_to_Event10" effect="bold">

Changes relative to Event10

</emphasis>


</title>




<para id="p1054">
Although the program named 

<emphasis id="strong1073" effect="bold">
Event10

</emphasis>
 discussed above used two 
visual objects of the same type, there is no reason that the visual objects have 
to be of the same type, as long as all of the visual objects that share the


<emphasis id="strong1074" effect="bold">
listener 

</emphasis>
object are 
capable of generating events of the event class for which the listener is 
designed. 

</para>





<para id="p1055">
This is illustrated by the program named 

<emphasis id="strong1075" effect="bold">
Event11

</emphasis>
 

<emphasis id="em1027" effect="italics">
(see 


<link id="a1056" target-id="Listing_7">

 Listing 7

</link>

)

</emphasis>
 
that modifies the program named 

<emphasis id="strong1076" effect="bold">
Event10

</emphasis>
 to use 

</para>





<list id="ul1013" list-type="bulleted">

	

<item id="li1050">
a visual Frame object and

</item>


	

<item id="li1051">
a visual Window object,

</item>




</list>




<para id="p1056">
instead of two 

<emphasis id="strong1077" effect="bold">
Frame

</emphasis>
 objects. 

</para>





<para id="p1057">
The screen output is shown in 

<link id="a1057" target-id="Figure_2">

 Figure 2

</link>

.

</para>







<note id="note1007" type="">













<emphasis id="Figure_2" effect="bold">

Figure 2.

</emphasis>

 Screen output from Event11.


<para id="p1058">
<media id="media1001" alt="Missing image" display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/event11a.jpg" width="656" height="425"/>
</media>


</para>



	

</note>



















<para id="p1059">
Note that the 

<emphasis id="strong1078" effect="bold">
Window

</emphasis>
 object, shown as the white square in 
the upper left of 

<link id="a1058" target-id="Figure_2">

 Figure 2

</link>

, doesn't have a banner that 
allows it to be physically moved with the mouse. Therefore, I called the 

<emphasis id="strong1079" effect="bold">
setBounds

</emphasis>
 
method on both objects to separate them and to place them in a location on the screen 
where I could display the white 

<emphasis id="strong1080" effect="bold">
Window

</emphasis>
 object against the black background 
of the command-line window.

</para>





<para id="p1060">
The ability to display the coordinates of mouse clicks was also removed for 
simplification of the program. Information about mouse clicks is displayed in 
the command-line window as shown in 

<link id="a1059" target-id="Figure_2">

 Figure 2

</link>

. The operation of the program is discussed in the 
comments in 

<link id="a1060" target-id="Listing_7">

 Listing 7

</link>

. 

</para>





<para id="p1061">
Note that an improved version of this program is also presented at the end of this 
lesson. The improved version does not require the establishment of source object names, and does not require the passing of references to 
the constructor for the Window listener in order to distinguish between the two sources. You should become familiar with the methodology used in the 
improved version as well as the methodology used in the version shown in 

<link id="a1061" target-id="Listing_7">

 Listing 7

</link>

.

</para>











</section>
<section id="h21004">
<title>
<emphasis id="Complete_program_listing_for_Event11" effect="bold">

Complete program listing for 
Event11

</emphasis>


</title>




<para id="p1062">
A complete listing of the program named 

<emphasis id="strong1081" effect="bold">
Event11

</emphasis>
 is shown in 


<link id="a1062" target-id="Listing_7">

 Listing 7

</link>

.

</para>











<note id="note1008" type="">



 











<emphasis id="Listing_7" effect="bold">

Listing 7.

</emphasis>

 The program named Event11.


<code id="pre1006" display="block">
/*File Event11.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under 
JDK 1.1

The program illustrates the sharing of a single listener 
object between two different visual components of 
different types.

The program detects mouse events occurring on either a 
visual Frame object or on a visual Window object.  It 
distinguishes between the two objects on the basis of the
component name, and displays a message indicating which
object generated the event.

Clicking inside the Frame object but outside the Window 
object produces the following message:

Got mousePressed event from Frame object

Clicking inside the Window object produces the following 
message:

Got mousePressed event from Window object

Closing the Frame object produces the following message 
and terminates the program:

Got windowClosing event from Frame object

These results were produced using JDK 1.1.3, running under 
Windows 95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;

public class Event11 {
  public static void main(String[] args){
    GUI gui = new GUI();//instantiate a GUI
  }//end main
}//end class Event11
//=======================================================//

//The following class is used to instantiate a graphical 
// user interface object.
class GUI {
  public GUI(){//constructor
    //Create a visual Frame object and name it Frame
    Frame myFrame = new Frame();
    myFrame.setBounds(500,500,200,300);
    myFrame.setTitle("Copyright 1997, R.G.Baldwin");
    myFrame.setName("Frame");
    myFrame.setVisible(true);
    
    //Create a visual Window object inside the Frame 
    // object and name it Window
    Window myWindow = new Window(myFrame);
    myWindow.setBounds(380,500,100,100);
    myWindow.setName("Window");
    myWindow.setVisible(true);    
    
    //Instantiate and register a Listener object which 
    // will process mouse events on either the Frame 
    // object or the Window object.
    MouseProc mouseProcCmd = new MouseProc();
    myFrame.addMouseListener(mouseProcCmd);
    myWindow.addMouseListener(mouseProcCmd);    

    //Instantiate and register a Listener object which 
    // will display a message and terminate the program 
    // when the user closes the Frame object
    WProc1 winProcCmd1 = new WProc1();
    myFrame.addWindowListener(winProcCmd1);
  }//end constructor
}//end class GUI definition
//=======================================================//

//This listener class monitors for mouse presses and 
// displays a message when a mousePressed() event occurs on
// either the Frame object or the Window object.  The 
// message identifies which visual object generated
// the event. The listener object distinguishes between
// the two visual objects on the basis of their component
// names.

class MouseProc extends MouseAdapter{

  //Override the mousePressed() method to respond whenever
  // the mouse is pressed on one of the visual objects.  
  public void mousePressed(MouseEvent e){
    if( e.getComponent().getName().compareTo("Frame") 
                                                   == 0 ){
      System.out.println(
              "Got mousePressed event from Frame object");
    }//end if
    if( e.getComponent().getName().compareTo("Window") 
                                                   == 0 ){
      System.out.println(
             "Got mousePressed event from Window object");
    }//end if    
  }//end mousePressed()
}//end class MouseProc
//=======================================================//

//The following listener is used to display a message and
// terminate the program when the user closes the Frame 
// object.
class WProc1 extends WindowAdapter{
  public void windowClosing(WindowEvent e){
    System.out.println(
             "Got windowClosing event from Frame object");
    System.exit(0);
  }//end windowClosing()
}//end class WProc1
//=======================================================//
</code>




</note>















</section>
</section>
<section id="h11005">
<title>
<emphasis id="Review" effect="bold">

Review

</emphasis>


</title>




<section id="h21005">
<title>
<emphasis id="Question_1" effect="bold">

Question 1

</emphasis>


</title>




<para id="p1063">
Write a Java application that displays two 

<emphasis id="strong1082" effect="bold">
Frame

</emphasis>
 objects on 
the screen. Each object has a width of 300 pixels and a height of 200 pixels.


</para>





<para id="p1064">
One object is located in the upper left-hand corner of the screen. The top 
left-hand corner of the other object barely touches the bottom right-hand corner 
of the first object as shown in 

<link id="a1063" target-id="Figure_3">

 Figure 3

</link>

. 

</para>







<note id="note1009" type="">



 











<emphasis id="Figure_3" effect="bold">

Figure 3.

</emphasis>

 Screen output for Question 1.


<para id="p1065">
<media id="media1002" alt="Missing image" display="block">
<image id="img1002" mime-type="image/jpeg" src="../../media/sampprog120a.jpg" width="605" height="405"/>
</media>


</para>





</note>



















<para id="p1066">
Make your name and the name of each object appear in the banner at the top of 
each object. Do not assign names to the objects. 

</para>





<para id="p1067">
Cause the two objects to share a single listener object to respond to mouse 
events. 

</para>





<para id="p1068">
Whenever the mouse is pressed internal to either object, the coordinates of 
the mouse pointer are displayed near the pointer on that object with the 
horizontal coordinate being displayed first followed by the vertical coordinate. 
The two coordinate values are separated by a comma and a space. 

</para>





<para id="p1069">
Also cause the two objects to share a single listener object that will 
terminate the program whenever the user clicks the "close" button on either 
object. 

</para>





<para id="p1070">
Make certain that your application terminates and returns control to the 
operating system when the user clicks on the "close" button in the upper 
right-hand corner of the object. 

</para>





<para id="p1071">
Solution - See the program in 

<link id="a1064" target-id="Listing_8">

 Listing 8

</link>

.

</para>











<note id="note1010" type="">



 











<emphasis id="Listing_8" effect="bold">

Listing 8.

</emphasis>

 Solution to Question 1.


<code id="pre1007" display="block">
/*File SampProg120.java from lesson 82
Copyright 1997, R.G.Baldwin

Without viewing the solution that follows, write a Java
application that displays two Frame objects on the screen.

Each object has a width of 300 pixels and a height of 200
pixels.

One object is located in the upper left-hand corner of the
screen.  The top left-hand corner of the other object barely
touches the bottom right-hand corner of the first object.

Make your name and the name of each object appear in the
banner at the top of each object.

Do not assign names to the objects.

Cause the two objects to share a single Listener object
to respond to mouse events.

Whenever the mouse is pressed internal to either object,
the coordinates of the mouse pointer are displayed near
the pointer on that object with the horizontal coordinate
being displayed first followed by the vertical coordinate.
The two coordinate values are separated by a comma and a
space.

Also cause the two objects to share a single Listener
object that will terminate the program whenever the user
clicks the "close" button on either object.

Make certain that your application terminates and returns
control to the operating system when the user clicks on 
the "close" button in the upper right-hand corner of the 
object.

*/
//=========================================================

import java.awt.*;
import java.awt.event.*;

public class SampProg120 {
  public static void main(String[] args){
    GUI gui = new GUI();
  }//end main
}//end class SampProg120
//---------------------------------------------------------

//Subclass Frame in order to override the paint method.
class MyFrame extends Frame{
  int xCoor;
  int yCoor;

  MyFrame(){//constructor
    setTitle("Baldwin " + this.getName());
    setSize(300,200);
  }//end constructor
  
  public void paint(Graphics g){//override paint() method
    //display coordinate information on the object
    g.drawString("" + xCoor + ", " + yCoor, xCoor, yCoor);
  }//end paint()
}//end class MyFrame
//---------------------------------------------------------

class GUI {
  public GUI(){//constructor
    //Create two visual objects of type MyFrame, specify
    // their locations, and make them visible.
    MyFrame myFrame1 = new MyFrame();
    myFrame1.setLocation(new Point(0,0));
    myFrame1.setVisible(true);
    
    MyFrame myFrame2 = new MyFrame();
    myFrame2.setLocation(new Point(300,200));    
    myFrame2.setVisible(true); 
    
    //Instantiate and register Listener object which will 
    // terminate the program when the user closes either 
    // window.
    WProc1 winProcCmd1 = new WProc1();
    myFrame1.addWindowListener(winProcCmd1);
    myFrame2.addWindowListener(winProcCmd1);    
    
    //Instantiate and register Listener object which will 
    // process mouse events on either MyFrame object.
    MouseProc mouseProcCmd = 
      new MouseProc(myFrame1,myFrame2);
    myFrame1.addMouseListener(mouseProcCmd);
    myFrame2.addMouseListener(mouseProcCmd);    
  }//end constructor
}//end class GUI definition
//---------------------------------------------------------

//This listener class monitors for mouse presses and 
// displays the coordinates of the mouse pointer when the 
// mouse is pressed.  The listener object distinguishes 
// between two different visual objects on the basis of 
// their component names and displays the coordinate 
// information on the visual object which generated the 
// mouse event.

class MouseProc extends MouseAdapter{
  //save references to the objects here
  MyFrame refToFrame1,refToFrame2;
  
  MouseProc(MyFrame inFrame1,MyFrame inFrame2){//constructor
    refToFrame1 = inFrame1;//save references to the frames
    refToFrame2 = inFrame2;
  }//end constructor

  //Override the mousePressed() method to respond whenever 
  // the mouse is pressed on one of the frame objects.  
  // Distinguish between the two frame objects using the 
  // component name and display the coordinates of the 
  // mouse on the correct object.
  public void mousePressed(MouseEvent e){
     if( e.getComponent().getName().
          compareTo(refToFrame1.getName()) == 0)
    { 
      refToFrame1.xCoor = e.getX();
      refToFrame1.yCoor = e.getY();
      //display coordinates on Frame1
      refToFrame1.repaint();
    }else{ 
      refToFrame2.xCoor = e.getX();
      refToFrame2.yCoor = e.getY();
      //display coordinates on Frame2
      refToFrame2.repaint();
    }//end if-else
  }//end mousePressed()
}//end class MouseProc
//---------------------------------------------------------

//The following listener is used to terminate the program 
// when the user closes either frame object.
class WProc1 extends WindowAdapter{
  public void windowClosing(WindowEvent e){
    System.exit(0);
  }//end windowClosing()
}//end class WProc1
//---------------------------------------------------------
</code>




</note>















</section>
<section id="h21006">
<title>
<emphasis id="Question_2" effect="bold">

Question 2

</emphasis>


</title>









<para id="p1072">
Write a Java application that displays two 

<emphasis id="strong1083" effect="bold">
Frame

</emphasis>
 objects on 
the screen. Place a red 

<emphasis id="strong1084" effect="bold">
Panel

</emphasis>
 object in the upper-left quadrant 
of the second 

<emphasis id="strong1085" effect="bold">
Frame

</emphasis>
 object as shown in 

<link id="a1065" target-id="Figure_4">

 Figure 4

</link>

. 

<emphasis id="em1028" effect="italics">
(Note that 
the red 

<emphasis id="strong1086" effect="bold">
Panel

</emphasis>
 is partially covered by the blue banner at the 
top of the 

<emphasis id="strong1087" effect="bold">
Frame

</emphasis>
.)

</emphasis>
</para>







<note id="note1011" type="">



 











<emphasis id="Figure_4" effect="bold">

Figure 4.

</emphasis>

 Screen output for Question 2.


<para id="p1073">
<media id="media1003" alt="Missing image" display="block">
<image id="img1003" mime-type="image/jpeg" src="../../media/sampprog121a.jpg" width="607" height="411"/>
</media>


</para>





</note>



















<para id="p1074">
Each 

<emphasis id="strong1088" effect="bold">
Frame

</emphasis>
 object has a width of 300 pixels and a height of 200 pixels. 

</para>





<para id="p1075">
One 

<emphasis id="strong1089" effect="bold">
Frame

</emphasis>
 object is located in the upper left-hand corner of the screen. The 
top left-hand corner of the second 

<emphasis id="strong1090" effect="bold">
Frame

</emphasis>
 object barely touches the bottom 
right-hand corner of the first 

<emphasis id="strong1091" effect="bold">
Frame

</emphasis>
 object. 

</para>





<para id="p1076">
Make your name and the name of each 

<emphasis id="strong1092" effect="bold">
Frame

</emphasis>
 object appear in the banner at the 
top of each 

<emphasis id="strong1093" effect="bold">
Frame

</emphasis>
 object. 

</para>





<para id="p1077">
Cause the first 

<emphasis id="strong1094" effect="bold">
Frame

</emphasis>
 object and the 

<emphasis id="strong1095" effect="bold">
Panel

</emphasis>
 object to share a single listener 
object to respond to mouse events. Do not allow the second 

<emphasis id="strong1096" effect="bold">
Frame

</emphasis>
 object 


<emphasis id="em1029" effect="italics">
(which 
contains the 

</emphasis>
<emphasis id="strong1097" effect="bold">
<emphasis id="em1030" effect="italics">
Panel

</emphasis>
</emphasis>
<emphasis id="em1031" effect="italics">
 object)

</emphasis>
 to share the listener object for mouse events. 

</para>





<para id="p1078">
Whenever the mouse is pressed internal to the first 

<emphasis id="strong1098" effect="bold">
Frame

</emphasis>
 object, or on the 
red portion of the 

<emphasis id="strong1099" effect="bold">
Panel

</emphasis>
 object, the coordinates of the mouse pointer are 
displayed near the pointer on that object with the horizontal coordinate being 
displayed first followed by the vertical coordinate. The two coordinate values 
are separated by a comma and a space. 

</para>





<para id="p1079">
Whenever the mouse is pressed internal to the second 

<emphasis id="strong1100" effect="bold">
Frame

</emphasis>
 object, but not on 
the red 

<emphasis id="strong1101" effect="bold">
Panel

</emphasis>
 object, coordinate values are not displayed. 

</para>





<para id="p1080">
Also cause the two 

<emphasis id="strong1102" effect="bold">
Frame

</emphasis>
 objects to share a single listener object that will 
terminate the program whenever the user clicks the "close" button on either 


<emphasis id="strong1103" effect="bold">
Frame

</emphasis>
 object. 

</para>





<para id="p1081">
Make certain that your application terminates and returns control to the 
operating system when the user clicks on the "close" button in the upper 
right-hand corner of either 

<emphasis id="strong1104" effect="bold">
Frame

</emphasis>
 object. 

</para>





<para id="p1082">
Solution - See the program in 

<link id="a1066" target-id="Listing_9">

 Listing 9

</link>

.

</para>










<note id="note1012" type="">



 











<emphasis id="Listing_9" effect="bold">

Listing 9.

</emphasis>

 Solution to Question 2.


<code id="pre1008" display="block">
/*File SampProg121.java from lesson 82
Copyright 1997, R.G.Baldwin

Without viewing the solution that follows, write a Java
application that displays two Frame objects on the screen.
Place a red Panel object in the upper-left quadrant of the
second Frame object.

Each Frame object has a width of 300 pixels and a height 
of 200 pixels.

One Frame object is located in the upper left-hand corner 
of the screen.  The top left-hand corner of the second
Frame object barely touches the bottom right-hand corner of
the first Frame object.

Make your name and the name of each Frame object appear in 
the banner at the top of each Frame object.

Cause the first Frame object and the Panel object to 
share a single Listener object to respond to mouse events.
Do not allow the second Frame object to share the Listener
object for mouse events.

Whenever the mouse is pressed internal to the first Frame
object, or on the red portion of the Panel object, the 
coordinates of the mouse pointer are displayed near
the pointer on that object with the horizontal coordinate
being displayed first followed by the vertical coordinate.
The two coordinate values are separated by a comma and a
space.

Whenever the mouse is pressed internal to the second Frame
object, but not on the red Panel object, coordinate values
are not displayed.

Also cause the two Frame objects to share a single Listener
object that will terminate the program whenever the user
clicks the "close" button on either Frame object.

Make certain that your application terminates and returns
control to the operating system when the user clicks on 
the "close" button in the upper right-hand corner of either
Frame object.

*/
//=========================================================

import java.awt.*;
import java.awt.event.*;

public class SampProg121 {
  public static void main(String[] args){
    GUI gui = new GUI();
  }//end main
}//end class SampProg121
//---------------------------------------------------------

//Subclass Frame in order to override the paint method.
class MyFrame extends Frame{
  int xCoor;
  int yCoor;

  MyFrame(){//constructor
    setTitle("Baldwin " + this.getName());
    setSize(300,200);
  }//end constructor
  
  public void paint(Graphics g){//override paint() method
    //display coordinate information on the object
    g.drawString("" + xCoor + ", " + yCoor, xCoor, yCoor);
  }//end paint()
}//end class MyFrame
//---------------------------------------------------------

//Subclass Panel in order to override the paint method.
class MyPanel extends Panel{
  int xCoor;
  int yCoor;

  MyPanel(){//constructor
    setBounds(new Rectangle(0,0,150,100));  
    setBackground(Color.red);
  }//end constructor
  
  public void paint(Graphics g){//override paint() method
    //display coordinate information on the object
    g.drawString("" + xCoor + ", " + yCoor, xCoor, yCoor);
  }//end paint()
}//end class MyFrame
//---------------------------------------------------------

class GUI {
  public GUI(){//constructor
    //Instantiate an object of type MyPanel
    MyPanel myPanel = new MyPanel();    
  
    //Instantiate two objects of type MyFrame, specify
    // their locations, and make them visible.  Place the
    // MyPanel object in the second MyFrame object.
    MyFrame myFrame1 = new MyFrame();
    myFrame1.setLocation(new Point(0,0));
    myFrame1.setVisible(true);
    
    MyFrame myFrame2 = new MyFrame();
    myFrame2.setLayout(null);
    myFrame2.setLocation(new Point(300,200));
    myFrame2.add(myPanel);
    myFrame2.setVisible(true);
   
    //Instantiate and register a Listener object which will 
    // terminate the program when the user closes either 
    // window.
    WProc1 winProcCmd1 = new WProc1();
    myFrame1.addWindowListener(winProcCmd1);
    myFrame2.addWindowListener(winProcCmd1);    
    
    //Instantiate and register a Listener object which will 
    // process mouse events on either the MyFrame object
    // or the myPanel object.
    MouseProc mouseProcCmd = 
      new MouseProc(myFrame1,myPanel);
    myFrame1.addMouseListener(mouseProcCmd);
    myPanel.addMouseListener(mouseProcCmd);    
    
  }//end constructor
}//end class GUI definition
//---------------------------------------------------------

//This listener class monitors for mouse presses and 
// displays the coordinates of the mouse pointer when the 
// mouse is pressed.  The listener object distinguishes 
// between two different visual objects on the basis of 
// their component names and displays the coordinate 
// information on the visual object which generated the 
// mouse event.

class MouseProc extends MouseAdapter{
  //save references to the objects here
  MyFrame refToFrame1;
  MyPanel refToPanel;
  
  MouseProc(MyFrame inFrame1,MyPanel inPanel){//constructor
    refToFrame1 = inFrame1;//save references to the frames
    refToPanel = inPanel;
  }//end constructor

  //Override the mousePressed() method to respond whenever 
  // the mouse is pressed on one of the frame objects.  
  // Distinguish between the two frame objects using the 
  // component name and display the coordinates of the 
  // mouse on the correct object.
  public void mousePressed(MouseEvent e){
     if( e.getComponent().getName().
          compareTo(refToFrame1.getName()) == 0)
    { //display coordinates on the Frame object
      refToFrame1.xCoor = e.getX();
      refToFrame1.yCoor = e.getY();
      refToFrame1.repaint();
    }else{//display coordinates on the Panel object
      refToPanel.xCoor = e.getX();
      refToPanel.yCoor = e.getY();
      refToPanel.repaint();
    }//end if-else
  }//end mousePressed()
}//end class MouseProc
//---------------------------------------------------------

//The following listener is used to terminate the program 
// when the user closes either frame object.
class WProc1 extends WindowAdapter{
  public void windowClosing(WindowEvent e){
    System.exit(0);
  }//end windowClosing()
}//end class WProc1
//---------------------------------------------------------
</code>




</note>















</section>
<section id="h21007">
<title>
<emphasis id="Question_3" effect="bold">

Question 3

</emphasis>


</title>




<para id="p1083">
Rewrite the program named 

<emphasis id="strong1105" effect="bold">
Event10

</emphasis>
 and eliminate the 
requirement to pass parameters to the constructors for the event listener 
objects. 

</para>





<para id="p1084">
Solution - See the program in 

<link id="a1067" target-id="Listing_10">

 Listing 10

</link>

.

</para>










<note id="note1013" type="">



 











<emphasis id="Listing_10" effect="bold">

Listing 10.

</emphasis>

 Solution to Question 3.


<code id="pre1009" display="block">
/*File Event10A.java Copyright 1997, R.G.Baldwin
Rewrite the program named Event10 and eliminate the 
requirement to pass parameters to the constructors for the
event Listener objects.

This program is designed to be compiled and run under 
JDK 1.1

The program illustrates the sharing of a single listener 
object among two different visual components of the same 
type.

The program detects mouse events occurring on either of two
different Frame objects.  It distinguishes between the two 
objects and displays the coordinates of a mouse click on 
whichever object experienced the mouse click.

These results were produced using JDK 1.1.3 running under 
Windows 95.

Note that when the program starts, the two visual 
components overlay one another.  It is necessary to move 
one of them in order to access the other.
*/
//=======================================================//

import java.awt.*;
import java.awt.event.*;

public class Event10A {
  public static void main(String[] args){
    //instantiate a Graphical User Interface object
    GUI gui = new GUI();
  }//end main
}//end class Event10A
//=======================================================//

//Subclass Frame in order to override the paint method.
class MyFrame extends Frame{
  int xCoor;
  int yCoor;

  MyFrame(){//constructor
    setTitle("Copyright 1997, R.G.Baldwin");
    setSize(300,200);
  }//end constructor
  
  public void paint(Graphics g){
    //display coordinate information on the visual object
    g.drawString("" + xCoor + ", " + yCoor, xCoor, yCoor);
  }//end paint()
}//end class MyFrame
//=======================================================//

//The following class is used to instantiate a graphical 
// user interface object.
class GUI {
  public GUI(){//constructor
    //Create two visual objects of type MyFrame and make 
    // them visible.
    MyFrame myFrame1 = new MyFrame();
    myFrame1.setVisible(true);
    
    MyFrame myFrame2 = new MyFrame();
    myFrame2.setVisible(true);    
    
    //Instantiate and register Listener object which will 
    // terminate the program when the user closes either 
    // window.
    WProc1 winProcCmd1 = new WProc1();
    myFrame1.addWindowListener(winProcCmd1);
    myFrame2.addWindowListener(winProcCmd1);    
    
    //Instantiate and register Listener object which will 
    // process mouse events on either MyFrame object.
    MouseProc mouseProcCmd = new MouseProc();
    myFrame1.addMouseListener(mouseProcCmd);
    myFrame2.addMouseListener(mouseProcCmd);    
  }//end constructor
}//end class GUI definition
//=======================================================//

//This listener class monitors for mouse presses and 
// displays the coordinates of the mouse pointer when the 
// mouse is pressed.  The listener object distinguishes 
// between two different visual objects and displays the 
// coordinate information on the visual object which 
// generated the mouse event.

class MouseProc extends MouseAdapter{
  //Override the mousePressed() method to respond whenever 
  // the mouse is pressed on one of the frame objects.  
  public void mousePressed(MouseEvent e){
    //Get X and Y coordinates of mouse pointer and store in
    // the Frame object.  Distinguish between the two
    // components on the basis of the source of the event.
    // Note that the following two formulations for X and Y
    // can be used to produce the same results in this
    // situation.
    ((MyFrame)e.getComponent()).xCoor = e.getX();
    ((MyFrame)e.getSource()).yCoor = e.getY();
    
    //display coordinate information   
    e.getComponent().repaint();
  }//end mousePressed()
}//end class MouseProc
//=======================================================//

//The following listener is used to terminate the program 
// when the user closes either frame object.
class WProc1 extends WindowAdapter{
  public void windowClosing(WindowEvent e){
    System.exit(0);
  }//end windowClosing()
}//end class WProc1
//=======================================================//

</code>




</note>















</section>
<section id="h21008">
<title>
<emphasis id="Question_4" effect="bold">

Question 4

</emphasis>


</title>














<para id="p1085">
Rewrite the program named 

<emphasis id="strong1106" effect="bold">
Event11

</emphasis>
 and eliminate the requirement to pass 
parameters to the constructor for the listener objects. 

</para>





<para id="p1086">
Solution - See the program in 

<link id="a1068" target-id="Listing_11">

 Listing 11

</link>

.

</para>















<note id="note1014" type="">



 











<emphasis id="Listing_11" effect="bold">

Listing 11.

</emphasis>

 Solution to Question 4.


<code id="pre1010" display="block">
/*File Event11A.java Copyright 1997, R.G.Baldwin
Rewrite the program named Event11 and eliminate the 
requirement to pass parameters to the constructor for the
listener objects.

This program is designed to be compiled and run under 
JDK 1.1

The program illustrates the sharing of a single listener 
object between two different visual components of different
types.

The program detects mouse events occurring on either a 
visual Frame object or on a visual Window object.  It 
distinguishes between the two objects and displays a 
message indicating which object generated the event.

Clicking inside the Frame object but outside the Window 
object produces the following message:

Got mousePressed event from Frame object

Clicking inside the Window object produces the following 
message:

Got mousePressed event from Window object

Closing the Frame object produces the following message and
terminates the program:

Got windowClosing event from Frame object

These results were produced using JDK 1.1.3 running under 
Windows 95.
*/
//=======================================================//

import java.awt.*;
import java.awt.event.*;

public class Event11A {
  public static void main(String[] args){
    //instantiate a Graphical User Interface object
    GUI gui = new GUI();
  }//end main
}//end class Event11A
//=======================================================//

//The following class is used to instantiate a graphical 
// user interface object.
class GUI {
  public GUI(){//constructor
    //Create a visual Frame object
    Frame myFrame = new Frame();
    myFrame.setSize(200,300);
    myFrame.setTitle("Copyright 1997, R.G.Baldwin");
    myFrame.setVisible(true);
    
    //Create a visual Window object inside the Frame object
    Window myWindow = new Window(myFrame);
    myWindow.setSize(100,100);
    myWindow.setVisible(true);    
    
    //Instantiate and register a Listener object which will
    // process mouse events on either the Frame object or 
    // the Window object.
    MouseProc mouseProcCmd = new MouseProc();
    myFrame.addMouseListener(mouseProcCmd);
    myWindow.addMouseListener(mouseProcCmd);    

    //Instantiate and register a Listener object which will
    // display a message and terminate the program when the
    // user closes the Frame object
    WProc1 winProcCmd1 = new WProc1();
    myFrame.addWindowListener(winProcCmd1);
  }//end constructor
}//end class GUI definition
//=======================================================//

//This listener class monitors for mouse presses and 
// displays a message when a mousePressed() event occurs on
// either the Frame object or the Window object.  The 
// message identifies which visual object generated the 
// event. The listener object distinguishes between the two
// visual objects.

class MouseProc extends MouseAdapter{

  //Override the mousePressed() method to respond whenever
  // the mouse is pressed on one of the visual objects.  
  public void mousePressed(MouseEvent e){
    System.out.print("Got mousePressed event from ");
    if(e.getSource().toString().indexOf("Frame") &gt;= 0)
      System.out.println("Frame object");
    else
      System.out.println("Window object");
  }//end mousePressed()
}//end class MouseProc
//=======================================================//

//The following listener is used to display a message and 
// terminate the program when the user closes the Frame 
// object.
class WProc1 extends WindowAdapter{
  public void windowClosing(WindowEvent e){
    System.out.println(
              "Got windowClosing event from Frame object");
    System.exit(0);
  }//end windowClosing()
}//end class WProc1
//=======================================================//
</code>




</note>

































	

</section>
</section>
<section id="h11006">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1087">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1015" type="">


		


			


				

<emphasis id="strong1107" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1014" list-type="bulleted">

					

<item id="li1052">
Module name: Java082 Sharing a Listener Object Among 
					Visual Components 

</item>


					

<item id="li1053">
File: Java082.htm

</item>


					

<item id="li1054">
Originally published: 1997

</item>



				

</list>



				

</note>





	

<note id="note1016" type="">


		


			


				

<emphasis id="strong1108" effect="bold">
Disclaimers:

</emphasis>
<para id="p1088">
<emphasis id="strong1109" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>



				

<para id="p1089">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>



				

<para id="p1090">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>



				

<para id="p1091">
<emphasis id="strong1110" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>




</note>



	



<para id="p1092">
-end- 

</para>







</section>
</content>




</document>