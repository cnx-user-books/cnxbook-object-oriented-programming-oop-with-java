<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Java3112 Java OOP Using Alpha Transparency with Ericson's Media Library</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m44911</md:content-id>
  <md:title>Java3112 Java OOP Using Alpha Transparency with Ericson's Media Library</md:title>
  <md:abstract>Learn how to use alpha transparency with Ericson's media library.</md:abstract>
  <md:uuid>5453e65d-2c7e-40a2-b250-a3baea601183</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1002">
<link id="a1002" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1003">
<link id="a1003" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1004">
<link id="a1004" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1005">
<link id="a1005" target-id="General_background_information">

General background information

</link>


</item>


	

<item id="li1006">
<link id="a1006" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


</item>


	

<item id="li1007">
<link id="a1007" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1008">
<link id="a1008" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1009">
<link id="a1009" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1010">
<link id="a1010" target-id="Miscellaneous">

Miscellaneous

</link>


</item>


	

<item id="li1011">
<link id="a1011" target-id="Complete_program_listing">

Complete program listing

</link>


</item>




</list>


	

	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	

	

<para id="p1000">
This module is one of a series of modules designed to teach you about Object-Oriented Programming (OOP) using Java. 

</para>




<para id="p1001">
The program described in this module requires the use of the Guzdial-Ericson 
multimedia class library. You will find download, installation, and usage 
instructions for the library at 

<link id="a1012" url="http://cnx.org/content/m44148/latest/">

Java OOP: The Guzdial-Ericson Multimedia Class Library

</link>

.

</para>


	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1002">
I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.

</para>


	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1003" list-type="bulleted">

		

<item id="li1012">
<link id="a1013" target-id="Figure_1">

Figure 1

</link>

. Image from file named Prob06a. 

</item>


		

<item id="li1013">
<link id="a1014" target-id="Figure_2">

Figure 2

</link>

. Image from file named Prob06b. 

</item>


		

<item id="li1014">
<link id="a1015" target-id="Figure_3">

Figure 3

</link>

. Processed output image.

</item>


		

<item id="li1015">
<link id="a1016" target-id="Figure_4">

Figure 4

</link>

. Required text output.

</item>


	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1004" list-type="bulleted">

		

<item id="li1016">
<link id="a1017" target-id="Listing_1">

Listing 1

</link>

. Modification of the SimplePicture class.

</item>


		

<item id="li1017">
<link id="a1018" target-id="Listing_2">

Listing 2

</link>

. Beginning of the class named Prob06Runner. 

</item>


		

<item id="li1018">
<link id="a1019" target-id="Listing_3">

Listing 3

</link>

. The run method. 

</item>


		

<item id="li1019">
<link id="a1020" target-id="Listing_4">

Listing 4

</link>

. Beginning of the cropAndFlip method. 

</item>


		

<item id="li1020">
<link id="a1021" target-id="Listing_5">

Listing 5

</link>

. Make the pixels partially transparent.

</item>


		

<item id="li1021">
<link id="a1022" target-id="Listing_6">

Listing 6

</link>

. The copyPictureWithCrop method.

</item>


		

<item id="li1022">
<link id="a1023" target-id="Listing_7">

Listing 7

</link>

. Complete program listing.

</item>


	

</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>


	

<para id="p1003">
The primary objective of this module is to incorporate alpha transparency 
	into the use of Ericson's media library.

</para>




<para id="p1004">
<emphasis id="strong1000" effect="bold">
Two approaches

</emphasis>
</para>




<para id="p1005">
There are at least two ways to incorporate alpha transparency into Ericson's 
media library, The easiest way, which is not necessarily the best way, is 
to make a relatively simple modification to a constructor in Ericson's 

<emphasis id="strong1001" effect="bold">

SimplePicture

</emphasis>
 class. That is the approach used in this module.

</para>




<para id="p1006">
<emphasis id="strong1002" effect="bold">
The second approach

</emphasis>
</para>




<para id="p1007">
The second approach is more complicated, but does not require the 
modification of the classes in Ericson's library. That is probably a 
better approach due simply to the fact that modifications to Ericson's library 
are not required. However, that approach is not shown in this module.

</para>




<para id="p1008">
<emphasis id="strong1003" effect="bold">
Outside research

</emphasis>
</para>




<para id="p1009">
This program may require a significant amount of outside research on the part 
of the student in order to learn about:

</para>




<list id="ul1005" list-type="bulleted">

	

<item id="li1023">
Alpha transparency

</item>


	

<item id="li1024">
A buffered image of type 

<emphasis id="strong1004" effect="bold">
TYPE_INT_ARGB

</emphasis>
</item>


	

<item id="li1025">
The ability to use Ericson's 

<emphasis id="strong1005" effect="bold">
getBasicPixel

</emphasis>
 and 

<emphasis id="strong1006" effect="bold">
setBasicPixel

</emphasis>
 
	methods, 

</item>


	

<item id="li1026">
The use of the bitwise AND and OR operators, and

</item>


	

<item id="li1027">
The use of the 

<emphasis id="strong1007" effect="bold">
drawImage

</emphasis>
 method of the 

<emphasis id="strong1008" effect="bold">
Graphics

</emphasis>
 class.

</item>




</list>




<para id="p1010">
<emphasis id="strong1009" effect="bold">
The getBasicPixel and setBasicPixel methods

</emphasis>
</para>




<para id="p1011">
The program uses the 

<emphasis id="strong1010" effect="bold">
getBasicPixel

</emphasis>
 and 

<emphasis id="strong1011" effect="bold">
setBasicPixel

</emphasis>
 methods 
from Ericson's library along with bitwise operations to set the alpha value for 
all the pixels in a cropped and flipped image of a butterfly to a hexadecimal 
value of 5F.

</para>




<para id="p1012">
<emphasis id="strong1012" effect="bold">
Modification to the SimplePicture class

</emphasis>
</para>




<para id="p1013">
The student must modify the 

<emphasis id="strong1013" effect="bold">
SimplePicture

</emphasis>
 class to cause the buffered 
image used to store the image to be 

<emphasis id="strong1014" effect="bold">
TYPE_INT_ARGB

</emphasis>
 instead of 


<emphasis id="strong1015" effect="bold">
TYPE_INT_RGB

</emphasis>
, which 
is its normal type.

</para>




<para id="p1014">
<emphasis id="strong1016" effect="bold">
Crop, flip, and set alpha values

</emphasis>
</para>




<para id="p1015">
Then the student must write a method that will crop and flip an image of a 
butterfly and set the value of every alpha byte to a hexadecimal value of 5F.


</para>




<para id="p1016">
<emphasis id="strong1017" effect="bold">
Draw a partially transparent image of a butterfly

</emphasis>
</para>




<para id="p1017">
Finally, the student must use the standard 

<emphasis id="strong1018" effect="bold">
drawImage

</emphasis>
 method of the 

<emphasis id="strong1019" effect="bold">

Graphics

</emphasis>
 class to draw the image of the butterfly onto an image of a beach 
with transparency.

</para>




<para id="p1018">
<emphasis id="strong1020" effect="bold">
Brief program specifications

</emphasis>
</para>




<para id="p1019">
Write a program named 

<emphasis id="strong1021" effect="bold">
Prob06

</emphasis>
 that uses the class definition for the 
class named 

<emphasis id="strong1022" effect="bold">
Prob06

</emphasis>
 in 

<link id="a1024" target-id="Listing_7">

Listing 7

</link>

 along with Ericson's media library and 
the image files named 

<emphasis id="strong1023" effect="bold">
<link id="a1025" url="Prob06a.jpg">

Prob06a.jpg

</link>


</emphasis>
 and 

<emphasis id="strong1024" effect="bold">



<link id="a1026" url="Prob06b.jpg">

Prob06b.jpg

</link>


</emphasis>
 to produce the 
three graphic output images shown in 

<link id="a1027" target-id="Figure_1">

Figure 1

</link>

, 


<link id="a1028" target-id="Figure_2">

Figure 2

</link>

, and 

<link id="a1029" target-id="Figure_3">

Figure 3

</link>

.

</para>





<para id="p1020">
<emphasis id="strong1025" effect="bold">
<emphasis id="Figure_1" effect="bold">

Figure 1

</emphasis>

 - Image from file named Prob06a.

</emphasis>
</para>




<para id="p1021">
<media id="media1000" alt="Missing image." display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/image-a-b34f.jpg" width="310" height="248"/>
</media>


</para>







<para id="p1022">
<emphasis id="strong1026" effect="bold">
<emphasis id="Figure_2" effect="bold">

Figure 2

</emphasis>

 - Image from file named Prob06b.

</emphasis>
</para>




<para id="p1023">
<media id="media1001" alt="Missing image." display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/image-b-d910.jpg" width="332" height="370"/>
</media>


</para>


	



<para id="p1024">
<emphasis id="strong1027" effect="bold">
<emphasis id="Figure_3" effect="bold">

Figure 3

</emphasis>

 - Processed output image.

</emphasis>
</para>




<para id="p1025">
<media id="media1002" alt="Missing image." display="block">
<image id="img1002" mime-type="image/jpeg" src="../../media/image-c-54b8.jpg" width="329" height="270"/>
</media>


</para>


	



<para id="p1026">
<emphasis id="strong1028" effect="bold">
Define new classes

</emphasis>
</para>




<para id="p1027">
You may define new classes as necessary to cause your program to behave as 
required, but you may not modify the class definition for the class named 

<emphasis id="strong1029" effect="bold">

Prob06

</emphasis>
 given in 

<link id="a1030" target-id="Listing_7">

Listing 7

</link>

.

</para>




<para id="p1028">
<emphasis id="strong1030" effect="bold">
A partially transparent image of a butterfly

</emphasis>
</para>




<para id="p1029">
Just in case you haven't noticed it, the final image of the beach contains a 
partially transparent image of a butterfly superimposed and centered on the 
beach image.

</para>




<para id="p1030">
<emphasis id="strong1031" effect="bold">
Modification to the SimplePicture class

</emphasis>
</para>




<para id="p1031">
In order to write this program, you will need to modify the class from 
Ericson's media library named 

<emphasis id="strong1032" effect="bold">
SimplePicture

</emphasis>
.

</para>




<para id="p1032">
Your modifications must make it possible for you to display a partially 
transparent image on top of another image with the background image showing 
through.

</para>




<para id="p1033">
<emphasis id="strong1033" effect="bold">
Transparency

</emphasis>
</para>




<para id="p1034">
The degree of transparency can range from being completely transparent at one 
extreme to being totally opaque at the other extreme. In this case, the 
butterfly image shown in 

<link id="a1031" target-id="Figure_3">

Figure 3

</link>

 is about 37-percent 
opaque 

<emphasis id="em1000" effect="italics">
(or 63-percent transparent)

</emphasis>
.

</para>




<para id="p1035">
<emphasis id="strong1034" effect="bold">
Outside research

</emphasis>
</para>




<para id="p1036">
You will probably need to do some outside research in order to write this 
program. For example, you will need to learn about the following topics 
and probably some other topics as well:

</para>




<list id="ul1006" list-type="bulleted">

	

<item id="li1028">
Alpha transparency

</item>


	

<item id="li1029">
BufferedImage objects of TYPE_INT_ARGB

</item>


	

<item id="li1030">
The representation of a pixel as type int

</item>


	

<item id="li1031">
Bit manipulation of pixels

</item>


	

<item id="li1032">
The drawImage method of the Graphics class

</item>




</list>




<para id="p1037">
<emphasis id="strong1035" effect="bold">
Required text output

</emphasis>
</para>




<para id="p1038">
In addition to the output images described above, your program must produce 
the text output shown in 

<link id="a1032" target-id="Figure_4">

Figure 4

</link>

 on the command- line screen.

</para>


	

<table id="table1000" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Figure_4" effect="bold">

Figure 4

</emphasis>

 - Required text output. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">

							

<code id="pre1000" display="block">Dick Baldwin.
Dick Baldwin
Picture, filename Prob06a.jpg height 118 width 100
Picture, filename Prob06b.jpg height 240 width 320
Picture, filename None height 101 width 77</code>


							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>


	

<para id="p1039">
You must substitute your name for my name wherever my name appears both 
	in the images and on the command-line screen.

</para>





	

</section>
<section id="h11003">
<title>
<emphasis id="General_background_information" effect="bold">

General 
	background information

</emphasis>


</title>


	

<para id="p1040">
The image in a 

<emphasis id="strong1036" effect="bold">
SimplePicture

</emphasis>
 object is stored in an object of the
	

<emphasis id="strong1037" effect="bold">
BufferedImage

</emphasis>
 class, which is a class in the standard Sun Java 
	library.

</para>




<para id="p1041">
<emphasis id="strong1038" effect="bold">
Image data formats

</emphasis>
</para>




<para id="p1042">
An examination of the documentation for the 

<emphasis id="strong1039" effect="bold">
BufferedImage

</emphasis>
 class shows 
that the red, green, blue, and alpha values for each pixel can be formatted in 
about fourteen different ways in an object of the 

<emphasis id="strong1040" effect="bold">
BufferedImage

</emphasis>
 class.

</para>




<para id="p1043">
<emphasis id="strong1041" effect="bold">
No alpha data

</emphasis>
</para>




<para id="p1044">
Some of those formats, including the way that information is stored in a 

<emphasis id="strong1042" effect="bold">

SimplePicture

</emphasis>
 object, don't include an alpha value.

</para>




<para id="p1045">
<emphasis id="strong1043" effect="bold">
Modification of the SimplePicture class

</emphasis>
</para>




<para id="p1046">
One way to modify the 

<emphasis id="strong1044" effect="bold">
SimplePicture

</emphasis>
 class to force it to accommodate 
alpha transparency data is to modify one of the constructors for the 

<emphasis id="strong1045" effect="bold">

SimplePicture

</emphasis>
 class as shown in 

<link id="a1033" target-id="Listing_1">

Listing 1

</link>

. Note that


<emphasis id="strong1046" effect="bold">
BufferedImage.TYPE_INT_RGB

</emphasis>
 was replaced 
by 

<emphasis id="strong1047" effect="bold">
BufferedImage.TYPE_INT_ARGB

</emphasis>
 in Listing 1. 

<emphasis id="em1001" effect="italics">
(There are probably other ways that you can modify 
the class to achieve the same result as well.)

</emphasis>
</para>


	

<table id="table1001" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

 - Modification of the SimplePicture class.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">

				

<code id="pre1001" display="block"> /**
  * A constructor that takes the width and height desired
  * for a picture and creates a buffered image of that
  * size.  This constructor doesn't show the picture.
  */
 public  SimplePicture(int width, int height){
//Disable the following statement
//   bufferedImage = new BufferedImage(
//            width, height, BufferedImage.TYPE_INT_RGB);

   //Modify constructor to support alpha transparency.
   System.out.println("Dick Baldwin");
   bufferedImage = new BufferedImage(
             width, height, BufferedImage.TYPE_INT_ARGB);
             
   title = "None";
   fileName = "None";
   extension = "jpg";
   setAllPixelsToAColor(Color.white);
 }//end constructor</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1047">
<emphasis id="strong1048" effect="bold">
Future Picture objects will accommodate alpha transparency

</emphasis>
</para>




<para id="p1048">
Having made this modification, future objects instantiated from the 

<emphasis id="strong1049" effect="bold">

SimplePicture

</emphasis>
 class using this constructor will accommodate alpha 
transparency. 

<emphasis id="em1002" effect="italics">
(The 

<emphasis id="strong1050" effect="bold">
SimplePicture

</emphasis>
 class is the superclass of the


<emphasis id="strong1051" effect="bold">
Picture

</emphasis>
 class.)

</emphasis>
</para>




<para id="p1049">
<emphasis id="strong1052" effect="bold">
Display the student's name

</emphasis>
</para>




<para id="p1050">
Note that the constructor in 

<link id="a1034" target-id="Listing_1">

Listing 1

</link>

 is also 
modified to cause it to display the student's name, which is a requirement of 
the program.

</para>




<para id="p1051">
<emphasis id="strong1053" effect="bold">
No complete listing of SimplePicture provided

</emphasis>
</para>




<para id="p1052">
Because of the simplicity of this modification, a complete listing of the 
modified 

<emphasis id="strong1054" effect="bold">
SimplePicture

</emphasis>
 class will not be provided in this module.

</para>


	

	

</section>
<section id="h11004">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	

	

<section id="h21001">
<title>
<emphasis id="The_class_named_Prob06" effect="bold">

The class named Prob06

</emphasis>


</title>




<para id="p1053">
You can view the driver class named 

<emphasis id="strong1055" effect="bold">
Prob06

</emphasis>
 at the beginning of the 
source code in 

<link id="a1035" target-id="Listing_7">

Listing 7

</link>

. You are already familiar with the code in the 

<emphasis id="strong1056" effect="bold">

main

</emphasis>
 method of that class from earlier modules so I won't spend any time 
explaining it.

</para>




<para id="p1054">
Briefly, the 

<emphasis id="strong1057" effect="bold">
main

</emphasis>
 method instantiates a new object of the class named


<emphasis id="strong1058" effect="bold">
Prob06Runner

</emphasis>
 and calls the 

<emphasis id="strong1059" effect="bold">
run

</emphasis>
 method on that object. When 
the 

<emphasis id="strong1060" effect="bold">
run

</emphasis>
 method returns, the code in the 

<emphasis id="strong1061" effect="bold">
main

</emphasis>
 method displays some 
information about the three images and terminates.

</para>




<para id="p1055">
<emphasis id="em1003" effect="italics">
(Because there are images on the screen, the program does not actually 
terminate until the user forces it to terminate.)

</emphasis>
</para>




</section>
<section id="h21002">
<title>
<emphasis id="The_class_named_Prob06Runner" effect="bold">

The class named Prob06Runner

</emphasis>


</title>




<para id="p1056">
<emphasis id="strong1062" effect="bold">
Will explain in fragments

</emphasis>
</para>




<para id="p1057">
I will explain this program in fragments. A complete listing of the 
program is provided in 

<link id="a1036" target-id="Listing_7">

Listing 7

</link>

 near the end of the module 

</para>




<para id="p1058">
The class named 

<emphasis id="strong1063" effect="bold">
Prob06Runner

</emphasis>
 begins in 

<link id="a1037" target-id="Listing_2">

Listing 2

</link>

, 
which 
shows the constructor for the class.

</para>


	

<table id="table1002" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

 - Beginning of the class named Prob06Runner.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">

				

<code id="pre1002" display="block">class Prob06Runner{

  public Prob06Runner(){//constructor
    System.out.println("Dick Baldwin.");
  }//end constructor</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1059">
The constructor simply displays the student's name to satisfy one of the 
	requirements of the program.

</para>




<para id="p1060">
<emphasis id="strong1064" effect="bold">
The run method

</emphasis>
</para>




<para id="p1061">
The run method, which is called from the 

<emphasis id="strong1065" effect="bold">
main

</emphasis>
 method in


<link id="a1038" target-id="Listing_7">

Listing 7

</link>

, is shown in its entirety in


<link id="a1039" target-id="Listing_3">

Listing 3

</link>

.

</para>


	

<table id="table1003" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

 - The run method.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">

				

<code id="pre1003" display="block">  public Picture[] run(){
    //Insert executable code here
    Picture picA = new Picture("Prob06a.jpg");
    picA.explore();
    Picture picB = new Picture("Prob06b.jpg");
    picB.addMessage("Dick Baldwin.",10,20);
    picB.explore();

    Picture picC = cropAndFlip(picA,4,5,80,105);

    copyPictureWithCrop(picC,picB,122,70);
    
    picB.show();

    Picture[] output = {picA,picB,picC};
    return output;
  }//end run</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1062">
<emphasis id="strong1066" effect="bold">
New material

</emphasis>
</para>




<para id="p1063">
The only thing in


<link id="a1040" target-id="Listing_3">

Listing 3

</link>

 that is new to this module is the pair of 
calls to the following methods. I will explain these methods in the 
paragraphs that follow:

</para>




<list id="ul1007" list-type="bulleted">

	

<item id="li1033">
<emphasis id="strong1067" effect="bold">
cropAndFlip

</emphasis>
</item>


	

<item id="li1034">
<emphasis id="strong1068" effect="bold">
copyPictureWithCrop

</emphasis>
</item>




</list>




<para id="p1064">
<emphasis id="strong1069" effect="bold">
Beginning of the cropAndFlip method

</emphasis>
</para>




<para id="p1065">
The 

<emphasis id="strong1070" effect="bold">
cropAndFlip 

</emphasis>
method begins in 

<link id="a1041" target-id="Listing_4">

Listing 4

</link>

. 
This method receives an incoming reference to a 

<emphasis id="strong1071" effect="bold">
Picture

</emphasis>
 object. It crops the picture to 
a set of specified coordinate values and flips it around a vertical line at its 
center.

</para>


	

<table id="table1004" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

 - Beginning of the cropAndFlip 
				method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">

				

<code id="pre1004" display="block">  private Picture cropAndFlip(
                 Picture pic,int x1,int y1,int x2,int y2){
    Picture output = new Picture(x2-x1+1,y2-y1+1);

    int width = output.getWidth();
    Pixel pixel = null;
    Color color = null;
    for(int col = x1;col &lt; (x2+1);col++){
      for(int row = y1;row &lt; (y2+1);row++){
        color = pic.getPixel(col,row).getColor();
        pixel = output.getPixel(width-col+x1-1,row-y1);
        pixel.setColor(color);
      }//end inner loop
    }//end outer loop</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1066">
<emphasis id="strong1072" effect="bold">
Receives a reference to the butterfly image

</emphasis>
</para>




<para id="p1067">
Note from 

<link id="a1042" target-id="Listing_3">

Listing 3

</link>

 that the 

<emphasis id="strong1073" effect="bold">
cropAndFlip

</emphasis>
 
method receives a reference to the 

<emphasis id="strong1074" effect="bold">
Picture

</emphasis>
 object of the butterfly that 
is displayed in 

<link id="a1043" target-id="Figure_1">

Figure 1

</link>

.

</para>




<para id="p1068">
Also note that the butterfly in 

<link id="a1044" target-id="Figure_1">

Figure 1

</link>

 is facing 
toward the right while the butterfly in the output image in 

<link id="a1045" target-id="Figure_3">


Figure 3

</link>

 has been cropped to a smaller size and is facing toward the left.

</para>




<para id="p1069">
<emphasis id="strong1075" effect="bold">
Crop and flip is not new

</emphasis>
</para>




<para id="p1070">
The capability to crop and flip an image is not new to this module. 
However, the 

<emphasis id="strong1076" effect="bold">
cropAndFlip 

</emphasis>
method also makes the image partially 
transparent as shown in 

<link id="a1046" target-id="Figure_3">

Figure 3

</link>

. That capability 
is new to this module. I will explain how that is done shortly.

</para>




<para id="p1071">
<emphasis id="strong1077" effect="bold">
A call to the modified SimplePicture constructor

</emphasis>
</para>




<para id="p1072">
Although there is nothing new in the code in 

<link id="a1047" target-id="Listing_4">

Listing 4

</link>

, 
it is important to note that the first statement in 

<link id="a1048" target-id="Listing_4">

Listing 
4

</link>

 causes the 

<emphasis id="strong1078" effect="bold">
SimplePicture

</emphasis>
 
constructor that was modified in 

<link id="a1049" target-id="Listing_1">

Listing 1

</link>

 to be 
called.

</para>




<para id="p1073">
As a result, the 

<emphasis id="strong1079" effect="bold">
Picture

</emphasis>
 object referred to by the reference variable 
named 

<emphasis id="strong1080" effect="bold">
output

</emphasis>
 in 

<link id="a1050" target-id="Listing_4">

Listing 4

</link>

 will accommodate alpha 
transparency data.

</para>




<para id="p1074">
<emphasis id="strong1081" effect="bold">
Make the pixels partially transparent

</emphasis>
</para>




<para id="p1075">
The code in 

<link id="a1051" target-id="Listing_5">

Listing 5

</link>

 uses a pair of nested 

<emphasis id="strong1082" effect="bold">
for

</emphasis>
 loops to iterate 
through all of the pixels in the picture referred to by 

<emphasis id="strong1083" effect="bold">
output

</emphasis>
 and modify 
each pixel.

</para>




<para id="p1076">
The four statements in the body of the inner loop in 

<link id="a1052" target-id="Listing_5">


Listing 5

</link>

 cause the current pixel to become partially transparent.

</para>


	

<table id="table1005" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

 - Make the pixels partially transparent.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">

				

<code id="pre1005" display="block">    width = output.getWidth();
    int height = output.getHeight();
    pixel = null;
    color = null;
    for(int col = 0;col &lt; width;col++){
      for(int row = 0;row &lt; height;row++){

        int basicPixel = output.getBasicPixel(col,row);

        basicPixel = basicPixel &amp; 0x00FFFFFF;
        basicPixel = basicPixel | 0x5F000000;
        
        output.setBasicPixel(col,row,basicPixel);
        
      }//end inner loop
    }//end outer loop

    return output;
  }//end crop and flip</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1077">
<emphasis id="strong1084" effect="bold">
The getBasicPixel method

</emphasis>
</para>




<para id="p1078">
According to Ericson's documentation, the 

<emphasis id="strong1085" effect="bold">
getBasicPixel

</emphasis>
 method will 

<emphasis id="em1004" effect="italics">

"return the pixel value as an int for the given x and y location."

</emphasis>
 In 
other words, a call to the 

<emphasis id="strong1086" effect="bold">
getBasicPixel

</emphasis>
 method will return an


<emphasis id="strong1087" effect="bold">
int

</emphasis>
 value 
containing the red, green, blue, and alpha values for the pixel at the specified 
location.

</para>




<para id="p1079">
<emphasis id="strong1088" effect="bold">
A bitwise AND operation

</emphasis>
</para>




<para id="p1080">
 

<link id="a1053" target-id="Listing_5">


Listing 5

</link>

 uses a bitwise 

<emphasis id="strong1089" effect="bold">
<emphasis id="em1005" effect="italics">
AND

</emphasis>
</emphasis>
 operation 

<emphasis id="em1006" effect="italics">
(note 
the single ampersand)

</emphasis>
 to 
force the eight most significant bits 

<emphasis id="em1007" effect="italics">
(the alpha byte)

</emphasis>
 in the 

<emphasis id="strong1090" effect="bold">
int

</emphasis>
 representation of the 
current pixel to zero while preserving the bit values stored in the least 
significant 24 bits.

</para>




<para id="p1081">
<emphasis id="strong1091" effect="bold">
A bitwise OR operation

</emphasis>
</para>




<para id="p1082">
Then 

<link id="a1054" target-id="Listing_5">


Listing 5

</link>

 uses a bitwise 

<emphasis id="strong1092" effect="bold">
<emphasis id="em1008" effect="italics">
OR

</emphasis>
</emphasis>
 operation (|) to store 
the hexadecimal value 5F in the eight most significant bits 

<emphasis id="em1009" effect="italics">
(the alpha byte)

</emphasis>
 without changing 
the values stored in the 24 least significant bits.

</para>




<para id="p1083">
<emphasis id="strong1093" effect="bold">
The alpha byte

</emphasis>
</para>




<para id="p1084">
The value of the alpha byte can range from 0 to 255. When rendered 
using a mechanism that supports alpha transparency, an alpha value of zero 
causes the pixel to be totally transparent. 

</para>




<para id="p1085">
Similarly, an alpha value of 255 causes the pixel to be totally opaque.

</para>




<para id="p1086">
Values between zero and 255 cause the pixel to be rendered as partially 
opaque or partially transparent, whichever terminology you prefer.

</para>




<para id="p1087">
<emphasis id="strong1094" effect="bold">
Thirty-seven percent opaque

</emphasis>
</para>




<para id="p1088">
If I did the arithmetic correctly, a hexadecimal value of 5F represents a 
decimal value of 95. Therefore, this value will cause the pixel to be 
about 37-percent opaque 

<emphasis id="em1010" effect="italics">
(or 63-percent transparent)

</emphasis>
.

</para>




<para id="p1089">
<emphasis id="strong1095" effect="bold">
The setBasicPixel method

</emphasis>
</para>




<para id="p1090">
As the name implies, the 

<emphasis id="strong1096" effect="bold">
setBasicPixel

</emphasis>
 method can be used to 

<emphasis id="em1011" effect="italics">
"set 
the value of a pixel in the picture from an int."

</emphasis>
</para>




<para id="p1091">
Therefore, the last statement in the body of the inner loop in 

<link id="a1055" target-id="Listing_5">


Listing 5

</link>

 replaces the value of the current pixel with the modified value 
containing a value of 95 in the alpha byte.

</para>




<para id="p1092">
<emphasis id="strong1097" effect="bold">
The end of the cropAndFlip method

</emphasis>
</para>




<para id="p1093">
When the pair of nested 

<emphasis id="strong1098" effect="bold">
for

</emphasis>
 loops in 

<link id="a1056" target-id="Listing_5">


Listing 5

</link>

 terminates, the 

<emphasis id="strong1099" effect="bold">
cropAndFlip 

</emphasis>
method returns control to the 

<emphasis id="strong1100" effect="bold">
run

</emphasis>
 method in


<link id="a1057" target-id="Listing_3">

Listing 3

</link>

, returning a copy of the reference from the 
variable named 

<emphasis id="strong1101" effect="bold">
output

</emphasis>
 

<emphasis id="em1012" effect="italics">
(see


<link id="a1058" target-id="Listing_4">

Listing 4

</link>

)

</emphasis>
 in the process.

</para>




<para id="p1094">
<emphasis id="strong1102" effect="bold">
Save the Picture object's reference

</emphasis>
</para>




<para id="p1095">
The returned reference is stored in the reference variable named 

<emphasis id="strong1103" effect="bold">
picC

</emphasis>
 
in 

<link id="a1059" target-id="Listing_3">

Listing 3

</link>

.

</para>




<para id="p1096">
At this point, 

<emphasis id="strong1104" effect="bold">
picC

</emphasis>
 contains a reference to a butterfly image that has 
been cropped, flipped, and formatted into a buffered image that contains alpha 
transparency information.

</para>




<para id="p1097">
<emphasis id="strong1105" effect="bold">
Call the copyPictureWithCrop method

</emphasis>
</para>




<para id="p1098">
<link id="a1060" target-id="Listing_3">

Listing 3

</link>

 immediately calls the 

<emphasis id="strong1106" effect="bold">

copyPictureWithCrop

</emphasis>
 method passing copies of the references stored in 

<emphasis id="strong1107" effect="bold">

picC

</emphasis>
 and 

<emphasis id="strong1108" effect="bold">
picB

</emphasis>
 along with a pair of integer coordinate values.

</para>




<para id="p1099">
<emphasis id="strong1109" effect="bold">
The copyPictureWithCrop method

</emphasis>
</para>




<para id="p1100">
The 

<emphasis id="strong1110" effect="bold">
copyPictureWithCrop

</emphasis>
 method is shown in its entirety in


<link id="a1061" target-id="Listing_6">

Listing 6

</link>

.

</para>


	
	

<table id="table1006" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

 - The copyPictureWithCrop method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">

				

<code id="pre1006" display="block">  private void copyPictureWithCrop(
           Picture source,Picture dest,int xOff,
                                       int yOff){

      Graphics destGraphics = dest.getGraphics();
      Image sourceImage = source.getImage();
      destGraphics.drawImage(sourceImage,
                             xOff,
                             yOff,
                             null);
  }//end copyPictureWithCrop method
}//end class Prob06Runner</code>


				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

<para id="p1101">
The purpose of the 

<emphasis id="strong1111" effect="bold">
copyPictureWithCrop 

</emphasis>
method is to copy a source 
	picture onto a destination picture with an offset on each axis.

</para>




<para id="p1102">
<emphasis id="strong1112" effect="bold">
An exercise for the student

</emphasis>
</para>




<para id="p1103">
I won't attempt to explain the code in


<link id="a1062" target-id="Listing_6">

Listing 6

</link>

 in this module. Instead, I will simply 
suggest that you go to Google and search for the following or similar keywords:

</para>




<para id="p1104">
<emphasis id="strong1113" effect="bold">
<emphasis id="em1013" effect="italics">
baldwin java drawImage

</emphasis>
</emphasis>
</para>




<para id="p1105">
You will find many tutorials that I have written that deal with topics in 
this area.

</para>




<para id="p1106">
<emphasis id="strong1114" effect="bold">
Modify the destination pixel colors

</emphasis>
</para>




<para id="p1107">
I will tell you that the use of the 

<emphasis id="strong1115" effect="bold">
drawImage

</emphasis>
 method in


<link id="a1063" target-id="Listing_6">

Listing 6

</link>

 modifies the destination picture in such a 
way that the color of each pixel in the resulting image is a combination of the 
colors in the original destination image and the corresponding pixel in the 
source image.

</para>




<para id="p1108">
<emphasis id="strong1116" effect="bold">
An illusion of transparency

</emphasis>
</para>




<para id="p1109">
If a source pixel is totally transparent, it has no effect on the color of 
the destination pixel.

</para>




<para id="p1110">
If the source pixel is totally opaque, the color of the destination pixel is 
changed to the color of the source pixel.

</para>




<para id="p1111">
For alpha values between these two extremes, the final color of the 
destination pixel produces the illusion of a partially transparent image in 
front of the original destination image.

</para>




<para id="p1112">
<emphasis id="strong1117" effect="bold">
Termination of the copyPictureWithCrop method

</emphasis>
</para>




<para id="p1113">
When the 

<emphasis id="strong1118" effect="bold">
copyPictureWithCrop

</emphasis>
 method terminates in 

<link id="a1064" target-id="Listing_6">


Listing 6

</link>

, control returns to the run method in 

<link id="a1065" target-id="Listing_3">

Listing 
3

</link>

.

</para>




<para id="p1114">
<link id="a1066" target-id="Listing_3">

Listing 3

</link>

 calls the 

<emphasis id="strong1119" effect="bold">
show

</emphasis>
 method to display the image in the 
now-modified 

<emphasis id="strong1120" effect="bold">
Picture

</emphasis>
 object referred to by 

<emphasis id="strong1121" effect="bold">
picB

</emphasis>
, as shown in


<link id="a1067" target-id="Figure_3">

Figure 3

</link>

.

</para>




<para id="p1115">
<emphasis id="strong1122" effect="bold">
Return a reference to an array object

</emphasis>
</para>




<para id="p1116">
Then the 

<emphasis id="strong1123" effect="bold">
run

</emphasis>
 method encapsulates references to each of the three 
images in an array object and returns control to the 

<emphasis id="strong1124" effect="bold">
main

</emphasis>
 method in


<link id="a1068" target-id="Listing_7">

Listing 7

</link>

, returning a copy of the array object's 
reference in the process.

</para>




<para id="p1117">
The 

<emphasis id="strong1125" effect="bold">
main

</emphasis>
 method in 

<link id="a1069" target-id="Listing_7">

Listing 7

</link>

 displays 
information about each of the three 

<emphasis id="strong1126" effect="bold">
Picture

</emphasis>
 objects, producing the output shown in 

<link id="a1070" target-id="Figure_4">


Figure 4

</link>

. Then the main method terminates.

</para>




<para id="p1118">
<emphasis id="strong1127" effect="bold">
Images don't go away immediately

</emphasis>
</para>




<para id="p1119">
Because there are images belonging to the program still on the screen, the 
program doesn't return control to the operating system. It will simply 
wait until it is forced to terminate by the user before returning control to the 
operating system.

</para>




<para id="p1120">
Clicking the X-buttons in the upper-right corners of the images will simply 
hide the frames and won't terminate the program. Some extra work is 
required to deal with this issue.

</para>






</section>
</section>
<section id="h11005">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>






<para id="p1121">
I encourage you to copy the code from 

<link id="a1071" target-id="Listing_7">

Listing 7

</link>

. 
Compile the code and execute it. Experiment with the code, making changes, and 
observing the results of your changes. Make certain that you can explain why 
your changes behave as they do.

</para>


	

</section>
<section id="h11006">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1122">
In this module, you learned about:

</para>




<list id="ul1008" list-type="bulleted">

	

<item id="li1035">
Alpha transparency

</item>


	

<item id="li1036">
A buffered image of type TYPE_INT_ARGB

</item>


	

<item id="li1037">
The ability to use the 

<emphasis id="strong1128" effect="bold">
getBasicPixel

</emphasis>
 and 

<emphasis id="strong1129" effect="bold">
setBasicPixel

</emphasis>
 
	methods, 

</item>


	

<item id="li1038">
The use of the bitwise AND and OR operators,

</item>


	

<item id="li1039">
The use of the 

<emphasis id="strong1130" effect="bold">
drawImage

</emphasis>
 method of the 

<emphasis id="strong1131" effect="bold">
Graphics

</emphasis>
 class.

</item>




</list>




<para id="p1123">
You modified the 

<emphasis id="strong1132" effect="bold">
SimplePicture

</emphasis>
 class to cause the buffered image used 
to store the image to be TYPE_INT_ARGB instead of TYPE_INT_RGB, which is its 
normal type.

</para>




<para id="p1124">
You wrote a method that cropped and flipped an image of a butterfly.

</para>




<para id="p1125">
You used the 

<emphasis id="strong1133" effect="bold">
getBasicPixel

</emphasis>
 and 

<emphasis id="strong1134" effect="bold">
setBasicPixel

</emphasis>
 methods from 
Ericson's library along with bitwise operations to set the alpha value for all 
the pixels in the cropped and flipped image of the butterfly to a hexadecimal 
value of 5F.

</para>




<para id="p1126">
Finally, you used the standard 

<emphasis id="strong1135" effect="bold">
drawImage

</emphasis>
 method of the 

<emphasis id="strong1136" effect="bold">
Graphics

</emphasis>
 
class to draw the image of the butterfly onto an image of a beach with 
transparency.

</para>




</section>
<section id="h11007">
<title>
<emphasis id="Whats_next" effect="bold">

What's next?

</emphasis>


</title>




<para id="p1127">
In the next module, you will learn how to use a slider to continuously change the opacity of an image and 
to draw that modified image onto a background image.

</para>


	

</section>
<section id="h11008">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1128">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1137" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1009" list-type="bulleted">

					

<item id="li1040">
Module name: Java OOP: Using Alpha Transparency with Ericson's Media Library

</item>


					

<item id="li1041">
File: Java3112.htm


</item>


					

<item id="li1042">
Published: 05/13/12

</item>




<item id="li1043">
Revised: 02/06/16

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1138" effect="bold">
Disclaimers:

</emphasis>
<para id="p1129">
<emphasis id="strong1139" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1130">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1131">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1132">
<emphasis id="strong1140" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


				

</note>

			


		



	





</section>
<section id="h11009">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1133">
A complete listing of the program discussed in this module is shown in


<link id="a1072" target-id="Listing_7">

Listing 7

</link>

 below.

</para>





<para id="p1134">
<emphasis id="strong1141" effect="bold">
<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

 - Complete program listing.

</emphasis>
</para>



				

<code id="pre1007" display="block">/*File Prob06 Copyright 2008 R.G.Baldwin
Revised 12/31/08
*********************************************************/
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;

public class Prob06{
  //DO NOT MODIFY THE CODE IN THIS CLASS DEFINITION.
  public static void main(String[] args){
    Picture[] pictures = new Prob06Runner().run();
    System.out.println(pictures[0]);
    System.out.println(pictures[1]);
    System.out.println(pictures[2]);
  }//end main method
}//end class Prob06
//======================================================//

class Prob06Runner{

  public Prob06Runner(){//constructor
    System.out.println("Dick Baldwin.");
  }//end constructor
  //----------------------------------------------------//
  public Picture[] run(){
    //Insert executable code here
    Picture picA = new Picture("Prob06a.jpg");
    picA.explore();
    Picture picB = new Picture("Prob06b.jpg");
    picB.addMessage("Dick Baldwin.",10,20);
    picB.explore();

    Picture picC = cropAndFlip(picA,4,5,80,105);
    copyPictureWithCrop(picC,picB,122,70);

    picB.show();

    Picture[] output = {picA,picB,picC};
    return output;
  }//end run
  //----------------------------------------------------//

  //Crops a picture to the specified coordinate values and
  // flips it around a vertical line at its center.
  //Also makes it partially transparent
  private Picture cropAndFlip(
                 Picture pic,int x1,int y1,int x2,int y2){
    Picture output = new Picture(x2-x1+1,y2-y1+1);

    int width = output.getWidth();
    Pixel pixel = null;
    Color color = null;
    for(int col = x1;col &lt; (x2+1);col++){
      for(int row = y1;row &lt; (y2+1);row++){
        color = pic.getPixel(col,row).getColor();
        pixel = output.getPixel(width-col+x1-1,row-y1);
        pixel.setColor(color);
      }//end inner loop
    }//end outer loop

    width = output.getWidth();
    int height = output.getHeight();
    pixel = null;
    color = null;
    for(int col = 0;col &lt; width;col++){
      for(int row = 0;row &lt; height;row++){

        int basicPixel = output.getBasicPixel(col,row);
        basicPixel = basicPixel &amp; 0x00FFFFFF;
        basicPixel = basicPixel | 0x5F000000;
        output.setBasicPixel(col,row,basicPixel);
      }//end inner loop
    }//end outer loop


    return output;
  }//end crop and flip
  //----------------------------------------------------//

  //Copies the source picture onto the destination
  // picture with an offset on both axes.
  private void copyPictureWithCrop(
           Picture source,Picture dest,int xOff,
                                       int yOff){

      Graphics destGraphics = dest.getGraphics();
      Image sourceImage = source.getImage();
      destGraphics.drawImage(sourceImage,
                             xOff,
                             yOff,
                             null);
  }//end copyPictureWithCrop method
}//end class Prob06Runner</code>


	

<para id="p1135">
-end- 

</para>






</section>
</content>




</document>